import unittest
from NetworkFlow import maxThroughput


inf = float('inf')

class TestNetworkFlow(unittest.TestCase):

    def test1(self):
        connections = [(0, 1, 10), (1, 2, 5), (1, 3, 7), (3, 4, 10)] 
        maxIn = [inf, 10, 5, 7, inf]  
        maxOut = [inf, 10, 5, 10, inf] 
        origin = 0  
        targets = [2, 4]  
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets),10)


    def test2(self):
        connections = [(0,1,20), (1,3,30), (1,4,5), (0,2,10), (2, 4, 15)]
        maxIn = [inf, inf, inf, inf, inf]
        maxOut = [inf, inf, inf, inf, inf]
        origin = 0
        targets = [3,4]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 30)

    def test3(self):
        connections = [(0, 1, 3000), (1, 2, 2000), (1, 3, 1000),
        (0, 3, 2000), (3, 4, 2000), (3, 2, 1000)]
        maxIn = [5000, 3000, 3000, 3000, 2000]
        maxOut = [5000, 3000, 3000, 2500, 1500]
        origin = 3
        targets = [4, 2]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 2500)

    def test4(self):
        connections = [(0,1,30), (1,3,30), (1,4,30), (0,2,30), (2, 4,30)]
        maxIn = [5, 5, 5, 5, 5]
        maxOut = [1000, 1000, 1000, 1000, 1000]
        origin = 0
        targets = [3,4]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 10)

    def test5(self):
        connections = [(0,1,30), (1,3,30), (1,4,30), (0,2,30), (2, 4,30)]
        maxIn = [1000, 1000, 1000, 1000, 1000]
        maxOut = [100, 5, 5, 5, 5] 
        origin = 0
        targets = [3,4]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 10)


    def test6(self):
        connections = [(0,1,30), (1,3,30), (1,4,30), (0,2,30), (2, 4,30)]
        maxIn = [1000, 1000, 1000, 1000, 1000]
        maxOut = [1, 1000, 1000, 1000, 1000] 
        origin = 0
        targets = [3,4]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 1)

    def test7(self):
        connections = [(0,1,30), (1,3,30), (1,4,30), (0,2,30), (2, 4,30)]
        maxIn = [1000, 1000, 1000, 1000, 1000]
        maxOut = [1000, 1000, 1000, 1000, 1000] 
        origin = 0
        targets = [1,2,3,4]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 60)


    def test9(self):
        connections = [(0, 1, 3000), (0, 2, 2000)]
        maxIn = [5000, 0, 0]
        maxOut = [5000, 0, 0]
        origin = 0
        targets = [1, 2]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test10(self):
        connections = [(0, 1, 1000), (0, 2, 2000), (2, 1, 3000)]
        maxIn = [5000, 4000, 3000]
        maxOut = [5000, 4000, 3000]
        origin = 0
        targets = [1]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 3000)


    def test11(self):
        connections = [(0, 1, 1000), (0, 2, 2000), (0, 3, 3000)]
        maxIn = [5000, 1000, 2000, 3000]
        maxOut = [10000, 1000, 2000, 3000]
        origin = 0
        targets = [1, 2, 3]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 6000)

    def test12(self):
        connections = [(0, 1, 3000), (0, 2, 2000)]
        maxIn = [0, 5000, 5000]
        maxOut = [0, 5000, 5000]
        origin = 0
        targets = [1, 2]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)

    def test14(self):
        connections = [(0, 1, 2000), (0, 2, 2000)]
        maxIn = [5000, 2000, 2000]
        maxOut = [5000, 2000, 2000]
        origin = 0
        targets = [1, 2]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 4000)

    def test15(self):
        connections = [(0, 1, 3000)]
        maxIn = [5000, 3000]
        maxOut = [5000, 3000]
        origin = 0
        targets = [1]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 3000)

    def test16(self):
        connections = [(0, 1, 0), (0, 2, 0)]
        maxIn = [5000, 5000, 5000]
        maxOut = [5000, 5000, 5000]
        origin = 0
        targets = [1, 2]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)

    def test17(self):
        connections = [(0, 1, 1000), (0, 2, 1000), (0, 3, 1000)]
        maxIn = [5000, 1000, 1000, 1000]
        maxOut = [5000, 1000, 1000, 1000]
        origin = 0
        targets = [1, 2, 3]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 3000)

    def test_bidirectional(self):
        connections = [(0, 1, 3000), (1, 2, 2000), (1, 3, 1000), (2, 1, 2000),
                       (0, 3, 2000), (3, 4, 2000), (3, 2, 1000)]
        maxIn = [5000, 3000, 3000, 3000, 2000]
        maxOut = [5000, 3000, 3000, 2500, 1500]
        origin = 0
        targets = [4, 2]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 4500)
    
    def test_provided(self):
        """
        Using test provided by problem sheet.
        """
        connections = [(0, 1, 3000), (1, 2, 2000), (1, 3, 1000),
        (0, 3, 2000), (3, 4, 2000), (3, 2, 1000)]
        maxIn = [5000, 3000, 3000, 3000, 2000]
        maxOut = [5000, 3000, 3000, 2500, 1500]
        origin = 0
        targets = [4, 2]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 4500)

    def test_0(self):
        connections = [(0, 1, 10), (0, 2, 100), (1, 3, 50),
        (2, 3, 50)]
        maxIn = [1, 60, 50, 7]
        maxOut = [1, 60, 50, 7]
        origin = 0
        targets = [3]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 1)

    def test_1(self):
        connections = [(0, 1, 10), (0, 2, 100), (1, 3, 50),
        (2, 3, 50)]
        maxIn = [20, 60, 50, 7]
        maxOut = [20, 60, 50, 7]
        origin = 0
        targets = [3]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 7)
    
    def test_2(self):
        connections = [(0, 1, 10), (0, 2, 100), (1, 3, 50),
        (2, 3, 50)]
        maxIn = [1, 60, 50, 7]
        maxOut = [20, 60, 50, 7]
        origin = 0
        targets = [3]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 7)

    def test_3(self):
        connections = [(0, 1, 20), (1, 2, 20)]
        maxIn = [20, 5, 20]
        maxOut = [20, 100, 20]
        origin = 0
        targets = [1]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 5)

    def test_4(self):
        connections = [(0, 1, 50), (1, 2, 20), (1, 3, 35)]
        maxIn = [60, 60, 10, 30]
        maxOut = [60, 50, 30, 2]
        origin = 0
        targets = [2, 3]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 40)

    def test_2727(self):
        connections = [(2, 17, 433), (1, 9, 859), (13, 1, 972), (0, 4, 862), (17, 6, 690), (3, 9, 876), (1, 13, 731), (9, 2, 695), (11, 0, 835), (18, 10, 701), (5, 11, 327), (5, 8, 456), (13, 
3, 883), (19, 3, 474), (14, 6, 374), (1, 2, 681), (10, 5, 293), (17, 3, 888), (12, 5, 908), (12, 10, 538), (15, 2, 698), (4, 12, 336), (7, 18, 394), (6, 2, 581), (16, 14, 376), (14, 8, 571), (5, 6, 637), (14, 1, 602), (19, 9, 510), (2, 0, 939), (8, 10, 730), (7, 8, 282), (17, 0, 577)]
        maxIn = [677, 769, 358, 218, 907, 955, 896, 154, 732, 890, 192, 915, 573, 840, 679, 946, 134, 808, 420, 597]
        maxOut = [346, 548, 54, 17, 885, 681, 810, 324, 380, 295, 506, 339, 896, 66, 238, 544, 498, 23, 659, 774]
        origin = 11
        targets = [5, 17]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 336)

    def test_7976(self):
        connections = [(1, 0, 850), (14, 12, 452), (7, 11, 647), (7, 1, 978), (5, 15, 337), (2, 7, 843), (9, 4, 414), (8, 6, 692), (18, 13, 956), (6, 18, 579), (8, 17, 530), (15, 16, 378), (0, 12, 399), (17, 15, 259), (9, 3, 766), (10, 7, 450), (5, 7, 433), (14, 15, 609), (11, 12, 400), (13, 15, 476), (10, 15, 832), (0, 16, 314), (18, 11, 583), (2, 16, 351), (11, 18, 614), (4, 16, 963), (0, 1, 911), (7, 9, 432), (17, 12, 577), (1, 8, 346), (0, 17, 855), (13, 6, 576), (9, 10, 472), (19, 13, 383), (17, 16, 727), (3, 15, 573), (1, 3, 316), (19, 15, 283), (12, 3, 673), (3, 8, 610), (13, 8, 607), (9, 1, 487), (5, 14, 941), (8, 12, 682), (2, 8, 495), (17, 9, 690), (8, 10, 764), (6, 16, 485), (15, 1, 964), (19, 14, 720), (7, 15, 840), (12, 11, 692), (10, 17, 672), (7, 13, 736), (16, 5, 385), (4, 0, 459), (3, 18, 968), (16, 12, 555), (3, 16, 470), (10, 3, 581)]
        maxIn = [538, 28, 623, 270, 29, 709, 302, 125, 122, 704, 794, 105, 165, 660, 401, 347, 913, 774, 251, 455]
        maxOut = [621, 329, 40, 333, 715, 933, 400, 831, 338, 687, 250, 137, 498, 95, 789, 114, 857, 905, 639, 377]
        origin = 17
        targets = [16, 2]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 905)

    def test_7223(self):
        connections = [(18, 13, 633), (0, 4, 746), (8, 9, 499), (3, 8, 282), (19, 4, 751), (15, 13, 861), (10, 18, 807), (5, 8, 755), (12, 3, 436), (9, 10, 372), (12, 4, 410), (10, 0, 337), (9, 5, 815), (9, 8, 899), (17, 19, 604), (15, 0, 811), (17, 16, 294), (6, 15, 817), (1, 17, 526), (19, 7, 380), (5, 15, 778), (11, 12, 915), (4, 10, 934), (19, 3, 669), (3, 15, 521), (0, 6, 281), (12, 17, 977), (11, 7, 882), (12, 0, 436), (18, 14, 255), (7, 2, 728), (13, 16, 782), (13, 17, 274), (18, 10, 797), (16, 13, 902), (19, 12, 354), (0, 7, 319), (9, 7, 524), (14, 8, 937), (2, 14, 956), (2, 10, 757), (18, 2, 628), (9, 12, 288), (6, 9, 284), (14, 7, 441), (7, 3, 774), (13, 11, 962)]
        maxIn = [767, 541, 959, 842, 823, 763, 147, 295, 139, 780, 64, 545, 368, 397, 276, 940, 76, 513, 202, 877]
        maxOut = [754, 234, 543, 516, 879, 796, 456, 179, 554, 186, 119, 529, 411, 79, 609, 19, 486, 98, 837, 479]
        origin = 10
        targets = [6, 9]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 119)

    def test_1310(self):
        connections = [(8, 5, 874), (1, 3, 992), (1, 5, 760), (9, 8, 875), (0, 3, 817), (3, 2, 623), (7, 5, 865), (6, 3, 294), (2, 4, 749), (6, 1, 785), (4, 7, 835), (2, 8, 621), (3, 8, 278), 
(0, 2, 885), (3, 4, 900), (7, 0, 746), (2, 7, 323), (3, 7, 523), (9, 5, 799), (5, 3, 733), (7, 9, 275), (0, 5, 895)]
        maxIn = [341, 125, 36, 605, 915, 938, 660, 955, 657, 867]
        maxOut = [55, 29, 515, 842, 546, 253, 388, 743, 463, 917]
        origin = 0
        targets = [3, 8, 5]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 55)

    def test_6823(self):
        connections = [(6, 5, 418), (8, 2, 426), (0, 4, 708), (6, 4, 909), (1, 6, 864), (2, 4, 612), (4, 6, 912), (7, 6, 762), (3, 2, 513), (1, 9, 935), (6, 2, 445), (2, 7, 892), (3, 6, 555), (0, 1, 295), (0, 2, 349), (5, 1, 569), (9, 4, 828), (4, 8, 578)]
        maxIn = [442, 952, 592, 701, 641, 402, 23, 135, 530, 981]
        maxOut = [382, 708, 216, 832, 15, 143, 58, 782, 690, 838]
        origin = 3
        targets = [9, 2, 0]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 536)


    def test_3474(self):
        connections = [(8, 1, 826), (7, 8, 330), (2, 7, 643), (6, 3, 880), (6, 1, 685), (5, 9, 551), (7, 3, 773), (2, 4, 502), (9, 7, 612), (3, 2, 946), (9, 1, 986), (4, 1, 443), (1, 4, 349), (2, 6, 927), (0, 1, 962), (1, 7, 992)]
        maxIn = [929, 560, 979, 113, 478, 791, 233, 840, 514, 534]
        maxOut = [209, 324, 295, 51, 357, 646, 958, 836, 949, 665]
        origin = 1
        targets = [7, 6, 0]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 324)


    def test_2717(self):
        connections = [(7, 4, 326), (1, 9, 814), (9, 1, 496), (3, 8, 634), (0, 6, 863), (0, 5, 302), (4, 7, 358), (2, 4, 882), (3, 5, 761), (8, 0, 901), (4, 1, 640), (5, 6, 679), (6, 2, 377), (7, 2, 519)]
        maxIn = [294, 455, 502, 781, 790, 605, 19, 357, 666, 220]
        maxOut = [149, 323, 487, 605, 497, 125, 868, 139, 854, 130]
        origin = 2
        targets = [8, 9, 0]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 220)
    
    def test_611259(self):
        connections = [(4, 1, 979), (8, 10, 983), (4, 5, 769), (7, 6, 422), (3, 0, 998), (0, 5, 876), (5, 7, 299), (11, 0, 292), (9, 4, 935), (4, 6, 409), (5, 0, 488), (6, 2, 350), (8, 9, 534), (10, 0, 623), (2, 5, 274), (10, 7, 513), (10, 6, 810), (7, 0, 660), (6, 10, 588), (2, 3, 706), (1, 2, 796), (5, 4, 530)]
        maxIn = [987, 962, 685, 529, 885, 667, 227, 466, 165, 396, 139, 921]
        maxOut = [566, 416, 617, 358, 419, 390, 953, 48, 271, 590, 47, 688]
        origin = 8
        targets = [3, 9, 6]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 271)


    def test_700277(self):
        connections = [(1, 2, 515), (4, 3, 555), (5, 8, 728), (4, 0, 885), (1, 8, 853), (7, 11, 481), (10, 0, 529), (11, 8, 533), (3, 8, 546), (7, 0, 987), (2, 0, 345), (0, 9, 332), (9, 11, 439), (1, 
    6, 620), (8, 3, 911), (11, 3, 899), (6, 8, 441), (2, 3, 825), (10, 7, 320), (6, 2, 718)]
        maxIn = [20, 424, 637, 317, 483, 344, 329, 38, 186, 887, 874, 793]
        maxOut = [291, 266, 746, 954, 759, 386, 427, 896, 413, 840, 359, 652]
        origin = 3
        targets = [0, 6, 2]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_579008(self):
        connections = [(7, 11, 307), (3, 10, 762), (8, 1, 954), (0, 8, 623), (4, 1, 759), (4, 8, 296), (5, 0, 743), (6, 7, 592), (9, 3, 603), (2, 3, 901), (10, 6, 361), (1, 2, 618), (11, 6, 745)]     
        maxIn = [484, 813, 724, 18, 834, 645, 32, 573, 974, 173, 999, 549]
        maxOut = [797, 979, 887, 261, 666, 275, 276, 675, 508, 690, 739, 595]
        origin = 7
        targets = [1, 6, 4]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 32)


    def test_384625(self):
        connections = [(4, 7, 455), (5, 4, 397), (3, 4, 874), (3, 2, 346), (6, 5, 292), (0, 1, 732), (11, 6, 779), (7, 4, 880), (11, 7, 325), (10, 3, 402), (7, 2, 503), (5, 0, 987), (2, 11, 559), (8, 
    5, 572), (9, 6, 628), (1, 3, 909), (6, 9, 836)]
        maxIn = [686, 512, 950, 516, 562, 248, 436, 878, 822, 646, 48, 930]
        maxOut = [606, 337, 676, 472, 805, 40, 876, 850, 208, 49, 915, 801]
        origin = 1
        targets = [7, 11, 6]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 337)


    def test_355432(self):
        connections = [(0, 1, 891), (7, 10, 612), (8, 11, 683), (5, 1, 448), (0, 10, 649), (2, 3, 583), (10, 3, 263), (4, 10, 880), (8, 5, 803), (9, 3, 711), (9, 11, 364), (6, 11, 936), (9, 10, 448), 
    (11, 0, 279), (2, 0, 446), (2, 4, 593), (11, 7, 452), (6, 9, 883), (10, 6, 469), (1, 3, 923), (1, 7, 655), (10, 7, 473), (5, 4, 561), (4, 6, 423), (8, 10, 291), (7, 0, 971), (3, 0, 883), (9, 7, 719), (9, 0, 680)]
        maxIn = [561, 315, 84, 367, 809, 827, 481, 132, 803, 967, 209, 859]
        maxOut = [639, 125, 709, 500, 612, 749, 651, 381, 251, 770, 696, 182]
        origin = 11
        targets = [6, 7, 0]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 182)


    def test_873846(self):
        connections = [(2, 0, 600), (9, 11, 920), (11, 7, 548), (8, 1, 577), (1, 7, 730), (3, 5, 335), (8, 6, 347), (1, 0, 355), (11, 0, 844), (3, 10, 471), (5, 7, 826), (7, 1, 647), (9, 1, 524), (0, 
    3, 938), (10, 1, 597), (6, 2, 630), (7, 8, 835), (4, 5, 413), (10, 9, 668), (6, 7, 287), (10, 4, 690), (11, 5, 347), (4, 11, 849), (0, 7, 773), (9, 8, 574), (8, 0, 472)]
        maxIn = [740, 295, 599, 290, 726, 734, 228, 494, 689, 786, 702, 678]
        maxOut = [670, 513, 932, 493, 891, 599, 957, 195, 721, 141, 647, 956]
        origin = 4
        targets = [1, 11, 7]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 891)

    def test_315834(self):
        connections = [(9, 11, 683), (10, 11, 560), (6, 2, 394), (3, 5, 661), (7, 1, 514), (11, 1, 997), (1, 2, 438), (4, 7, 684), (8, 4, 961), (0, 11, 777), (5, 10, 350), (2, 6, 303), (0, 2, 866)]
        maxIn = [426, 139, 57, 288, 621, 686, 228, 952, 518, 370, 592, 678]
        maxOut = [33, 906, 286, 798, 53, 344, 278, 364, 515, 66, 769, 336]
        origin = 0
        targets = [5, 7, 10]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_732286(self):
        connections = [(11, 7, 420), (8, 9, 908), (9, 4, 350), (0, 7, 827), (5, 10, 359), (0, 4, 956), (4, 6, 464), (3, 8, 385), (3, 6, 833), (10, 4, 325), (7, 2, 789), (8, 10, 621), (3, 4, 399), (10, 7, 714), (2, 8, 623), (9, 3, 862), (6, 11, 349), (1, 0, 881), (5, 4, 515)]
        maxIn = [562, 171, 413, 805, 481, 908, 98, 844, 444, 474, 346, 456]
        maxOut = [428, 476, 683, 9, 685, 384, 727, 270, 9, 353, 762, 577]
        origin = 0
        targets = [11, 2, 3]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 368)


    def test_846955(self):
        connections = [(10, 6, 989), (0, 3, 268), (7, 6, 351), (3, 11, 973), (11, 7, 538), (10, 11, 310), (10, 5, 757), (11, 0, 587), (9, 2, 282), (0, 9, 900), (7, 10, 485), (6, 2, 435), (2, 8, 538), 
    (7, 5, 928), (5, 1, 788), (2, 4, 745), (1, 0, 680), (8, 0, 677), (5, 8, 265), (4, 9, 520), (8, 10, 251), (2, 11, 652), (3, 1, 936)]
        maxIn = [259, 684, 841, 892, 929, 370, 884, 471, 154, 884, 688, 901]
        maxOut = [471, 208, 614, 898, 582, 69, 760, 239, 153, 338, 180, 433]
        origin = 2
        targets = [8, 7, 5]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 587)


    def test_958394(self):
        connections = [(8, 0, 536), (2, 9, 792), (9, 10, 803), (5, 7, 998), (11, 10, 483), (10, 2, 314), (8, 10, 476), (4, 7, 854), (2, 10, 341), (4, 9, 891), (9, 0, 929), (3, 6, 498), (5, 4, 660), (6, 10, 574), (2, 5, 903), (7, 0, 905), (5, 6, 635), (6, 7, 297), (0, 5, 310), (11, 7, 662), (1, 0, 491), (6, 0, 718), (7, 10, 335), (11, 1, 258), (4, 1, 958), (5, 9, 633)]
        maxIn = [466, 968, 845, 370, 83, 24, 392, 306, 100, 822, 108, 969]
        maxOut = [975, 448, 631, 332, 91, 150, 870, 947, 944, 810, 426, 905]
        origin = 2
        targets = [6, 11, 0]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 490)


    def test_986702(self):
        connections = [(9, 3, 644), (11, 0, 572), (1, 10, 268), (11, 2, 743), (2, 9, 818), (7, 11, 766), (5, 7, 860), (2, 10, 764), (0, 3, 604), (5, 9, 849), (10, 11, 442), (6, 1, 367), (8, 1, 470), (3, 7, 384), (7, 9, 844), (5, 6, 961), (4, 11, 321)]
        maxIn = [532, 283, 570, 717, 453, 815, 71, 415, 136, 79, 274, 251]
        maxOut = [589, 907, 458, 474, 195, 651, 191, 906, 882, 811, 984, 747]
        origin = 4
        targets = [5, 6, 10]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 195)


    def test_282773(self):
        connections = [(11, 9, 796), (8, 10, 533), (1, 6, 424), (5, 10, 937), (0, 3, 994), (6, 11, 471), (3, 8, 463), (2, 1, 469), (7, 10, 688), (2, 3, 359), (4, 2, 801), (1, 0, 250), (1, 8, 685), (9, 8, 272), (10, 9, 731)]
        maxIn = [739, 858, 459, 112, 37, 120, 306, 669, 270, 313, 261, 7]
        maxOut = [416, 564, 808, 266, 566, 742, 937, 533, 646, 628, 215, 524]
        origin = 5
        targets = [8, 6, 4]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 215)


    def test_738414(self):
        connections = [(1, 9, 621), (6, 0, 250), (10, 4, 436), (3, 1, 423), (9, 11, 581), (3, 11, 366), (7, 2, 869), (2, 6, 599), (5, 10, 666), (0, 10, 968), (11, 7, 290), (2, 4, 849), (0, 4, 421), (8, 6, 480), (6, 9, 535), (7, 8, 527), (1, 11, 802), (8, 4, 635), (10, 11, 287), (4, 8, 475), (5, 4, 481)]
        maxIn = [427, 88, 623, 216, 284, 916, 945, 387, 994, 382, 129, 412]
        maxOut = [918, 632, 561, 811, 44, 46, 322, 96, 671, 295, 993, 600]
        origin = 2
        targets = [1, 0, 6]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 561)

    def test_731741(self):
        connections = [(0, 2, 547), (5, 4, 902), (3, 4, 559), (2, 3, 771), (4, 5, 425), (1, 3, 785), (1, 2, 410)]
        maxIn = [612, 168, 898, 10, 966, 194]
        maxOut = [307, 348, 682, 30, 511, 956]
        origin = 2
        targets = [1]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_960141(self):
        connections = [(4, 2, 394), (5, 1, 609), (5, 3, 265), (2, 1, 742), (1, 4, 610), (0, 4, 884), (3, 0, 654), (3, 4, 444)]
        maxIn = [152, 100, 902, 375, 560, 109]
        maxOut = [658, 356, 676, 658, 237, 792]
        origin = 2
        targets = [5]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)

    
    def test_289588(self):
        connections = [(2, 5, 989), (1, 5, 724), (0, 4, 335), (0, 5, 954), (2, 0, 586), (5, 3, 390), (3, 4, 872), (4, 2, 783)]
        maxIn = [875, 94, 642, 99, 865, 572]
        maxOut = [495, 186, 338, 707, 556, 207]
        origin = 5
        targets = [1]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_906486(self):
        connections = [(3, 1, 624), (2, 4, 625), (1, 4, 312), (5, 2, 873), (0, 2, 421), (4, 2, 257)]
        maxIn = [770, 30, 239, 148, 990, 170]
        maxOut = [793, 251, 618, 935, 856, 435]
        origin = 5
        targets = [0]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_214637(self):
        connections = [(5, 1, 861), (0, 1, 482), (3, 0, 559), (2, 0, 933), (1, 2, 703), (3, 5, 905), (4, 1, 436)]
        maxIn = [193, 778, 98, 984, 725, 796]
        maxOut = [920, 279, 845, 483, 548, 907]
        origin = 4
        targets = [1]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 436)


    def test_316043(self):
        connections = [(3, 4, 443), (1, 4, 993), (4, 5, 668), (0, 4, 497), (2, 3, 801), (5, 2, 704)]
        maxIn = [72, 739, 918, 322, 196, 962]
        maxOut = [414, 23, 280, 20, 825, 936]
        origin = 2
        targets = [1]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_957021(self):
        connections = [(5, 3, 347), (1, 2, 717), (0, 3, 323), (1, 5, 563), (3, 1, 842), (2, 4, 329), (4, 1, 827), (4, 2, 423)]
        maxIn = [197, 98, 908, 448, 855, 294]
        maxOut = [917, 802, 166, 979, 800, 919]
        origin = 0
        targets = [4]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 98)


    def test_323799(self):
        connections = [(5, 3, 433), (3, 1, 553), (1, 4, 1000), (3, 4, 973), (4, 3, 916), (2, 5, 768), (1, 2, 599), (0, 4, 899)]
        maxIn = [973, 606, 506, 275, 74, 378]
        maxOut = [508, 103, 970, 993, 560, 315]
        origin = 5
        targets = [0]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)
    
    def test_221339(self):
        connections = [(4, 10, 722), (25, 14, 562), (6, 19, 294), (21, 5, 410), (24, 25, 498), (2, 16, 849), (11, 14, 398), (23, 8, 897), (27, 4, 343), (8, 19, 616), (17, 20, 905), (19, 7, 344), (26, 
    1, 952), (16, 22, 601), (5, 20, 564), (0, 5, 323), (18, 6, 486), (11, 8, 948), (22, 3, 290), (23, 12, 857), (11, 26, 609), (1, 18, 802), (9, 18, 262), (3, 2, 396), (18, 17, 769), (13, 2, 728), (15, 24, 411), (14, 18, 747), (20, 3, 542), (1, 26, 302), (10, 24, 540), (7, 14, 799), (12, 11, 588)]
        maxIn = [904, 582, 56, 870, 454, 548, 700, 857, 165, 232, 174, 330, 305, 468, 508, 853, 783, 651, 721, 407, 709, 485, 419, 593, 904, 890, 280, 174]
        maxOut = [258, 157, 501, 144, 694, 746, 258, 50, 404, 820, 932, 160, 878, 323, 936, 84, 811, 599, 170, 696, 282, 412, 245, 774, 581, 827, 358, 481]
        origin = 14
        targets = [19, 5, 10]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 170)


    def test_612248(self):
        connections = [(6, 7, 369), (2, 8, 671), (3, 24, 913), (15, 18, 583), (10, 24, 353), (11, 23, 742), (21, 18, 474), (7, 13, 854), (18, 0, 867), (26, 0, 810), (22, 12, 565), (23, 1, 531), (25, 6, 633), (13, 26, 964), (19, 7, 911), (16, 4, 650), (20, 9, 556), (4, 17, 778), (9, 6, 764), (8, 5, 826), (14, 23, 615), (5, 20, 633), (12, 2, 372), (17, 27, 378), (24, 5, 566), (27, 1, 687), (1, 5, 822), (0, 1, 400)]
        maxIn = [472, 786, 876, 83, 208, 162, 535, 571, 169, 188, 936, 378, 493, 243, 12, 763, 148, 491, 118, 109, 847, 496, 491, 826, 31, 521, 301, 191]
        maxOut = [971, 465, 587, 318, 810, 778, 214, 189, 754, 89, 22, 795, 480, 41, 112, 176, 68, 163, 47, 186, 497, 581, 339, 697, 956, 756, 32, 154]
        origin = 4
        targets = [14, 0, 22]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 32)


    def test_731623(self):
        connections = [(15, 18, 559), (13, 8, 920), (19, 14, 341), (25, 5, 425), (10, 15, 348), (18, 17, 597), (21, 1, 562), (20, 14, 959), (5, 4, 740), (2, 7, 300), (7, 4, 617), (6, 7, 509), (24, 21, 415), (5, 12, 338), (15, 12, 890), (3, 8, 895), (16, 7, 357), (16, 13, 818), (16, 23, 478), (7, 5, 627), (17, 9, 740), (1, 18, 452), (22, 10, 967), (23, 8, 881), (17, 0, 301), (25, 12, 326), (3, 
    22, 262), (13, 7, 554), (8, 12, 472), (17, 15, 786), (13, 26, 576), (12, 6, 980), (7, 27, 736), (24, 1, 578), (22, 12, 677), (11, 13, 959), (24, 5, 585), (11, 10, 762), (15, 0, 786), (0, 19, 458), (9, 14, 347), (14, 6, 660), (25, 16, 530), (10, 23, 472), (12, 4, 607), (7, 6, 322), (4, 15, 371), (4, 24, 618), (14, 25, 807), (26, 19, 370), (16, 5, 797), (19, 10, 713), (27, 18, 578), (10, 4, 
    937), (0, 20, 828)]
        maxIn = [752, 988, 406, 975, 344, 109, 382, 156, 774, 511, 266, 961, 450, 929, 45, 646, 436, 742, 877, 870, 149, 751, 296, 647, 684, 779, 830, 174]
        maxOut = [29, 975, 742, 90, 476, 382, 156, 150, 907, 394, 143, 473, 552, 644, 423, 223, 881, 76, 267, 703, 592, 221, 758, 534, 450, 973, 868, 842]
        origin = 22
        targets = [16, 24, 4]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 389)


    def test_296271(self):
        connections = [(14, 10, 812), (25, 3, 483), (15, 0, 977), (17, 7, 692), (11, 13, 799), (26, 11, 951), (9, 27, 938), (12, 6, 957), (8, 1, 281), (21, 1, 397), (5, 21, 527), (2, 22, 419), (9, 24, 432), (6, 17, 842), (16, 25, 371), (23, 26, 933), (1, 4, 334), (2, 20, 635), (19, 2, 558), (3, 13, 332), (13, 25, 715), (16, 26, 348), (27, 3, 825), (7, 17, 524), (24, 17, 669), (22, 8, 881), (10, 25, 921), (13, 6, 536), (16, 22, 484), (3, 20, 407), (20, 7, 756), (1, 22, 338), (4, 24, 682), (6, 3, 329), (0, 7, 584), (9, 3, 877), (25, 12, 657), (18, 17, 515)]
        maxIn = [521, 982, 781, 951, 592, 981, 369, 506, 43, 175, 649, 791, 391, 522, 492, 890, 674, 291, 968, 906, 700, 93, 649, 180, 149, 547, 454, 677]
        maxOut = [98, 832, 380, 244, 410, 22, 727, 270, 364, 316, 400, 342, 26, 316, 755, 113, 461, 126, 584, 186, 597, 794, 404, 675, 464, 216, 685, 832]
        origin = 21
        targets = [3, 27, 23]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_765166(self):
        connections = [(10, 19, 428), (12, 21, 302), (27, 5, 342), (23, 26, 705), (5, 12, 982), (14, 9, 578), (4, 25, 829), (15, 21, 685), (13, 25, 972), (21, 0, 838), (20, 27, 980), (1, 21, 509), (15, 13, 815), (24, 25, 586), (14, 11, 320), (3, 15, 427), (8, 19, 942), (12, 4, 550), (25, 24, 904), (9, 3, 683), (17, 12, 891), (6, 27, 684), (2, 20, 976), (13, 27, 434), (24, 8, 654), (20, 14, 344), (18, 0, 625), (26, 0, 815), (11, 10, 597), (7, 15, 886), (12, 15, 848), (22, 19, 273), (16, 5, 553), (0, 11, 871), (10, 27, 353), (19, 3, 918)]
        maxIn = [220, 636, 551, 260, 208, 329, 937, 406, 264, 948, 724, 467, 70, 808, 774, 12, 263, 137, 650, 142, 193, 231, 390, 476, 709, 9, 930, 736]
        maxOut = [999, 25, 22, 91, 224, 91, 264, 917, 947, 317, 140, 249, 136, 925, 599, 256, 780, 475, 778, 713, 690, 325, 400, 994, 483, 330, 539, 559]
        origin = 26
        targets = [12, 18, 17]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 70)


    def test_899771(self):
        connections = [(18, 21, 546), (27, 13, 554), (9, 13, 530), (17, 18, 304), (5, 26, 270), (26, 15, 826), (16, 5, 363), (24, 21, 778), (15, 8, 560), (14, 26, 475), (3, 11, 647), (12, 9, 965), (4, 6, 733), (19, 10, 709), (16, 3, 799), (11, 26, 311), (12, 19, 283), (21, 5, 550), (22, 25, 773), (10, 5, 254), (1, 21, 460), (23, 27, 443), (0, 13, 336), (23, 9, 346), (25, 3, 393), (21, 18, 296), (11, 19, 972), (2, 19, 413), (7, 11, 999), (23, 15, 868), (8, 19, 810), (6, 1, 894), (15, 6, 311), (21, 8, 929), (16, 19, 714), (18, 7, 810), (13, 6, 545), (24, 5, 429), (11, 24, 928), (0, 7, 758), (20, 6, 791), (11, 17, 544), (23, 5, 600)]
        maxIn = [859, 664, 690, 508, 977, 151, 844, 688, 508, 294, 967, 901, 595, 64, 526, 799, 792, 482, 750, 450, 243, 131, 729, 235, 486, 731, 233, 653]
        maxOut = [84, 986, 964, 989, 315, 712, 295, 461, 568, 861, 923, 786, 928, 868, 802, 991, 257, 307, 828, 78, 784, 149, 899, 566, 888, 391, 761, 144]
        origin = 27
        targets = [26, 11, 23]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 64)


    def test_491432(self):
        connections = [(21, 9, 469), (23, 4, 461), (24, 19, 738), (0, 8, 634), (10, 16, 270), (0, 3, 479), (8, 24, 939), (18, 0, 773), (9, 26, 860), (6, 2, 351), (13, 14, 423), (11, 27, 846), (23, 14, 889), (14, 2, 365), (4, 26, 300), (10, 11, 942), (5, 14, 317), (11, 16, 523), (1, 19, 841), (27, 24, 992), (19, 8, 678), (13, 5, 621), (24, 12, 942), (3, 21, 486), (16, 6, 638), (17, 1, 305), (14, 5, 738), (3, 8, 885), (7, 26, 390), (20, 22, 306), (8, 6, 999), (26, 13, 736), (2, 7, 689), (4, 10, 583), (25, 2, 522), (17, 21, 985), (22, 14, 466), (18, 9, 899), (19, 18, 733), (26, 3, 560), (1, 24, 564), (25, 4, 299), (17, 22, 571), (11, 20, 860), (25, 1, 675), (12, 19, 339), (8, 26, 769), (13, 20, 989), (15, 3, 949), (20, 8, 559), (9, 6, 589)]
        maxIn = [670, 764, 504, 902, 994, 255, 725, 151, 385, 782, 144, 229, 675, 51, 79, 447, 552, 280, 968, 297, 200, 906, 917, 921, 387, 911, 782, 837]
        maxOut = [306, 46, 54, 237, 184, 617, 28, 253, 481, 160, 608, 836, 319, 174, 951, 120, 872, 190, 78, 9, 954, 637, 984, 323, 483, 247, 204, 388]
        origin = 17
        targets = [18, 16, 19]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 190)


    def test_151742(self):
        connections = [(6, 18, 909), (17, 25, 420), (15, 14, 906), (2, 22, 392), (10, 22, 997), (1, 3, 760), (19, 14, 774), (10, 6, 748), (5, 2, 898), (23, 0, 820), (23, 15, 385), (16, 5, 378), (9, 23, 641), (25, 24, 740), (14, 1, 549), (26, 20, 926), (25, 17, 551), (22, 6, 665), (4, 13, 458), (24, 0, 297), (14, 6, 649), (0, 6, 669), (3, 24, 369), (4, 15, 897), (23, 22, 926), (6, 19, 766), (23, 19, 735), (27, 2, 668), (25, 2, 434), (7, 6, 991), (17, 16, 739), (5, 22, 872), (5, 0, 460), (11, 13, 785), (13, 8, 622), (25, 10, 538), (18, 3, 480), (2, 0, 787), (8, 17, 562), (21, 18, 640), (9, 6, 733), (12, 3, 471), (25, 19, 333), (1, 4, 915), (20, 13, 525), (19, 1, 786), (15, 10, 338)]
        maxIn = [290, 37, 630, 282, 653, 551, 60, 315, 585, 545, 655, 820, 996, 655, 560, 160, 769, 871, 881, 605, 25, 425, 34, 545, 648, 482, 76, 822]
        maxOut = [43, 657, 142, 864, 158, 586, 917, 166, 830, 246, 599, 939, 290, 390, 583, 30, 134, 39, 741, 647, 323, 822, 231, 549, 989, 597, 25, 428]
        origin = 15
        targets = [27, 12, 24]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 30)


    def test_523088(self):
        connections = [(11, 2, 506), (24, 19, 286), (14, 18, 474), (27, 16, 735), (22, 27, 996), (25, 27, 470), (27, 12, 670), (20, 8, 640), (12, 13, 803), (27, 24, 281), (12, 11, 364), (7, 19, 781), 
    (4, 11, 643), (11, 16, 266), (26, 20, 782), (26, 1, 747), (10, 17, 438), (19, 3, 611), (2, 7, 497), (18, 14, 963), (21, 9, 498), (9, 1, 829), (3, 9, 963), (1, 7, 835), (5, 2, 878), (17, 1, 350), (23, 26, 474), (13, 7, 727), (6, 1, 317), (8, 4, 336), (25, 23, 840), (27, 19, 381), (0, 18, 453), (15, 14, 339), (16, 14, 379)]
        maxIn = [738, 748, 872, 94, 99, 22, 880, 419, 740, 812, 802, 304, 693, 995, 429, 325, 174, 282, 846, 437, 465, 161, 526, 515, 599, 404, 801, 213]
        maxOut = [333, 574, 553, 538, 901, 575, 207, 420, 270, 392, 676, 712, 539, 230, 911, 761, 527, 149, 270, 595, 545, 736, 565, 639, 666, 670, 351, 536]
        origin = 8
        targets = [22, 21, 27]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_108332(self):
        connections = [(0, 1, 769), (18, 11, 581), (6, 5, 713), (18, 10, 924), (27, 1, 430), (25, 14, 513), (14, 9, 453), (12, 14, 287), (1, 21, 616), (12, 26, 502), (25, 21, 808), (19, 0, 323), (11, 
    9, 847), (11, 25, 437), (20, 2, 673), (26, 13, 853), (18, 16, 790), (2, 17, 319), (7, 0, 954), (4, 8, 251), (17, 26, 634), (24, 3, 991), (18, 23, 466), (15, 21, 791), (9, 7, 763), (16, 22, 567), (21, 14, 906), (16, 8, 766), (21, 22, 559), (23, 15, 441), (25, 20, 842), (7, 15, 612), (5, 23, 361), (22, 1, 628), (13, 23, 931), (11, 1, 756), (11, 19, 685), (22, 20, 742), (27, 25, 355), (21, 26, 934), (24, 2, 503), (10, 23, 478), (3, 14, 635), (8, 5, 618), (19, 12, 387)]
        maxIn = [808, 450, 393, 247, 722, 928, 571, 861, 758, 772, 202, 556, 632, 111, 504, 471, 938, 271, 115, 577, 423, 351, 898, 797, 930, 158, 6, 798]
        maxOut = [348, 370, 321, 66, 817, 124, 597, 683, 81, 984, 796, 234, 640, 728, 163, 385, 274, 235, 780, 518, 137, 391, 627, 856, 927, 881, 19, 591]
        origin = 2
        targets = [19, 1, 8]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 6)


    def test_521379(self):
        connections = [(26, 1, 751), (17, 12, 346), (20, 17, 805), (27, 15, 922), (18, 12, 536), (19, 18, 658), (5, 25, 878), (14, 26, 560), (4, 6, 885), (24, 14, 994), (7, 15, 280), (25, 18, 561), (23, 18, 410), (21, 3, 918), (0, 20, 701), (6, 8, 460), (8, 27, 381), (2, 27, 484), (13, 2, 972), (1, 25, 255), (27, 18, 261), (2, 5, 670), (22, 6, 279), (12, 25, 916), (9, 24, 430), (7, 26, 578), (15, 4, 762), (11, 9, 906), (3, 24, 349), (16, 5, 272), (10, 13, 650)]
        maxIn = [97, 694, 193, 798, 582, 692, 519, 736, 422, 987, 269, 212, 364, 599, 491, 462, 678, 792, 205, 39, 428, 597, 941, 953, 999, 786, 13, 457]
        maxOut = [944, 207, 424, 265, 918, 554, 792, 523, 292, 435, 651, 298, 896, 575, 659, 234, 493, 891, 338, 355, 141, 154, 355, 694, 314, 532, 268, 981]
        origin = 25
        targets = [16, 20, 10]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_162511(self):
        connections = [(12, 13, 380), (13, 4, 340), (11, 6, 702), (1, 19, 689), (21, 22, 423), (24, 21, 409), (22, 15, 735), (15, 14, 579), (27, 18, 702), (5, 2, 736), (10, 9, 569), (23, 11, 820), (7, 23, 459), (17, 6, 405), (20, 26, 743), (0, 3, 383), (4, 24, 933), (14, 10, 438), (18, 25, 413), (19, 25, 580), (26, 4, 477), (6, 13, 517), (8, 2, 525), (2, 10, 562), (25, 5, 996), (16, 26, 838), 
    (9, 16, 728), (3, 15, 999)]
        maxIn = [602, 646, 407, 271, 147, 686, 615, 508, 217, 823, 112, 965, 323, 58, 926, 671, 826, 557, 859, 907, 47, 133, 70, 405, 719, 317, 977, 250]
        maxOut = [415, 481, 926, 498, 918, 718, 699, 699, 802, 524, 392, 262, 155, 374, 746, 764, 751, 617, 793, 410, 41, 840, 53, 24, 922, 613, 412, 96]
        origin = 19
        targets = [17, 26, 11]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 112)


    def test_282469(self):
        connections = [(18, 13, 383), (3, 17, 645), (10, 15, 909), (14, 5, 315), (17, 23, 526), (27, 2, 492), (8, 22, 752), (17, 0, 811), (19, 18, 463), (13, 11, 788), (9, 1, 479), (4, 17, 727), (16, 
    14, 594), (2, 13, 556), (26, 13, 410), (24, 20, 250), (5, 7, 774), (9, 21, 771), (1, 5, 701), (11, 2, 956), (7, 13, 920), (25, 8, 346), (21, 18, 860), (23, 15, 462), (0, 22, 338), (25, 18, 252), (6, 19, 899), (11, 7, 256), (12, 11, 875), (22, 9, 985), (20, 25, 490), (15, 19, 887)]
        maxIn = [351, 461, 688, 92, 763, 370, 377, 827, 546, 814, 188, 11, 648, 540, 997, 551, 65, 904, 489, 136, 211, 95, 113, 885, 449, 536, 123, 141]
        maxOut = [538, 316, 430, 469, 148, 625, 605, 88, 398, 143, 770, 657, 145, 974, 944, 157, 938, 504, 265, 96, 126, 892, 165, 111, 896, 401, 815, 55]
        origin = 6
        targets = [1, 2, 4]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 11)


    def test_478301(self):
        connections = [(20, 17, 281), (4, 27, 555), (24, 7, 465), (3, 27, 900), (25, 7, 694), (22, 6, 690), (16, 12, 460), (27, 25, 723), (23, 9, 411), (2, 18, 486), (5, 17, 987), (20, 14, 385), (9, 23, 778), (22, 7, 639), (7, 3, 486), (11, 12, 293), (18, 19, 360), (15, 0, 750), (26, 19, 786), (3, 19, 791), (17, 8, 619), (13, 15, 744), (8, 0, 263), (12, 2, 510), (21, 1, 362), (4, 8, 656), (6, 
    19, 707), (10, 9, 705), (7, 20, 690), (1, 19, 769), (5, 24, 548), (0, 23, 620), (19, 4, 459), (14, 0, 573), (4, 12, 830), (17, 9, 293), (8, 24, 549), (14, 23, 416), (18, 17, 524)]
        maxIn = [624, 885, 385, 306, 578, 62, 145, 823, 164, 148, 22, 153, 35, 749, 241, 564, 748, 821, 722, 837, 191, 807, 745, 505, 459, 258, 944, 239]
        maxOut = [953, 521, 141, 504, 210, 801, 166, 886, 430, 757, 110, 68, 889, 946, 418, 376, 776, 419, 850, 726, 305, 273, 130, 173, 810, 113, 945, 366]
        origin = 3
        targets = [14, 19, 20]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 504)


    def test_677241(self):
        connections = [(0, 22, 560), (15, 5, 833), (9, 7, 932), (6, 18, 323), (7, 0, 482), (12, 4, 972), (5, 3, 811), (23, 5, 450), (1, 20, 303), (26, 0, 386), (20, 21, 293), (2, 8, 542), (24, 27, 787), (21, 22, 465), (17, 26, 701), (14, 11, 477), (18, 2, 623), (11, 23, 387), (16, 25, 864), (8, 26, 504), (10, 6, 807), (27, 15, 472), (3, 14, 931), (13, 1, 884), (19, 8, 542), (22, 24, 696), (4, 
    8, 649), (25, 24, 695)]
        maxIn = [395, 172, 884, 92, 482, 924, 652, 932, 316, 20, 578, 419, 295, 94, 650, 833, 449, 788, 536, 425, 308, 300, 989, 957, 561, 371, 422, 273]
        maxOut = [446, 440, 155, 898, 882, 891, 901, 673, 743, 801, 921, 956, 238, 381, 215, 334, 362, 865, 572, 564, 375, 364, 939, 486, 567, 289, 399, 898]
        origin = 4
        targets = [5, 14, 13]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 273)


    def test_802465(self):
        connections = [(15, 3, 305), (18, 23, 641), (14, 6, 677), (3, 26, 904), (8, 20, 459), (20, 4, 329), (16, 10, 743), (10, 0, 380), (17, 6, 256), (16, 2, 809), (7, 3, 901), (25, 14, 738), (4, 27, 807), (1, 4, 834), (18, 6, 672), (9, 15, 819), (27, 8, 303), (2, 25, 426), (0, 17, 510), (12, 25, 456), (24, 8, 788), (13, 1, 427), (21, 14, 283), (20, 25, 451), (6, 24, 520), (11, 16, 622), (6, 
    5, 424), (23, 21, 438), (25, 16, 548), (22, 6, 953), (2, 17, 586), (26, 3, 874), (24, 25, 331), (19, 1, 716), (5, 21, 311)]
        maxIn = [960, 289, 379, 148, 535, 17, 317, 369, 747, 801, 880, 413, 539, 186, 106, 41, 819, 353, 248, 62, 698, 768, 164, 291, 15, 479, 813, 928]
        maxOut = [153, 902, 660, 754, 331, 151, 952, 743, 866, 848, 594, 881, 365, 264, 759, 524, 48, 656, 253, 386, 130, 50, 251, 955, 241, 443, 168, 854]
        origin = 6
        targets = [26, 20, 12]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 15)


    def test_307994(self):
        connections = [(4, 3, 732), (21, 17, 598), (16, 3, 836), (20, 8, 461), (17, 16, 402), (9, 24, 649), (14, 26, 283), (2, 17, 332), (6, 18, 396), (9, 20, 642), (12, 1, 329), (7, 9, 262), (14, 9, 
    761), (0, 4, 364), (6, 15, 735), (8, 10, 274), (5, 10, 743), (26, 13, 941), (13, 6, 784), (27, 11, 601), (10, 22, 953), (10, 2, 569), (19, 17, 448), (15, 9, 417), (21, 1, 820), (23, 24, 676), (22, 20, 529), (11, 26, 670), (9, 23, 640), (14, 15, 483), (24, 17, 596), (11, 24, 596), (14, 7, 933), (16, 8, 662), (27, 18, 533), (1, 4, 714), (0, 17, 540), (3, 19, 555), (13, 11, 279), (13, 7, 260), (7, 2, 285), (18, 23, 727), (25, 26, 436), (2, 27, 355), (25, 11, 414), (2, 1, 998)]
        maxIn = [543, 269, 407, 534, 831, 166, 935, 392, 40, 79, 534, 562, 499, 92, 137, 428, 368, 697, 847, 990, 858, 681, 866, 325, 794, 160, 796, 721]
        maxOut = [574, 92, 996, 826, 296, 310, 950, 511, 243, 403, 868, 823, 930, 891, 58, 953, 483, 647, 684, 340, 147, 833, 448, 940, 964, 367, 313, 886]
        origin = 4
        targets = [25, 3, 12]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 296)


    def test_714939(self):
        connections = [(1, 26, 878), (20, 22, 298), (24, 25, 385), (13, 14, 905), (7, 22, 619), (5, 18, 671), (16, 0, 378), (12, 6, 297), (23, 10, 924), (19, 2, 826), (0, 1, 624), (22, 4, 594), (22, 20, 343), (25, 20, 488), (3, 15, 524), (14, 16, 631), (4, 26, 546), (15, 19, 284), (10, 18, 326), (6, 11, 752), (2, 12, 453), (26, 5, 301), (15, 4, 506), (11, 16, 680), (13, 0, 929), (27, 25, 779), (15, 14, 995), (9, 3, 392), (17, 6, 535), (8, 4, 589), (21, 26, 586), (12, 15, 872), (18, 11, 508)]
        maxIn = [26, 769, 445, 729, 945, 400, 554, 840, 418, 495, 256, 591, 636, 135, 658, 361, 607, 389, 968, 95, 172, 851, 684, 843, 944, 553, 955, 253]
        maxOut = [887, 966, 760, 471, 592, 757, 180, 459, 60, 289, 610, 737, 522, 846, 896, 175, 739, 478, 491, 405, 631, 506, 958, 368, 33, 5, 422, 577]
        origin = 9
        targets = [8, 3, 1]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 289)


    def test_887694(self):
        connections = [(14, 3, 861), (0, 19, 997), (11, 0, 445), (2, 21, 409), (7, 21, 941), (16, 0, 562), (10, 6, 656), (17, 11, 872), (18, 22, 324), (6, 12, 440), (0, 4, 788), (10, 9, 462), (13, 16, 542), (9, 14, 998), (14, 7, 354), (20, 17, 649), (0, 13, 275), (8, 5, 961), (19, 5, 709), (2, 3, 399), (21, 23, 604), (24, 9, 690), (22, 5, 827), (1, 21, 853), (27, 14, 316), (5, 3, 401), (6, 8, 
    396), (7, 22, 987), (18, 27, 609), (26, 6, 462), (7, 9, 999), (14, 20, 634), (25, 12, 798), (22, 10, 673), (17, 22, 437), (0, 1, 611), (27, 7, 526), (12, 16, 932), (17, 9, 763), (4, 2, 752), (6, 0, 571), (9, 16, 484), (23, 14, 710), (17, 26, 678), (2, 1, 824), (15, 6, 649), (3, 14, 836)]
        maxIn = [758, 831, 535, 367, 310, 112, 184, 50, 67, 941, 279, 211, 313, 662, 318, 533, 901, 944, 221, 754, 438, 999, 614, 202, 939, 210, 946, 727]
        maxOut = [429, 103, 377, 999, 79, 156, 635, 148, 255, 742, 176, 787, 495, 789, 83, 929, 675, 193, 709, 156, 201, 216, 503, 459, 515, 867, 667, 582]
        origin = 16
        targets = [24, 13, 27]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 275)


    def test_953597(self):
        connections = [(1, 12, 406), (3, 23, 738), (5, 18, 843), (25, 1, 589), (18, 7, 931), (7, 14, 966), (17, 15, 894), (8, 18, 285), (15, 24, 852), (9, 10, 717), (21, 17, 512), (16, 11, 293), (15, 
    22, 985), (27, 11, 903), (13, 19, 577), (22, 10, 268), (27, 12, 996), (0, 1, 575), (11, 22, 483), (24, 6, 788), (10, 21, 478), (13, 7, 657), (21, 15, 727), (4, 13, 658), (12, 23, 456), (6, 1, 973), (20, 22, 879), (2, 18, 716), (23, 6, 776), (26, 11, 723), (4, 23, 744), (19, 23, 863), (14, 16, 395), (10, 2, 287)]
        maxIn = [43, 876, 22, 44, 625, 546, 347, 507, 923, 254, 286, 63, 223, 280, 994, 623, 932, 756, 677, 669, 72, 555, 970, 664, 358, 722, 424, 821]
        maxOut = [251, 573, 864, 349, 927, 258, 200, 269, 693, 543, 862, 481, 947, 12, 533, 443, 172, 514, 834, 765, 736, 45, 21, 723, 586, 46, 259, 706]
        origin = 8
        targets = [6, 25, 1]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 21)

    def test_737430(self):
        connections = [(33, 17, 876), (3, 8, 386), (14, 39, 744), (12, 0, 526), (2, 38, 495), (42, 12, 328), (37, 17, 756), (19, 39, 513), (21, 1, 766), (36, 39, 454), (15, 13, 321), (1, 12, 686), (1, 21, 814), (22, 39, 857), (24, 39, 273), (16, 8, 904), (26, 17, 884), (23, 22, 261), (9, 29, 324), (39, 16, 250), (40, 5, 863), (8, 9, 855), (25, 19, 856), (4, 23, 971), (6, 7, 874), (29, 30, 830), (7, 25, 690), (31, 18, 545), (27, 29, 490), (10, 11, 758), (35, 12, 546), (18, 24, 320), (13, 11, 722), (41, 7, 712), (17, 39, 380), (34, 1, 727), (30, 40, 606), (13, 5, 815), (11, 30, 670), (28, 29, 987), (32, 12, 856), (0, 43, 812), (20, 38, 655), (38, 40, 956), (43, 9, 611), (5, 27, 827)]
        maxIn = [3367, 8306, 3017, 4353, 7685, 6170, 5603, 4631, 3167, 9602, 5792, 7417, 571, 8724, 6469, 3866, 9084, 786, 3908, 3425, 8553, 9435, 7918, 5401, 5115, 442, 6173, 7972, 5124, 8444, 3342, 
    1126, 1847, 3845, 9147, 3724, 346, 3964, 1864, 6167, 6406, 4321, 4484, 397]
        maxOut = [9138, 6686, 5872, 1265, 9395, 6174, 6594, 3732, 3718, 2771, 8569, 8466, 9068, 6130, 6716, 2662, 7901, 1959, 2140, 8337, 184, 5876, 3997, 3881, 7824, 7927, 1039, 6437, 196, 9999, 9440, 1762, 4293, 6738, 5526, 4785, 9050, 3737, 3152, 8154, 4886, 9364, 5939, 1563]
        origin = 12
        targets = [43, 22, 38, 31]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 397)


    def test_999194(self):
        connections = [(26, 11, 579), (6, 29, 582), (38, 40, 803), (14, 10, 522), (8, 10, 461), (0, 25, 839), (16, 27, 537), (39, 32, 735), (29, 1, 392), (20, 39, 997), (22, 5, 947), (5, 6, 630), (23, 5, 627), (32, 38, 645), (34, 35, 380), (38, 10, 490), (23, 11, 631), (13, 27, 725), (37, 17, 466), (1, 12, 811), (17, 42, 518), (28, 22, 293), (34, 1, 774), (25, 2, 581), (23, 39, 802), (9, 41, 411), (13, 23, 578), (43, 16, 310), (7, 19, 836), (1, 5, 659), (15, 3, 377), (36, 1, 991), (37, 30, 518), (4, 2, 485), (18, 24, 403), (2, 9, 916), (36, 11, 294), (27, 34, 694), (3, 36, 999), (12, 35, 318), (21, 43, 881), (41, 2, 375), (41, 32, 928), (41, 12, 318), (19, 10, 342), (24, 16, 564), (40, 20, 353), (0, 14, 603), (5, 13, 543), (42, 10, 418), (31, 20, 502), (19, 25, 696), (33, 38, 482), (32, 25, 920), (36, 12, 572), (35, 25, 769), (11, 3, 414), (3, 15, 978), (10, 11, 870), (30, 5, 892), (24, 36, 834), (21, 28, 669), (30, 38, 788), (24, 21, 800), (27, 26, 472), (1, 39, 644), 
    (30, 35, 295)]
        maxIn = [6886, 9586, 3535, 1392, 7249, 3256, 2004, 846, 433, 540, 7603, 8599, 8060, 1512, 4463, 7890, 133, 8845, 9467, 353, 1731, 310, 3328, 3138, 1992, 3328, 2245, 6347, 2569, 9160, 7391, 6095, 9579, 9139, 3839, 1199, 4959, 4175, 4901, 7153, 4634, 3408, 742, 8544]
        maxOut = [8289, 6347, 78, 2991, 9478, 5583, 7444, 5512, 1583, 3228, 8844, 7854, 1566, 1435, 6157, 9351, 5159, 121, 4756, 1416, 4878, 3612, 5617, 1753, 8339, 6142, 2565, 3663, 7670, 9535, 2981, 6668, 9537, 2221, 6953, 3456, 3049, 7507, 6738, 9665, 8131, 2691, 6644, 6844]
        origin = 30
        targets = [15, 3, 13, 22]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 957)


    def test_418772(self):
        connections = [(14, 5, 919), (39, 14, 814), (14, 42, 629), (20, 41, 792), (15, 16, 380), (40, 32, 562), (31, 10, 402), (31, 9, 959), (11, 13, 885), (31, 42, 391), (8, 27, 977), (31, 4, 437), (39, 0, 949), (37, 1, 567), (5, 4, 376), (7, 5, 324), (21, 10, 609), (24, 39, 824), (7, 40, 574), (30, 34, 617), (17, 7, 351), (32, 29, 274), (40, 1, 403), (7, 26, 886), (30, 42, 328), (19, 22, 537), (0, 34, 662), (1, 24, 325), (4, 2, 605), (29, 2, 333), (38, 8, 334), (10, 29, 282), (25, 1, 915), (11, 15, 582), (38, 3, 530), (28, 40, 320), (27, 24, 891), (9, 5, 534), (6, 32, 696), (22, 40, 
    498), (35, 16, 852), (33, 37, 853), (28, 30, 357), (35, 18, 476), (19, 39, 377), (1, 43, 492), (3, 42, 767), (15, 10, 802), (8, 34, 382), (42, 16, 683), (23, 40, 765), (34, 17, 365), (16, 25, 472), (9, 42, 605), (41, 31, 951), (26, 35, 502), (22, 29, 285), (14, 26, 752), (41, 38, 883), (2, 39, 825), (29, 41, 552), (33, 40, 684), (20, 3, 738), (43, 18, 435), (36, 33, 714), (36, 5, 1000), (26, 2, 864), (12, 1, 889), (19, 42, 532), (8, 38, 283), (17, 30, 310), (39, 36, 422), (28, 29, 450), (18, 0, 960), (13, 17, 838), (2, 20, 850), (4, 24, 630), (33, 4, 803), (13, 27, 494)]
        maxIn = [5109, 1554, 6199, 4217, 6444, 7455, 7165, 3167, 3214, 9260, 9303, 4184, 6925, 175, 6936, 5642, 7985, 5352, 3809, 9712, 8444, 8895, 7562, 8700, 1979, 9413, 1861, 7638, 675, 2361, 6472, 5896, 5595, 597, 4572, 9884, 8319, 4708, 7698, 6742, 7475, 3805, 8928, 2199]
        maxOut = [8683, 7923, 2188, 2750, 6455, 3073, 535, 1064, 6568, 8331, 2294, 6564, 5146, 7195, 1228, 119, 5394, 847, 9670, 7729, 5076, 4752, 9181, 1028, 1548, 9436, 467, 1411, 1059, 1982, 3699, 
    2907, 3263, 7803, 9774, 2214, 1274, 1372, 3048, 238, 2690, 8857, 179, 7679]
        origin = 1
        targets = [40, 15, 21, 6]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 589)


    def test_456662(self):
        connections = [(24, 31, 288), (8, 40, 313), (16, 14, 787), (41, 15, 687), (9, 1, 757), (34, 11, 694), (40, 42, 672), (15, 29, 717), (25, 15, 966), (39, 23, 387), (29, 28, 693), (24, 27, 659), 
    (34, 14, 912), (27, 37, 611), (10, 0, 956), (4, 35, 680), (35, 36, 888), (21, 13, 553), (29, 38, 916), (27, 10, 480), (20, 38, 302), (13, 16, 596), (35, 16, 949), (28, 22, 615), (12, 37, 549), (0, 31, 990), (8, 25, 703), (31, 23, 875), (34, 0, 444), (15, 4, 301), (37, 32, 406), (30, 23, 946), (18, 37, 487), (14, 39, 466), (19, 11, 729), (38, 15, 971), (31, 6, 269), (0, 15, 486), (4, 28, 736), (37, 0, 657), (21, 2, 438), (0, 7, 619), (13, 11, 387), (7, 27, 547), (27, 14, 273), (19, 32, 848), (8, 14, 823), (35, 5, 635), (6, 22, 553), (1, 14, 441), (2, 27, 694), (4, 23, 463), (41, 26, 391), (33, 17, 720), (11, 19, 952), (43, 7, 564), (6, 41, 772), (24, 16, 424), (28, 4, 611), (21, 25, 378), (26, 3, 704), (42, 19, 607), (24, 18, 277), (39, 41, 318), (8, 32, 529), (15, 37, 280), (37, 14, 502), (33, 22, 549), (36, 34, 275), (42, 22, 345), (3, 27, 863), (40, 18, 992), (26, 23, 711), (23, 29, 828), (25, 7, 864), (32, 10, 918), (37, 21, 612), (16, 24, 585), (5, 37, 668), (18, 31, 457), (38, 25, 507), (15, 35, 835), (17, 40, 351), (14, 0, 747), (22, 24, 272), (20, 23, 926)]
        maxIn = [8625, 3761, 4408, 6478, 6928, 7221, 4311, 2685, 9395, 1436, 8196, 771, 3346, 2021, 234, 57, 1450, 1876, 1851, 4649, 9688, 1150, 994, 8638, 7089, 1373, 6562, 3779, 7925, 1502, 1750, 8818, 6841, 9342, 3992, 5972, 6864, 2494, 5188, 9116, 7740, 8256, 7495, 8008]
        maxOut = [8245, 9972, 3694, 1909, 2825, 5703, 5807, 6666, 4746, 1620, 5275, 2753, 1333, 3469, 2685, 3553, 2845, 8133, 4848, 3722, 2191, 3725, 217, 4234, 5011, 5986, 2954, 8099, 88, 3366, 8787, 3601, 5649, 9600, 7899, 534, 764, 2819, 6291, 5580, 3757, 7108, 4252, 900]
        origin = 26
        targets = [10, 19, 38, 37]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 1415)


    def test_554480(self):
        connections = [(19, 36, 451), (39, 34, 952), (20, 16, 261), (34, 30, 732), (35, 37, 678), (42, 1, 905), (43, 19, 896), (24, 9, 920), (17, 14, 255), (28, 26, 462), (37, 14, 959), (0, 11, 788), 
    (36, 41, 274), (19, 28, 840), (33, 39, 311), (23, 37, 290), (40, 21, 292), (30, 28, 542), (31, 39, 596), (1, 0, 901), (32, 10, 528), (23, 21, 522), (41, 33, 912), (32, 38, 675), (1, 28, 917), (3, 
    1, 392), (2, 5, 522), (6, 16, 404), (16, 31, 839), (11, 24, 667), (15, 37, 428), (37, 15, 587), (7, 1, 797), (3, 30, 370), (26, 17, 847), (4, 18, 653), (14, 7, 424), (21, 11, 602), (25, 21, 551), 
    (40, 15, 586), (8, 42, 931), (9, 27, 726), (15, 23, 294), (22, 24, 331), (12, 10, 282), (18, 1, 276), (2, 12, 673), (42, 23, 681), (39, 4, 543), (10, 31, 995), (18, 37, 595), (11, 40, 537), (38, 14, 483), (36, 14, 892), (19, 21, 515), (27, 14, 669), (28, 21, 461), (13, 35, 700), (29, 22, 687), (26, 27, 752), (40, 14, 672), (5, 12, 833), (26, 9, 289), (32, 29, 960), (4, 32, 472)]
        maxIn = [7243, 5634, 9382, 781, 7249, 3874, 306, 1473, 4664, 5813, 2465, 9524, 4826, 2130, 8830, 3748, 7438, 7780, 53, 5376, 4466, 6902, 2045, 5738, 2537, 9043, 6124, 1582, 1826, 3494, 1687, 5686, 3908, 3141, 4312, 3931, 995, 8790, 2517, 3246, 4736, 3187, 6997, 8671]
        maxOut = [9445, 3984, 8466, 1483, 3075, 662, 6856, 8712, 9367, 5447, 7802, 6920, 7797, 492, 4290, 4677, 3781, 3042, 7445, 5852, 4375, 4769, 2416, 5896, 4172, 5337, 1147, 3542, 2788, 6428, 246, 9624, 5817, 863, 975, 3077, 1295, 2784, 9569, 8659, 1388, 1546, 4196, 3917]
        origin = 22
        targets = [1, 7, 0, 35]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 331)


    def test_668756(self):
        connections = [(30, 31, 883), (21, 15, 726), (26, 30, 830), (8, 16, 438), (11, 34, 471), (4, 27, 445), (20, 41, 534), (28, 38, 821), (42, 32, 624), (33, 38, 813), (26, 25, 953), (14, 30, 674), (6, 31, 994), (7, 42, 741), (3, 4, 904), (4, 14, 655), (16, 31, 766), (3, 40, 332), (37, 30, 314), (17, 30, 339), (25, 36, 833), (39, 16, 894), (15, 0, 424), (0, 39, 694), (18, 8, 941), (41, 22, 
    954), (35, 11, 719), (38, 34, 874), (36, 34, 402), (32, 14, 696), (40, 7, 393), (11, 36, 848), (9, 3, 988), (10, 12, 622), (12, 28, 773), (22, 13, 731), (23, 20, 965), (27, 21, 306), (34, 35, 879), (29, 15, 383), (35, 13, 902), (11, 30, 826), (37, 35, 486), (21, 28, 508), (11, 37, 715), (3, 19, 409), (2, 17, 556), (35, 38, 516), (6, 23, 534), (35, 28, 496), (31, 30, 253), (20, 5, 451), (1, 34, 956), (24, 4, 577), (13, 2, 746), (24, 22, 594), (43, 19, 335), (19, 18, 571), (5, 10, 836), (15, 1, 973)]
        maxIn = [1341, 9282, 1525, 284, 4009, 5532, 8570, 8885, 7453, 2949, 784, 7089, 349, 6007, 9394, 5211, 5256, 6098, 9211, 6816, 3691, 5166, 4739, 4881, 6534, 1776, 3585, 6615, 4855, 564, 1494, 3749, 7651, 22, 3390, 1055, 606, 8446, 7781, 4669, 2127, 5876, 4895, 8831]
        maxOut = [5847, 6831, 1007, 8044, 4015, 1738, 8462, 4139, 8010, 6868, 2891, 8904, 3098, 8990, 4951, 4884, 8879, 5258, 5439, 3102, 9595, 7615, 6429, 6650, 4573, 5419, 9422, 4892, 359, 4778, 1329, 1742, 7193, 7055, 536, 7076, 8510, 9701, 7590, 2756, 8273, 7851, 7457, 6663]
        origin = 14
        targets = [29, 11, 39, 33]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_996306(self):
        connections = [(26, 40, 923), (25, 27, 919), (36, 1, 415), (1, 15, 447), (21, 19, 537), (39, 15, 929), (14, 22, 407), (11, 24, 954), (8, 38, 333), (19, 12, 706), (12, 43, 911), (19, 0, 960), (16, 10, 300), (28, 41, 974), (13, 15, 808), (25, 6, 364), (7, 10, 305), (24, 21, 975), (22, 32, 808), (24, 20, 329), (31, 22, 859), (13, 6, 789), (25, 17, 720), (30, 5, 419), (11, 10, 868), (28, 32, 436), (38, 16, 327), (41, 38, 921), (4, 24, 346), (20, 41, 632), (2, 41, 561), (17, 24, 619), (28, 42, 623), (9, 39, 304), (15, 12, 874), (40, 11, 738), (42, 40, 285), (17, 2, 526), (41, 33, 758), (33, 2, 507), (19, 16, 748), (15, 30, 378), (34, 18, 737), (16, 33, 630), (40, 26, 805), (11, 7, 274), (3, 32, 832), (37, 9, 280), (43, 41, 264), (39, 4, 493), (21, 13, 472), (14, 7, 556), (1, 11, 361), (37, 40, 980), (19, 13, 564), (40, 2, 779), (40, 30, 914), (2, 39, 352), (35, 38, 782), (15, 17, 302), (41, 9, 752), (6, 0, 346), (24, 31, 698), (33, 14, 735), (15, 24, 353), (17, 5, 305), (30, 19, 351), (27, 40, 300), (0, 40, 779), (16, 36, 345), (3, 23, 918), (14, 9, 871), (22, 29, 310), (4, 9, 507), (9, 4, 594), (33, 1, 611), (34, 33, 837), (8, 33, 401), (27, 31, 638), (19, 33, 665), (28, 31, 653), (42, 43, 358), (28, 38, 732), (26, 11, 755), (38, 26, 510), (22, 26, 896), (32, 17, 539), (17, 35, 661), (18, 42, 491), (8, 19, 368), (37, 18, 680), (19, 30, 622), (23, 17, 810), (4, 6, 869), (15, 31, 746), (5, 43, 403), (10, 4, 611), (29, 2, 956)]
        maxIn = [6407, 7486, 9951, 3673, 1740, 4677, 4490, 5834, 668, 8261, 7300, 3164, 788, 954, 4557, 469, 645, 8112, 9437, 8738, 8008, 7805, 8177, 6169, 7267, 1402, 105, 3236, 9591, 7698, 9547, 732, 1705, 8578, 1290, 7547, 9445, 7866, 2146, 1025, 9089, 5537, 5127, 8117]
        maxOut = [8779, 7108, 2341, 8475, 2911, 6557, 7148, 8068, 3463, 3063, 6708, 7048, 2412, 1390, 6916, 3156, 1884, 1844, 8442, 3472, 7555, 2858, 360, 9890, 6412, 5561, 974, 3075, 8847, 2858, 2831, 7349, 1284, 5851, 406, 6340, 1868, 7004, 5046, 4609, 5948, 2536, 9200, 9651]
        origin = 43
        targets = [12, 28, 39, 21]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 264)


    def test_165654(self):
        connections = [(42, 24, 748), (4, 15, 474), (19, 38, 411), (36, 4, 411), (12, 14, 354), (9, 38, 486), (29, 17, 757), (35, 13, 720), (20, 7, 303), (40, 17, 956), (9, 18, 757), (40, 9, 360), (42, 15, 915), (12, 0, 311), (9, 20, 793), (39, 22, 289), (43, 16, 992), (5, 37, 631), (23, 21, 624), (29, 13, 910), (18, 30, 464), (11, 17, 370), (38, 11, 258), (13, 36, 741), (37, 18, 325), (12, 35, 298), (23, 29, 566), (17, 22, 875), (2, 30, 668), (31, 41, 294), (39, 19, 725), (17, 29, 780), (8, 35, 304), (19, 26, 656), (3, 33, 662), (37, 35, 368), (9, 17, 954), (27, 14, 701), (15, 24, 946), (0, 22, 748), (28, 30, 657), (35, 37, 747), (28, 10, 654), (27, 32, 941), (39, 3, 484), (32, 6, 942), (21, 13, 907), (25, 43, 444), (40, 18, 808), (14, 13, 522), (26, 38, 817), (1, 5, 838), (10, 13, 553), (7, 21, 277), (17, 20, 754), (13, 32, 640), (17, 40, 311), (31, 37, 401), (34, 22, 938), (3, 43, 307), (3, 36, 475), (14, 23, 992), (13, 2, 754), (40, 36, 408), (12, 43, 887), (21, 27, 949), (41, 40, 813), (32, 43, 579), (39, 5, 853), (15, 18, 902), (38, 0, 304), (18, 2, 378), (30, 33, 634), (8, 42, 283), (32, 12, 401), (41, 22, 400), (21, 6, 787), (22, 34, 260), (20, 32, 449), (16, 27, 326), (19, 21, 718), (14, 1, 698), (22, 15, 722), (4, 10, 974), (10, 3, 436), (31, 30, 562), (2, 36, 954), (10, 24, 532), (24, 28, 889), (18, 14, 658), (30, 29, 933), (38, 16, 273), (17, 43, 576), (9, 15, 791), (6, 1, 497), (11, 12, 603), (13, 28, 646), (14, 22, 259), (22, 17, 999), (15, 23, 589), (38, 21, 982), (14, 39, 540), (33, 9, 491)]
        maxIn = [9176, 6089, 8001, 2681, 9788, 4380, 1715, 7056, 6545, 4817, 3324, 4603, 4255, 9999, 6328, 3300, 301, 7674, 3789, 5829, 6778, 6301, 7682, 2523, 4899, 7407, 9231, 2889, 6595, 8129, 6231, 468, 613, 1184, 9331, 2422, 6660, 5481, 6032, 5717, 8853, 3404, 2860, 78]
        maxOut = [4007, 4950, 821, 7917, 516, 7063, 7315, 9364, 8391, 5734, 3122, 5346, 3739, 2844, 7726, 9369, 4279, 7357, 4964, 3097, 193, 3658, 9525, 1749, 3676, 3439, 683, 3336, 3912, 2988, 6084, 
    7159, 2630, 5570, 887, 2962, 9224, 4879, 3480, 1023, 6368, 1186, 9709, 9815]
        origin = 21
        targets = [43, 19, 35, 42]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 1284)


    def test_175021(self):
        connections = [(21, 42, 826), (12, 1, 351), (31, 11, 742), (32, 16, 816), (29, 37, 626), (13, 8, 578), (34, 26, 493), (4, 38, 967), (38, 26, 892), (2, 19, 826), (42, 17, 452), (0, 2, 602), (27, 8, 493), (28, 39, 776), (33, 41, 845), (18, 33, 980), (35, 10, 821), (10, 42, 633), (22, 3, 321), (20, 40, 727), (23, 8, 701), (7, 12, 742), (37, 33, 251), (43, 35, 253), (16, 43, 294), (24, 42, 699), (11, 36, 250), (8, 37, 267), (15, 28, 403), (43, 17, 857), (19, 10, 485), (6, 21, 378), (1, 14, 652), (25, 27, 591), (26, 4, 776), (14, 41, 562), (17, 15, 581), (30, 23, 523), (39, 43, 519), (9, 5, 893), (40, 22, 783), (16, 5, 739), (3, 39, 899), (41, 31, 812), (22, 37, 840), (5, 33, 624), (3, 31, 654), (36, 32, 928)]
        maxIn = [161, 2417, 6004, 9302, 8039, 6944, 5974, 9116, 7718, 419, 5142, 2453, 8266, 6291, 3647, 9232, 8267, 6877, 8686, 5090, 7808, 8846, 2929, 8972, 3715, 8962, 3280, 2242, 8929, 8947, 342, 
    4637, 9740, 7957, 9715, 6773, 8785, 505, 1389, 2440, 8362, 8878, 1826, 9992]
        maxOut = [2557, 6453, 5110, 4554, 7104, 714, 6104, 8238, 4095, 3212, 4818, 3043, 540, 3163, 4834, 302, 383, 5999, 2156, 3681, 6594, 9526, 1158, 2959, 4248, 2331, 739, 841, 8421, 978, 485, 3992, 5385, 2813, 5628, 7728, 5862, 5846, 612, 6300, 1941, 7618, 8847, 67]
        origin = 33
        targets = [35, 16, 25, 23]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 250)


    def test_910955(self):
        connections = [(5, 4, 313), (9, 0, 594), (26, 27, 300), (43, 26, 715), (31, 27, 475), (35, 33, 375), (33, 20, 856), (39, 27, 635), (24, 6, 579), (29, 27, 713), (19, 23, 319), (37, 6, 780), (12, 18, 345), (40, 3, 930), (4, 1, 850), (11, 23, 992), (15, 38, 304), (28, 32, 529), (22, 41, 637), (20, 2, 706), (27, 22, 860), (30, 27, 295), (21, 17, 276), (10, 40, 620), (25, 23, 386), (36, 5, 
    457), (1, 30, 337), (6, 12, 732), (16, 34, 495), (41, 4, 719), (34, 0, 448), (3, 28, 805), (32, 6, 923), (18, 5, 630), (14, 8, 684), (17, 28, 792), (13, 3, 351), (24, 8, 269), (7, 10, 518), (21, 23, 609), (23, 1, 850), (29, 35, 581), (36, 14, 444), (8, 1, 422), (2, 7, 676), (42, 3, 936), (32, 2, 940), (38, 41, 600), (0, 35, 673)]
        maxIn = [1823, 5966, 7724, 2324, 1211, 2863, 6949, 1538, 690, 167, 4111, 8183, 1623, 3396, 3524, 4185, 7468, 2199, 9792, 7608, 6523, 2959, 1382, 11, 5726, 110, 4657, 4581, 9694, 5858, 4075, 2459, 3084, 5063, 6500, 5749, 7419, 9722, 2897, 757, 2324, 8231, 922, 6615]
        maxOut = [8253, 3884, 534, 4725, 22, 9363, 3481, 8893, 8638, 4185, 4398, 2275, 2323, 4242, 6268, 202, 7102, 8477, 4581, 8875, 6536, 8434, 5264, 7022, 8605, 916, 7288, 3543, 8590, 4876, 7602, 6569, 6268, 6288, 2763, 1731, 4520, 5660, 425, 2728, 8993, 3058, 5743, 3062]
        origin = 18
        targets = [28, 39, 22, 42]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 22)


    def test_720341(self):
        connections = [(39, 36, 339), (13, 27, 506), (14, 3, 864), (38, 11, 758), (10, 43, 791), (19, 38, 640), (40, 41, 536), (2, 1, 549), (20, 19, 470), (8, 9, 499), (2, 25, 754), (17, 19, 428), (41, 13, 574), (32, 11, 271), (26, 31, 276), (7, 1, 883), (26, 25, 904), (15, 20, 775), (38, 23, 936), (18, 1, 518), (7, 34, 416), (12, 26, 389), (42, 40, 451), (6, 42, 710), (11, 4, 326), (1, 5, 714), (5, 9, 287), (22, 27, 706), (20, 27, 818), (34, 2, 767), (29, 9, 893), (25, 7, 690), (41, 23, 883), (24, 19, 908), (16, 43, 813), (31, 33, 869), (11, 36, 531), (3, 6, 516), (31, 2, 515), (38, 33, 378), (17, 28, 674), (36, 21, 362), (30, 26, 382), (22, 6, 649), (43, 31, 719), (11, 34, 973), (4, 24, 445), (35, 10, 506), (16, 26, 656), (19, 37, 921), (27, 6, 882), (23, 36, 363), (21, 30, 859), (40, 8, 397), (34, 26, 528), (38, 4, 863), (1, 17, 275), (33, 43, 368), (8, 27, 368), (9, 29, 673), (10, 32, 597), (0, 34, 327), (3, 17, 664), (33, 17, 547), (37, 17, 943), (27, 9, 752), (28, 40, 962), (39, 16, 651), (20, 28, 995), (16, 37, 340)]
        maxIn = [5148, 5155, 6809, 2072, 3592, 3087, 5012, 3311, 6234, 3922, 2825, 7320, 6234, 1182, 407, 5049, 2841, 6057, 8279, 7955, 2452, 2923, 5495, 6793, 1011, 7016, 1215, 7425, 3297, 1911, 2304, 8329, 6414, 3701, 956, 1285, 2591, 3079, 3621, 72, 4461, 8150, 2281, 340]
        maxOut = [1148, 2439, 3550, 1436, 677, 6188, 4535, 5983, 9810, 2371, 1048, 8723, 9860, 3980, 4282, 2079, 6665, 709, 5349, 5473, 782, 8827, 1695, 1431, 2428, 6683, 3316, 1568, 1795, 7408, 4879, 3721, 3983, 1899, 5790, 9881, 4513, 8068, 4890, 1178, 9346, 3178, 9000, 5300]
        origin = 1
        targets = [10, 24, 16, 30]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 275)


    def test_845369(self):
        connections = [(14, 28, 427), (22, 4, 321), (28, 1, 576), (32, 19, 269), (43, 4, 425), (33, 12, 492), (11, 14, 398), (16, 37, 736), (10, 11, 573), (6, 24, 424), (34, 0, 913), (15, 14, 894), (7, 37, 296), (27, 36, 295), (31, 37, 391), (33, 10, 586), (39, 37, 365), (1, 14, 961), (17, 32, 342), (39, 16, 549), (13, 39, 598), (10, 25, 629), (9, 26, 789), (29, 6, 946), (18, 19, 987), (34, 1, 313), (14, 11, 532), (21, 27, 473), (36, 10, 301), (5, 37, 702), (17, 9, 712), (41, 9, 633), (12, 17, 623), (7, 38, 486), (3, 38, 810), (16, 20, 737), (43, 41, 976), (30, 42, 991), (25, 33, 876), (23, 26, 511), (42, 36, 321), (13, 22, 761), (0, 4, 851), (19, 24, 554), (8, 26, 495), (2, 5, 642), (22, 8, 591), (28, 13, 454), (4, 36, 385), (19, 3, 644), (38, 32, 470), (19, 29, 461), (15, 13, 835), (4, 25, 818), (16, 9, 441), (24, 33, 680), (26, 13, 647), (32, 20, 958), (35, 14, 692), (40, 34, 870), (1, 10, 910), (10, 43, 694), (38, 10, 369), (42, 28, 926), (43, 1, 662), (24, 36, 773), (17, 2, 373), (37, 32, 757), (3, 10, 985), (39, 31, 581), (20, 41, 800), (1, 40, 828)]
        maxIn = [7357, 201, 7670, 8011, 9118, 8656, 4563, 5580, 7867, 7082, 8635, 9300, 7605, 3941, 3703, 9583, 4367, 9544, 3289, 2616, 4498, 6450, 8426, 2254, 567, 3525, 2570, 8751, 4778, 3992, 7426, 6730, 8992, 1294, 6515, 4818, 8066, 9681, 6561, 9528, 2053, 6891, 4061, 9992]
        maxOut = [49, 2013, 4283, 5400, 8793, 4686, 4212, 7649, 5231, 2831, 3782, 72, 6068, 5221, 6855, 419, 6289, 803, 5522, 5463, 2374, 1269, 417, 232, 4371, 2317, 1716, 9603, 2388, 2306, 3251, 4164, 7840, 847, 6998, 5805, 8605, 5830, 6436, 2312, 2251, 9238, 9952, 5963]
        origin = 11
        targets = [29, 16, 8, 26]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 72)


    def test_643379(self):
        connections = [(18, 6, 341), (31, 39, 304), (17, 31, 869), (41, 2, 266), (1, 39, 866), (34, 3, 592), (8, 41, 915), (0, 21, 393), (7, 14, 447), (41, 38, 990), (8, 6, 548), (38, 7, 741), (32, 11, 621), (43, 29, 316), (11, 40, 315), (42, 0, 542), (23, 4, 871), (3, 2, 908), (27, 10, 345), (14, 38, 865), (9, 17, 351), (39, 6, 896), (13, 10, 996), (43, 4, 666), (26, 13, 957), (15, 32, 655), 
    (7, 37, 937), (33, 19, 784), (30, 16, 589), (14, 24, 776), (22, 3, 452), (5, 11, 470), (3, 34, 590), (3, 33, 271), (21, 34, 280), (11, 38, 934), (40, 12, 401), (36, 43, 859), (38, 0, 945), (40, 23, 813), (4, 37, 643), (31, 11, 871), (40, 8, 360), (39, 7, 984), (24, 6, 937), (37, 36, 462), (16, 7, 349), (36, 14, 700), (25, 30, 494), (20, 6, 641), (12, 41, 695), (28, 31, 754), (41, 5, 661), 
    (12, 37, 432), (5, 23, 350), (29, 24, 390), (0, 22, 672), (42, 28, 534), (19, 21, 986), (7, 2, 933), (43, 38, 270), (20, 29, 458), (35, 24, 737), (23, 8, 838), (34, 0, 427), (24, 40, 454), (2, 23, 618), (31, 2, 310), (25, 5, 414), (7, 25, 784), (35, 30, 524), (39, 21, 662), (30, 35, 286), (13, 22, 391), (2, 34, 809), (42, 3, 603), (36, 39, 378), (30, 39, 560), (25, 3, 940), (18, 41, 929), 
    (11, 41, 790), (10, 13, 353), (7, 30, 574), (43, 23, 523), (9, 14, 534), (34, 36, 829), (26, 25, 537), (6, 11, 719), (33, 17, 310), (1, 14, 954), (37, 16, 451), (16, 10, 806), (24, 14, 862), (43, 
    35, 252), (5, 22, 490), (6, 15, 337), (11, 13, 696), (6, 36, 860), (21, 14, 920), (25, 16, 624), (39, 3, 455)]
        maxIn = [2595, 321, 3340, 2921, 3330, 2908, 4784, 3471, 5943, 7307, 3842, 27, 1055, 9136, 5817, 5380, 3395, 557, 5719, 4428, 4134, 3573, 8726, 6912, 2629, 2709, 8588, 1656, 7741, 8832, 1121, 5866, 4810, 9617, 9622, 7867, 6148, 111, 789, 3872, 3693, 2953, 11, 9953]
        maxOut = [6953, 440, 768, 4628, 109, 9193, 9647, 7249, 452, 2622, 6191, 3821, 128, 8606, 5034, 8544, 3703, 7653, 8557, 5783, 4038, 7047, 130, 3448, 6645, 3711, 7107, 1431, 8784, 451, 20, 2647, 4943, 9083, 1611, 6341, 8627, 4896, 3029, 3893, 2889, 1492, 1822, 6869]
        origin = 17
        targets = [38, 42, 2, 33]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 641)


    def test_398097(self):
        connections = [(13, 4, 328), (32, 13, 845), (31, 2, 629), (26, 31, 502), (33, 36, 782), (6, 25, 429), (25, 13, 392), (31, 26, 971), (5, 29, 360), (40, 33, 550), (16, 26, 605), (33, 18, 377), (16, 25, 819), (4, 13, 671), (25, 21, 322), (6, 40, 770), (23, 19, 652), (36, 13, 626), (22, 41, 923), (20, 26, 294), (38, 37, 512), (10, 20, 817), (0, 35, 713), (22, 25, 570), (17, 34, 627), (31, 
    1, 457), (21, 9, 539), (38, 41, 331), (32, 29, 651), (31, 9, 506), (29, 24, 457), (30, 11, 748), (28, 17, 916), (38, 28, 443), (0, 19, 803), (39, 35, 662), (12, 38, 493), (10, 16, 323), (3, 8, 811), (7, 18, 519), (31, 35, 636), (2, 32, 983), (26, 25, 609), (11, 33, 375), (34, 4, 893), (16, 9, 428), (20, 10, 714), (26, 32, 833), (38, 29, 921), (8, 28, 710), (5, 18, 274), (26, 27, 814), (7, 
    39, 820), (41, 12, 989), (8, 30, 453), (13, 17, 747), (25, 15, 345), (21, 34, 682), (15, 30, 256), (34, 38, 996), (33, 41, 953), (1, 11, 475), (24, 31, 682), (4, 40, 574), (37, 34, 309), (36, 23, 
    608), (21, 2, 622), (14, 31, 575), (19, 8, 730), (16, 33, 830), (9, 21, 363), (38, 3, 719), (8, 1, 927), (1, 43, 359), (40, 7, 390), (24, 40, 369), (18, 6, 437), (32, 17, 850), (18, 26, 275), (27, 33, 811), (35, 1, 909), (9, 37, 446), (14, 41, 992), (10, 12, 679), (42, 7, 379), (43, 0, 370), (37, 43, 919)]
        maxIn = [622, 4908, 7549, 1714, 7291, 3296, 1597, 1353, 2035, 2503, 7786, 4613, 6115, 8410, 4766, 9508, 2287, 5421, 7366, 8218, 6629, 5568, 2455, 6925, 7510, 2022, 2266, 308, 7725, 4306, 2142, 6408, 5905, 7799, 1909, 5228, 75, 5833, 9405, 1164, 6246, 5671, 5129, 8763]
        maxOut = [3366, 9299, 1358, 2859, 9551, 913, 5804, 7342, 9311, 3519, 2387, 6099, 9636, 8427, 3565, 4173, 5204, 3453, 6621, 2239, 5302, 4481, 7588, 1678, 7614, 5467, 7866, 7177, 8128, 9157, 8526, 43, 5245, 8637, 9605, 3241, 4330, 3713, 9415, 4558, 8616, 5856, 2255, 5687]
        origin = 15
        targets = [24, 32, 0, 43]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 256)
    def test_607940(self):
        connections = [(7, 11, 528), (5, 20, 803), (1, 5, 428), (1, 16, 800), (2, 9, 569), (0, 7, 571), (20, 0, 841), (16, 0, 464), (15, 6, 361), (8, 6, 615), (7, 19, 842), (0, 18, 869), (4, 15, 848), (17, 6, 353), (19, 6, 900), (18, 14, 725), (12, 14, 710), (17, 19, 503), (15, 10, 800), (11, 12, 982), (3, 1, 446), (5, 7, 685), (14, 11, 760), (8, 7, 311), (12, 16, 688), (9, 3, 984), (20, 13, 617), (10, 13, 278), (13, 2, 712), (18, 8, 686), (6, 9, 662)]
        maxIn = [3934, 7527, 5927, 7170, 2108, 4181, 6802, 9607, 6160, 1325, 894, 7600, 5914, 995, 1928, 8414, 1104, 3546, 626, 7360, 9782]
        maxOut = [9563, 3864, 376, 5676, 4082, 8339, 8761, 9277, 6693, 777, 1960, 437, 9721, 7591, 4975, 2483, 2517, 6946, 5666, 667, 5936]
        origin = 12
        targets = [10, 16]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 688)


    def test_970489(self):
        connections = [(17, 0, 876), (12, 8, 393), (19, 7, 427), (9, 15, 378), (4, 16, 415), (3, 14, 796), (8, 3, 306), (2, 10, 985), (6, 19, 669), (5, 19, 380), (0, 8, 545), (15, 13, 736), (8, 9, 892), (9, 2, 542), (10, 11, 902), (6, 17, 912), (20, 14, 302), (16, 5, 417), (17, 19, 903), (3, 8, 992), (13, 3, 590), (4, 20, 835), (9, 16, 476), (11, 19, 841), (15, 6, 940), (7, 4, 411), (15, 8, 766), (15, 5, 974), (1, 15, 439), (12, 15, 787), (14, 0, 619), (5, 13, 759), (18, 20, 517), (10, 17, 794), (7, 15, 843), (19, 6, 728), (12, 19, 360)]
        maxIn = [5432, 7321, 2265, 7708, 9746, 8107, 1328, 8366, 2288, 8908, 9495, 4875, 3568, 5567, 717, 8372, 1699, 4879, 6359, 1411, 4920]
        maxOut = [8245, 1078, 1816, 1604, 2942, 7231, 4849, 6119, 6637, 9579, 6351, 3291, 8492, 6587, 2163, 8012, 3147, 7016, 982, 5913, 5109]
        origin = 4
        targets = [20, 3]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 1250)


    def test_285446(self):
        connections = [(8, 2, 506), (16, 14, 723), (20, 8, 781), (7, 4, 766), (7, 11, 341), (6, 17, 909), (18, 15, 501), (2, 17, 371), (13, 1, 492), (12, 14, 936), (14, 7, 674), (0, 3, 917), (4, 3, 706), (9, 10, 585), (20, 4, 444), (3, 13, 942), (11, 7, 281), (5, 0, 881), (10, 11, 358), (19, 3, 565), (14, 9, 494), (1, 11, 979), (8, 6, 794), (18, 19, 385), (16, 4, 332), (15, 9, 346), (5, 17, 927), (17, 4, 395), (13, 12, 271)]
        maxIn = [3001, 7921, 4976, 6969, 9061, 8849, 6629, 7701, 1835, 2529, 1820, 4508, 6323, 9154, 237, 3673, 3877, 1288, 3674, 6628, 1388]
        maxOut = [6563, 8401, 1938, 6979, 9016, 7471, 9594, 5825, 8228, 137, 5964, 4919, 9148, 4572, 9350, 549, 9896, 7227, 1945, 714, 2060]
        origin = 19
        targets = [6, 1]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 492)


    def test_736531(self):
        connections = [(19, 2, 614), (4, 16, 293), (11, 15, 555), (9, 1, 989), (20, 16, 575), (6, 12, 834), (3, 2, 312), (18, 12, 469), (17, 15, 683), (10, 5, 553), (15, 19, 480), (0, 15, 394), (12, 9, 357), (8, 13, 797), (9, 11, 714), (20, 3, 579), (5, 2, 460), (2, 18, 820), (1, 0, 457), (16, 0, 752), (4, 0, 633), (14, 9, 823), (7, 3, 463), (13, 7, 574)]
        maxIn = [7926, 3931, 6799, 1009, 9903, 5402, 9916, 2947, 1431, 9719, 3491, 4215, 9165, 9541, 3474, 994, 8226, 7525, 5941, 1455, 9184]
        maxOut = [3344, 1515, 9356, 8755, 4921, 168, 5692, 1893, 8397, 381, 8342, 4004, 8294, 8572, 1883, 6992, 493, 6402, 9104, 1397, 2082]
        origin = 20
        targets = [7, 17]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_591999(self):
        connections = [(1, 14, 797), (5, 2, 883), (2, 20, 337), (5, 3, 320), (3, 18, 815), (7, 4, 263), (10, 17, 418), (15, 6, 984), (1, 0, 273), (11, 14, 810), (11, 12, 733), (16, 3, 509), (4, 3, 957), (12, 7, 342), (12, 4, 358), (8, 13, 425), (2, 12, 533), (19, 9, 496), (20, 5, 766), (7, 19, 735), (6, 14, 675), (9, 1, 521), (0, 15, 540), (11, 3, 622), (20, 18, 665), (4, 17, 793), (6, 5, 943), (6, 8, 966), (11, 13, 791), (17, 12, 500), (10, 0, 940), (13, 1, 341), (14, 3, 843), (0, 20, 947), (13, 5, 973), (18, 13, 859)]
        maxIn = [4424, 9010, 1691, 6957, 7470, 6045, 529, 6153, 7944, 5059, 191, 5051, 2376, 4228, 5130, 9171, 6157, 7991, 2806, 2968, 9280]
        maxOut = [475, 6492, 1963, 9705, 9806, 2393, 9120, 437, 250, 685, 3153, 7400, 6360, 1363, 6968, 2554, 19, 7024, 6044, 3971, 6680]
        origin = 5
        targets = [7, 16]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 342)


    def test_416228(self):
        connections = [(11, 15, 387), (8, 0, 679), (16, 15, 889), (15, 12, 588), (12, 8, 969), (20, 2, 417), (10, 5, 651), (3, 2, 434), (12, 16, 421), (17, 6, 848), (8, 3, 989), (17, 14, 663), (4, 2, 
    650), (16, 8, 312), (14, 6, 487), (6, 10, 781), (15, 13, 680), (13, 18, 572), (0, 17, 916), (7, 1, 613), (19, 0, 825), (5, 0, 771), (2, 8, 257), (18, 12, 446), (1, 8, 583), (9, 20, 469)]
        maxIn = [4568, 9198, 7364, 3074, 2221, 7093, 4458, 242, 1108, 8317, 8957, 8075, 4605, 8824, 8787, 9726, 5225, 7209, 4180, 6997, 4488]
        maxOut = [3389, 2535, 2600, 7200, 9446, 7570, 2512, 3107, 5436, 8930, 7699, 6748, 5479, 7783, 9519, 4683, 8762, 578, 9264, 5034, 3842]
        origin = 7
        targets = [9, 14]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 578)


    def test_493312(self):
        connections = [(9, 19, 922), (19, 17, 257), (9, 16, 895), (11, 0, 887), (10, 18, 557), (17, 10, 861), (3, 16, 698), (8, 17, 951), (15, 2, 986), (12, 13, 477), (5, 8, 761), (4, 8, 413), (14, 13, 465), (20, 15, 914), (13, 17, 748), (7, 2, 271), (1, 18, 253), (6, 18, 611), (2, 18, 399), (0, 1, 306), (18, 5, 630), (16, 13, 374)]
        maxIn = [9690, 9568, 3726, 9988, 6115, 6310, 5021, 2375, 5468, 4767, 1668, 5959, 4997, 6535, 3218, 8837, 6022, 2426, 9080, 4458, 9130]
        maxOut = [7718, 7520, 4463, 6395, 2000, 2206, 373, 1583, 934, 3037, 286, 4773, 7602, 9289, 2656, 9808, 1179, 3408, 2349, 6932, 5919]
        origin = 18
        targets = [0, 20]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)
    
    def test_846165(self):
        connections = [(14, 20, 416), (19, 0, 250), (5, 14, 363), (6, 11, 775), (15, 16, 665), (16, 6, 593), (1, 15, 279), (3, 0, 833), (10, 1, 937), (17, 15, 500), (0, 9, 864), (9, 14, 510), (1, 2, 663), (20, 3, 735), (2, 14, 533), (8, 10, 783), (4, 14, 956), (0, 18, 283), (7, 19, 280), (3, 12, 693), (12, 8, 275), (6, 19, 762), (9, 10, 920), (13, 12, 354), (19, 12, 903), (16, 8, 384), (18, 8, 320), (11, 2, 833)]
        maxIn = [4969, 5376, 8540, 1137, 8956, 4584, 5181, 3571, 2195, 1379, 9133, 7445, 1525, 6006, 9918, 6419, 5170, 8803, 9023, 6513, 1819]
        maxOut = [534, 3068, 937, 129, 5035, 4908, 900, 5528, 3563, 7884, 9052, 7040, 9171, 4937, 5409, 7537, 3656, 451, 7610, 7839, 5667]
        origin = 2
        targets = [7, 1]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 129)


    def test_994286(self):
        connections = [(12, 13, 459), (5, 14, 848), (17, 5, 264), (5, 11, 562), (3, 11, 949), (19, 8, 306), (2, 11, 898), (3, 19, 346), (8, 0, 297), (15, 3, 902), (3, 18, 561), (5, 2, 882), (16, 5, 475), (18, 15, 684), (0, 16, 857), (11, 14, 815), (14, 6, 682), (20, 10, 658), (4, 11, 658), (11, 5, 995), (12, 7, 253), (9, 18, 421), (1, 3, 667), (17, 11, 447), (6, 14, 702), (18, 10, 483), (13, 4, 393), (9, 15, 843), (7, 16, 595), (4, 20, 358), (10, 19, 465), (19, 5, 909), (1, 11, 899)]
        maxIn = [5934, 5010, 3919, 3272, 5869, 678, 2006, 9861, 1539, 4341, 5579, 302, 7522, 6396, 8531, 2987, 918, 7246, 4447, 6969, 2394]
        maxOut = [7763, 3422, 839, 7321, 1752, 1686, 9357, 702, 3152, 3453, 4821, 6327, 8880, 2237, 6436, 8422, 8406, 9268, 6278, 481, 7542]
        origin = 13
        targets = [6, 0]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 393)


    def test_419773(self):
        connections = [(0, 3, 772), (10, 19, 495), (15, 5, 680), (19, 2, 385), (8, 10, 546), (12, 1, 768), (13, 8, 620), (20, 15, 560), (12, 20, 934), (1, 15, 303), (10, 15, 356), (5, 14, 942), (4, 7, 530), (10, 8, 942), (11, 3, 891), (2, 8, 267), (19, 15, 988), (2, 11, 806), (18, 10, 694), (17, 4, 753), (6, 3, 263), (9, 20, 354), (17, 10, 808), (13, 9, 944), (12, 7, 759), (18, 6, 824), (3, 11, 621), (5, 8, 964), (11, 7, 851), (19, 10, 814), (14, 12, 907), (9, 19, 361), (0, 19, 854), (7, 6, 520), (16, 15, 612), (12, 2, 707)]
        maxIn = [6857, 4728, 4936, 192, 6717, 3093, 773, 9851, 9440, 1168, 2782, 2800, 4040, 1930, 5943, 5733, 2679, 1502, 5441, 2298, 7333]
        maxOut = [5382, 430, 830, 6780, 3089, 4998, 6425, 8814, 6193, 8246, 7513, 5882, 5827, 4144, 2529, 6968, 9989, 9187, 1433, 7948, 5698]
        origin = 18
        targets = [4, 12]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 680)


    def test_808898(self):
        connections = [(11, 2, 424), (15, 5, 665), (13, 17, 767), (18, 6, 493), (4, 1, 884), (6, 11, 845), (10, 7, 734), (0, 16, 531), (13, 11, 769), (18, 7, 290), (7, 10, 297), (5, 9, 272), (14, 18, 
    657), (10, 4, 280), (9, 7, 437), (15, 7, 317), (13, 19, 791), (14, 9, 428), (10, 8, 524), (8, 17, 554), (16, 0, 372), (4, 17, 635), (9, 0, 736), (2, 11, 989), (20, 19, 859), (19, 10, 671), (0, 13, 735), (3, 10, 583), (17, 7, 809), (7, 1, 503), (12, 10, 852), (6, 15, 874), (1, 16, 874), (1, 10, 925), (6, 1, 466)]
        maxIn = [3617, 1523, 8171, 2055, 7842, 4345, 7326, 4865, 8065, 2075, 1334, 8314, 34, 653, 9982, 1352, 7534, 793, 7018, 1601, 6399]
        maxOut = [7505, 8737, 7534, 2505, 6655, 9064, 6181, 8909, 7413, 8425, 2059, 8340, 4109, 9356, 662, 5694, 8669, 1464, 7097, 9553, 2759]
        origin = 11
        targets = [9, 17]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_153409(self):
        connections = [(2, 14, 330), (19, 15, 379), (18, 17, 792), (20, 4, 317), (12, 18, 461), (13, 16, 582), (16, 10, 313), (13, 10, 901), (14, 13, 288), (5, 8, 291), (7, 20, 563), (1, 6, 310), (17, 0, 295), (13, 12, 770), (16, 7, 872), (10, 12, 442), (9, 1, 875), (3, 13, 402), (11, 2, 834), (13, 9, 428), (6, 7, 330), (12, 5, 282), (2, 17, 818), (8, 9, 759), (11, 6, 843), (5, 12, 351), (0, 8, 680), (4, 5, 336), (15, 0, 370)]
        maxIn = [4337, 878, 5802, 6311, 6389, 7878, 755, 7672, 2978, 38, 3553, 9815, 3167, 7709, 1431, 613, 9182, 7764, 3355, 3526, 4046]
        maxOut = [8173, 3827, 2799, 249, 7852, 6664, 4951, 7924, 6164, 6243, 4859, 2744, 2007, 3216, 4975, 7976, 2575, 9962, 7140, 7429, 7505]
        origin = 15
        targets = [6, 4]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 38)


    def test_594963(self):
        connections = [(9, 8, 769), (9, 5, 624), (20, 0, 878), (12, 17, 347), (13, 12, 585), (16, 5, 299), (9, 11, 896), (1, 19, 463), (7, 14, 362), (10, 11, 747), (17, 11, 726), (10, 2, 927), (6, 4, 
    653), (0, 11, 565), (0, 2, 831), (16, 18, 329), (18, 15, 858), (16, 19, 697), (0, 1, 954), (18, 20, 555), (5, 16, 338), (18, 1, 975), (6, 5, 358), (3, 20, 725), (8, 18, 870), (8, 3, 546), (4, 14, 
    468), (3, 15, 872), (11, 13, 593), (12, 19, 343), (19, 6, 985), (17, 6, 624), (20, 17, 346), (15, 0, 270), (19, 2, 264), (14, 6, 840), (13, 6, 981), (13, 17, 353), (2, 16, 749), (1, 0, 780), (1, 5, 889)]
        maxIn = [2179, 9143, 5109, 4966, 1196, 7040, 5360, 2468, 5721, 4218, 467, 9775, 4240, 7730, 6101, 4126, 9105, 1464, 7934, 5634, 7599]
        maxOut = [3681, 800, 6623, 7594, 4876, 9250, 2853, 4440, 2088, 2732, 166, 6345, 5209, 1102, 7407, 6296, 6491, 2276, 567, 7119, 5149]
        origin = 18
        targets = [8, 1]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 567)


    def test_754056(self):
        connections = [(18, 7, 907), (18, 3, 949), (4, 0, 837), (11, 8, 690), (2, 7, 471), (2, 8, 256), (12, 20, 941), (20, 7, 459), (7, 16, 365), (19, 8, 303), (12, 5, 830), (5, 7, 726), (1, 3, 442), (2, 1, 707), (15, 10, 605), (0, 3, 963), (16, 8, 510), (8, 12, 707), (17, 18, 800), (1, 15, 925), (8, 10, 713), (11, 9, 294), (14, 10, 548), (20, 16, 897), (5, 19, 394), (9, 19, 484), (10, 12, 283), (19, 17, 951), (4, 15, 759), (16, 2, 671), (8, 1, 981), (8, 0, 287), (20, 13, 831), (0, 7, 789), (6, 9, 541), (16, 0, 368), (1, 12, 343), (18, 12, 483), (13, 18, 489), (9, 13, 766), (19, 9, 425), (3, 13, 923), (12, 1, 980), (13, 10, 695), (12, 10, 458), (15, 9, 907)]
        maxIn = [1052, 2687, 877, 3778, 5873, 6546, 5678, 9504, 3834, 9054, 6588, 8960, 5828, 6175, 1519, 7359, 7708, 9872, 3387, 449, 9852]
        maxOut = [7846, 1313, 4709, 5810, 2905, 687, 7521, 4326, 1786, 5266, 914, 1388, 3644, 5433, 9069, 3753, 9483, 3574, 8051, 4222, 3503]
        origin = 4
        targets = [0, 15]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 1596)


    def test_373844(self):
        connections = [(4, 20, 449), (2, 20, 569), (19, 9, 973), (13, 9, 732), (8, 5, 800), (12, 10, 945), (8, 4, 368), (0, 9, 867), (15, 8, 480), (7, 8, 958), (11, 9, 520), (16, 8, 739), (1, 15, 440), (14, 11, 837), (6, 19, 982), (17, 3, 473), (18, 3, 950), (8, 14, 826), (14, 1, 871), (14, 20, 759), (7, 20, 385), (14, 12, 996), (19, 6, 994), (10, 19, 496), (5, 13, 271), (10, 13, 672), (20, 18, 396), (6, 13, 526), (9, 18, 646), (15, 10, 314), (16, 5, 800), (3, 5, 461), (5, 11, 398), (6, 18, 659), (19, 15, 599), (15, 18, 681)]
        maxIn = [2617, 334, 8118, 8169, 4893, 5822, 9959, 2597, 1409, 3135, 7884, 6622, 5300, 2700, 5869, 7888, 3352, 58, 4264, 5721, 4661]
        maxOut = [5819, 9849, 1257, 7029, 9363, 2809, 4332, 4061, 3971, 4477, 1869, 6025, 1976, 7723, 900, 2935, 747, 1667, 6514, 2829, 5611]
        origin = 14
        targets = [17, 2]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_811027(self):
        connections = [(17, 5, 359), (18, 11, 584), (4, 19, 557), (19, 11, 885), (11, 17, 250), (8, 2, 902), (6, 7, 594), (1, 9, 971), (10, 12, 592), (13, 16, 417), (14, 7, 638), (2, 7, 827), (3, 14, 
    377), (0, 12, 377), (9, 19, 884), (10, 14, 897), (16, 4, 955), (20, 18, 464), (12, 8, 733), (15, 11, 994), (0, 4, 909), (20, 5, 796), (10, 17, 349), (7, 19, 780), (5, 15, 414), (18, 2, 503), (8, 4, 757), (4, 8, 762)]
        maxIn = [84, 7694, 3705, 3939, 7847, 3247, 8240, 1844, 361, 2905, 6771, 8435, 5972, 6964, 9510, 3211, 6133, 5107, 2992, 2748, 6201]
        maxOut = [8210, 855, 6171, 6683, 9759, 7963, 1948, 6621, 5581, 4525, 7121, 7732, 5993, 9930, 4932, 588, 6478, 6664, 9461, 4664, 8043]
        origin = 1
        targets = [3, 13]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_195542(self):
        connections = [(10, 8, 449), (8, 15, 729), (14, 11, 1000), (0, 17, 893), (8, 17, 808), (18, 7, 815), (13, 17, 703), (0, 9, 474), (7, 14, 664), (13, 8, 587), (5, 2, 498), (20, 19, 439), (15, 18, 311), (19, 12, 569), (10, 18, 517), (3, 6, 495), (9, 5, 327), (12, 13, 327), (0, 3, 536), (2, 9, 382), (5, 7, 402), (12, 1, 612), (8, 1, 881), (4, 3, 703), (11, 0, 877), (6, 15, 658), (7, 20, 483), (18, 1, 349), (6, 8, 539), (1, 0, 607), (17, 0, 590), (15, 1, 348), (0, 7, 978), (11, 1, 481), (3, 4, 594), (7, 1, 881), (10, 19, 761), (18, 5, 419), (16, 8, 359)]
        maxIn = [2714, 707, 2644, 1790, 1509, 8760, 1073, 7421, 6165, 732, 693, 7301, 2647, 3347, 6757, 310, 6972, 6922, 8754, 5688, 3860]
        maxOut = [2565, 729, 3298, 8578, 7028, 6668, 4478, 680, 624, 1782, 8791, 4288, 8624, 3273, 21, 5662, 3755, 1737, 7261, 6840, 3603]
        origin = 0
        targets = [8, 17]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 1715)


    def test_166923(self):
        connections = [(13, 16, 955), (4, 1, 274), (4, 14, 817), (13, 9, 796), (10, 9, 322), (6, 17, 720), (13, 20, 512), (6, 2, 921), (2, 14, 741), (5, 8, 892), (7, 5, 456), (3, 10, 834), (1, 0, 507), (17, 8, 851), (4, 20, 475), (16, 10, 840), (14, 2, 663), (17, 10, 387), (12, 15, 995), (3, 20, 572), (15, 5, 291), (0, 17, 699), (11, 10, 774), (9, 11, 741), (20, 4, 309), (5, 15, 408), (14, 4, 
    525), (18, 6, 372), (18, 17, 549), (19, 14, 613), (6, 8, 935), (8, 6, 699), (6, 11, 556)]
        maxIn = [54, 8528, 2013, 6220, 5297, 9550, 6172, 2296, 5783, 3073, 4795, 5989, 8872, 2427, 6147, 8139, 5974, 2266, 4553, 2277, 7482]
        maxOut = [6298, 4961, 6687, 5690, 2182, 9644, 5005, 3367, 8181, 1285, 7802, 6770, 604, 4575, 5515, 2473, 7304, 556, 5312, 3203, 7494]
        origin = 16
        targets = [7, 3]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_798541(self):
        connections = [(18, 16, 437), (2, 1, 531), (10, 4, 613), (9, 13, 301), (14, 17, 704), (7, 2, 946), (6, 17, 589), (11, 4, 317), (14, 1, 607), (1, 20, 968), (0, 12, 640), (19, 5, 801), (17, 0, 399), (5, 9, 320), (19, 9, 856), (13, 5, 596), (15, 13, 375), (20, 1, 811), (3, 13, 884), (5, 17, 818), (9, 12, 609), (16, 3, 959), (8, 12, 746), (4, 5, 715), (12, 6, 311), (5, 20, 776)]
        maxIn = [9900, 1536, 1570, 3563, 3922, 3249, 3265, 8067, 8315, 4226, 2578, 7739, 474, 2874, 435, 557, 7005, 2730, 2139, 8906, 9880]
        maxOut = [900, 2256, 2969, 8167, 5932, 5201, 4356, 3643, 7552, 5315, 9100, 4180, 7579, 8678, 8832, 1988, 8274, 5939, 8863, 9060, 8293]
        origin = 10
        targets = [2, 8]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_316364(self):
        connections = [(8, 15, 433), (3, 18, 269), (1, 3, 824), (13, 8, 810), (17, 2, 958), (16, 1, 359), (9, 4, 914), (19, 18, 911), (3, 19, 599), (6, 20, 380), (5, 6, 797), (15, 4, 513), (3, 17, 302), (7, 10, 714), (12, 9, 741), (20, 9, 614), (11, 12, 991), (4, 5, 395), (14, 6, 873), (1, 0, 378), (2, 12, 810), (13, 11, 914), (0, 15, 295), (10, 1, 285), (18, 17, 277)]
        maxIn = [8996, 3432, 6408, 5905, 2442, 7831, 2137, 6196, 7853, 5795, 5781, 2237, 8029, 7044, 4215, 2897, 2613, 7131, 2040, 6204, 1504]
        maxOut = [2497, 9663, 9870, 9315, 3178, 3546, 7566, 5119, 843, 3846, 1117, 900, 4672, 7672, 2175, 4937, 9055, 1441, 4747, 9092, 4019]
        origin = 15
        targets = [17, 20]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 380)


    def test_929641(self):
        connections = [(0, 7, 550), (2, 3, 693), (5, 3, 378), (4, 2, 785), (6, 20, 335), (9, 0, 252), (16, 13, 330), (12, 14, 845), (20, 12, 644), (17, 16, 993), (7, 6, 662), (8, 10, 286), (18, 0, 897), (16, 2, 412), (17, 20, 590), (14, 11, 611), (2, 11, 934), (8, 11, 666), (13, 15, 463), (19, 6, 994), (3, 10, 827), (0, 18, 371), (1, 6, 376), (4, 9, 560), (7, 19, 789), (11, 17, 715), (15, 14, 
    342), (16, 9, 877), (10, 18, 750)]
        maxIn = [8605, 8275, 2305, 2411, 4639, 1394, 6922, 7608, 1730, 8179, 5182, 5296, 801, 278, 2086, 3885, 5040, 512, 1103, 1503, 9546]
        maxOut = [5794, 4612, 950, 9301, 2725, 8958, 2121, 5481, 2858, 8294, 5978, 519, 4248, 2084, 1855, 1441, 4882, 826, 2052, 7807, 7442]
        origin = 9
        targets = [3, 0]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 252)


    def test_161205(self):
        connections = [(8, 7, 426), (12, 19, 366), (18, 4, 957), (9, 12, 974), (20, 16, 752), (15, 10, 365), (0, 10, 286), (2, 14, 348), (3, 4, 898), (19, 10, 709), (15, 13, 977), (12, 16, 409), (1, 16, 470), (13, 9, 512), (5, 16, 982), (16, 17, 309), (11, 3, 812), (7, 3, 507), (4, 15, 976), (19, 18, 407), (14, 15, 794), (9, 11, 543), (19, 3, 284), (18, 20, 673), (11, 12, 472), (8, 2, 281), (10, 18, 421), (20, 1, 563), (17, 6, 712), (6, 12, 658), (10, 9, 854), (8, 18, 899), (7, 15, 989)]
        maxIn = [1957, 6348, 6035, 3134, 8905, 3889, 3972, 7265, 8183, 4903, 9938, 6249, 6637, 456, 6369, 6980, 7920, 5182, 2303, 8856, 236]
        maxOut = [5387, 8625, 4720, 5503, 8956, 1942, 7607, 7428, 2068, 318, 1533, 1721, 1822, 9050, 5076, 9422, 209, 7778, 8602, 4460, 2779]
        origin = 1
        targets = [3, 9]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 209)


    def test_346916(self):
        connections = [(15, 5, 299), (13, 9, 525), (6, 2, 864), (17, 18, 411), (19, 15, 437), (17, 12, 880), (11, 14, 581), (3, 20, 567), (15, 19, 270), (4, 10, 947), (0, 7, 482), (20, 15, 865), (7, 14, 520), (13, 7, 420), (16, 8, 501), (20, 13, 673), (2, 16, 311), (14, 19, 731), (4, 13, 317), (12, 13, 772), (18, 9, 253), (8, 11, 617), (15, 13, 326), (0, 2, 732), (16, 2, 976), (18, 15, 436), (4, 12, 559), (9, 14, 753), (13, 14, 989), (3, 1, 336), (10, 20, 741), (19, 8, 640), (7, 10, 390), (10, 18, 296), (5, 3, 266), (19, 10, 579), (12, 20, 539), (4, 14, 714), (18, 4, 329), (1, 19, 723), (5, 20, 657), (4, 7, 992), (6, 12, 499)]
        maxIn = [5633, 7648, 3392, 3875, 4043, 4122, 5406, 2470, 1813, 255, 2517, 3905, 6750, 7170, 5538, 9313, 6522, 8701, 9859, 8746, 6425]
        maxOut = [1364, 3161, 7898, 6135, 2298, 5829, 1429, 1415, 91, 9812, 3458, 5057, 2439, 1653, 9413, 9504, 5308, 6132, 2207, 4271, 3961]
        origin = 7
        targets = [0, 16]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)

    def test_719376(self):
        connections = [(0, 2, 525), (4, 8, 780), (1, 9, 602), (2, 1, 643), (7, 4, 991), (9, 12, 887), (10, 6, 530), (11, 5, 728), (12, 5, 929), (10, 8, 760), (3, 5, 645), (11, 12, 634), (5, 8, 727), (6, 1, 926), (8, 9, 896)]
        maxIn = [6177, 9751, 783, 5871, 6378, 8964, 4761, 5561, 4311, 8317, 2768, 448, 8914]
        maxOut = [5500, 1341, 6535, 2166, 6238, 9972, 3119, 5069, 9726, 5473, 8804, 692, 4491]
        origin = 12
        targets = [11, 3]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_649082(self):
        connections = [(11, 3, 556), (1, 12, 426), (9, 7, 968), (0, 1, 258), (4, 6, 578), (3, 11, 855), (10, 0, 679), (12, 5, 896), (6, 10, 452), (8, 4, 769), (2, 8, 419), (11, 12, 354), (7, 9, 539), 
    (0, 12, 998), (5, 10, 414)]
        maxIn = [5547, 7567, 5497, 9406, 2660, 9402, 8922, 4379, 8471, 9111, 4704, 8759, 9111]
        maxOut = [5761, 4399, 3751, 9578, 3952, 4222, 1713, 3234, 5981, 9965, 3458, 1882, 4524]
        origin = 11
        targets = [1, 0]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 354)


    def test_340447(self):
        connections = [(6, 2, 520), (7, 12, 442), (12, 1, 849), (4, 12, 316), (3, 6, 755), (10, 4, 331), (2, 12, 937), (8, 6, 815), (5, 10, 814), (2, 9, 846), (9, 6, 677), (11, 9, 691), (1, 6, 703), (0, 9, 461), (1, 9, 686)]
        maxIn = [5279, 7964, 6676, 9577, 4503, 1411, 3082, 3609, 5187, 8970, 502, 1470, 8269]
        maxOut = [4337, 66, 115, 1466, 9257, 1154, 9962, 3944, 8582, 3296, 5127, 3999, 1913]
        origin = 8
        targets = [12, 9]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 115)


    def test_276863(self):
        connections = [(1, 12, 397), (2, 9, 918), (9, 7, 778), (3, 5, 832), (8, 12, 638), (4, 6, 680), (6, 0, 933), (10, 9, 530), (12, 5, 611), (7, 3, 791), (5, 8, 705), (0, 10, 516), (11, 7, 440)]   
        maxIn = [2457, 1164, 8945, 2276, 307, 1390, 4684, 9456, 4546, 9667, 2139, 2911, 7901]
        maxOut = [2275, 4030, 6695, 6079, 9179, 8831, 7760, 7615, 8892, 2138, 937, 611, 908]
        origin = 4
        targets = [6, 10]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 680)


    def test_618162(self):
        connections = [(9, 10, 444), (11, 1, 375), (1, 10, 904), (12, 2, 771), (4, 8, 934), (2, 6, 614), (12, 11, 721), (0, 10, 909), (3, 4, 924), (6, 3, 888), (8, 7, 395), (7, 8, 482), (5, 6, 588), (0, 11, 520), (10, 11, 643)]
        maxIn = [7457, 4632, 2740, 2251, 3691, 3465, 579, 4786, 2708, 1523, 3156, 5994, 6170]
        maxOut = [9292, 2296, 5375, 9228, 8436, 9806, 4652, 4353, 5503, 1855, 7056, 3751, 4815]
        origin = 12
        targets = [1, 8]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 954)


    def test_220315(self):
        connections = [(12, 4, 370), (1, 12, 400), (6, 12, 871), (3, 6, 517), (7, 3, 713), (8, 10, 702), (2, 1, 504), (0, 6, 797), (9, 5, 808), (5, 2, 315), (4, 12, 957), (11, 0, 858), (10, 3, 902)]  
        maxIn = [3406, 8513, 2032, 4755, 3489, 9597, 5973, 8466, 9097, 5370, 5137, 6919, 7640]
        maxOut = [745, 5806, 9266, 707, 2423, 7244, 4071, 1261, 7198, 9633, 2296, 511, 4986]
        origin = 4
        targets = [9, 2]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_657030(self):
        connections = [(12, 6, 460), (6, 10, 395), (6, 0, 681), (3, 10, 790), (7, 11, 685), (0, 1, 922), (9, 2, 895), (11, 1, 390), (2, 1, 323), (10, 11, 796), (8, 6, 631), (1, 8, 768), (4, 1, 989), (4, 0, 301), (5, 0, 832)]
        maxIn = [6308, 6668, 2221, 768, 3951, 2146, 4453, 8361, 2959, 6783, 9328, 2687, 88]
        maxOut = [3313, 8551, 8854, 50, 5150, 3515, 5277, 1341, 7961, 6028, 2284, 6248, 7602]
        origin = 4
        targets = [1, 7]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 1290)


    def test_692586(self):
        connections = [(5, 3, 627), (10, 2, 463), (12, 6, 665), (3, 2, 683), (9, 12, 954), (0, 3, 379), (4, 8, 611), (9, 0, 410), (7, 8, 839), (6, 4, 425), (8, 11, 446), (11, 3, 611), (2, 1, 824), (9, 5, 541), (1, 10, 956)]
        maxIn = [4365, 9100, 1038, 7150, 6822, 6640, 7727, 9221, 3144, 4033, 3514, 8518, 3148]
        maxOut = [3799, 1914, 3233, 7521, 3619, 9972, 8998, 3582, 9431, 5841, 8291, 7179, 4870]
        origin = 9
        targets = [0, 6]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 1075)


    def test_167962(self):
        connections = [(5, 4, 574), (4, 8, 751), (6, 11, 587), (1, 5, 268), (2, 1, 650), (9, 6, 447), (6, 2, 633), (11, 10, 355), (10, 1, 621), (0, 6, 506), (7, 4, 993), (8, 4, 634), (12, 8, 443), (0, 5, 435), (3, 12, 801)]
        maxIn = [3011, 7191, 7040, 1742, 7500, 1478, 4303, 5465, 7604, 1677, 8377, 7999, 7799]
        maxOut = [6347, 9353, 6698, 2237, 5431, 2209, 5496, 6456, 3046, 4611, 2992, 4492, 1453]
        origin = 7
        targets = [5, 0]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_221791(self):
        connections = [(6, 4, 440), (4, 7, 474), (11, 3, 909), (3, 0, 691), (2, 11, 664), (7, 11, 862), (12, 0, 735), (5, 8, 837), (8, 3, 955), (10, 9, 484), (1, 2, 355), (0, 1, 683), (9, 2, 845)]    
        maxIn = [7366, 2143, 4178, 1897, 9678, 1193, 2018, 5154, 1623, 6166, 3224, 4644, 3979]
        maxOut = [2903, 4214, 3511, 8518, 6494, 6134, 6165, 3151, 27, 9902, 7790, 6047, 9487]
        origin = 0
        targets = [12, 4]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_669096(self):
        connections = [(12, 8, 978), (4, 12, 882), (5, 6, 712), (9, 4, 312), (1, 3, 949), (3, 5, 433), (7, 4, 967), (0, 10, 868), (6, 7, 297), (10, 9, 906), (11, 3, 840), (8, 2, 996), (2, 3, 512)]    
        maxIn = [4126, 6367, 786, 2185, 6466, 5320, 5817, 132, 1025, 2844, 5916, 3785, 5400]
        maxOut = [4493, 3253, 4160, 2971, 271, 8739, 891, 450, 9824, 8329, 8784, 3085, 4939]
        origin = 7
        targets = [11, 6]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 271)


    def test_444665(self):
        connections = [(5, 3, 784), (4, 8, 532), (8, 6, 919), (9, 3, 702), (11, 3, 304), (3, 10, 263), (7, 2, 941), (1, 5, 784), (2, 5, 698), (0, 6, 842), (12, 5, 512), (10, 7, 544), (6, 3, 826)]     
        maxIn = [2566, 8885, 8438, 2897, 684, 3116, 3665, 3681, 2942, 1770, 5567, 31, 3665]
        maxOut = [3073, 4036, 4551, 2969, 8753, 714, 1214, 6455, 2672, 348, 9756, 315, 9549]
        origin = 4
        targets = [6, 7]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 532)


    def test_417296(self):
        connections = [(7, 5, 487), (9, 11, 741), (3, 11, 897), (10, 12, 811), (5, 4, 715), (1, 3, 564), (6, 12, 408), (2, 3, 799), (0, 5, 725), (8, 10, 290), (4, 1, 282), (11, 4, 687), (12, 5, 251)] 
        maxIn = [2000, 3910, 1760, 7966, 6728, 2691, 6327, 9191, 4925, 1811, 362, 2791, 65]
        maxOut = [7475, 5090, 1986, 4577, 717, 6797, 5118, 1039, 7274, 1121, 7298, 9572, 5682]
        origin = 0
        targets = [9, 11]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 282)


    def test_341475(self):
        connections = [(2, 0, 626), (8, 10, 729), (0, 7, 630), (7, 6, 930), (6, 8, 280), (1, 3, 785), (4, 7, 920), (10, 5, 742), (10, 12, 852), (0, 9, 313), (9, 10, 300), (5, 12, 315), (3, 6, 917), (11, 1, 810), (12, 9, 730)]
        maxIn = [5059, 8256, 4680, 5205, 1515, 7377, 6191, 5360, 4093, 967, 3508, 414, 2466]
        maxOut = [6443, 9709, 9160, 481, 7130, 9938, 287, 6551, 2189, 9237, 8348, 5916, 4762]
        origin = 9
        targets = [7, 1]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_822971(self):
        connections = [(6, 4, 816), (5, 1, 590), (0, 2, 995), (8, 1, 552), (2, 1, 774), (10, 3, 936), (4, 8, 672), (9, 8, 443), (6, 3, 750), (12, 4, 303), (1, 11, 629), (11, 5, 405), (3, 0, 860), (3, 
    12, 770), (7, 12, 587)]
        maxIn = [7016, 3795, 6400, 7150, 3737, 6866, 494, 3573, 5227, 8117, 2037, 7036, 127]
        maxOut = [6367, 3546, 3696, 4662, 4567, 5984, 7024, 5345, 7549, 1381, 3852, 3398, 9085]
        origin = 0
        targets = [7, 9]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_553711(self):
        connections = [(12, 6, 936), (12, 3, 617), (7, 3, 410), (9, 0, 855), (4, 6, 388), (5, 8, 812), (1, 11, 727), (10, 2, 626), (8, 6, 869), (11, 4, 344), (3, 9, 599), (0, 6, 369), (6, 10, 833), (10, 7, 560), (2, 10, 267)]
        maxIn = [4747, 8830, 7565, 4620, 8536, 2512, 3592, 2906, 6062, 9560, 931, 6823, 5458]
        maxOut = [5295, 7715, 784, 2123, 6660, 9637, 4875, 6121, 6026, 9775, 9838, 9206, 7638]
        origin = 7
        targets = [6, 9]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 410)


    def test_120477(self):
        connections = [(0, 1, 419), (9, 11, 831), (1, 3, 992), (7, 6, 252), (11, 10, 445), (2, 11, 638), (4, 5, 421), (6, 10, 288), (8, 3, 933), (10, 2, 995), (3, 5, 677), (5, 11, 643), (12, 6, 837)] 
        maxIn = [2452, 8340, 9766, 4339, 6710, 3185, 6255, 7433, 1830, 5468, 1011, 5038, 2166]
        maxOut = [7336, 8306, 2083, 1036, 7666, 6882, 4406, 3647, 6089, 5932, 450, 5566, 5206]
        origin = 4
        targets = [0, 3]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_381517(self):
        connections = [(5, 0, 455), (9, 6, 341), (10, 0, 666), (12, 0, 749), (4, 11, 934), (6, 2, 921), (8, 12, 471), (11, 6, 358), (3, 5, 693), (4, 6, 294), (2, 9, 299), (7, 9, 905), (0, 1, 789), (1, 4, 975)]
        maxIn = [6580, 773, 3765, 471, 8585, 7629, 2150, 8013, 7375, 7547, 9515, 1422, 831]
        maxOut = [6261, 7644, 922, 8736, 5122, 2078, 6888, 8793, 6170, 3852, 7620, 1834, 4233]
        origin = 7
        targets = [9, 12]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 905)


    def test_785705(self):
        connections = [(2, 8, 688), (7, 5, 689), (9, 8, 740), (6, 12, 598), (3, 7, 653), (1, 8, 876), (10, 5, 734), (12, 9, 890), (4, 5, 916), (0, 7, 286), (11, 9, 961), (8, 1, 965), (5, 10, 723)]    
        maxIn = [7895, 8295, 4400, 6285, 7354, 6312, 2224, 1702, 9824, 9632, 991, 5201, 5812]
        maxOut = [8528, 9471, 2820, 3652, 971, 822, 2252, 5443, 6179, 4276, 8539, 1332, 4893]
        origin = 7
        targets = [3, 0]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_618634(self):
        connections = [(6, 11, 851), (5, 4, 812), (8, 11, 747), (0, 1, 952), (11, 6, 542), (5, 2, 275), (2, 4, 737), (1, 5, 971), (4, 3, 708), (10, 1, 572), (12, 2, 367), (3, 9, 554), (9, 7, 725), (7, 3, 687)]
        maxIn = [1649, 2658, 7892, 8726, 1568, 6301, 4916, 6027, 4308, 1057, 3505, 7057, 3726]
        maxOut = [4265, 1589, 7240, 5877, 4867, 3149, 4276, 7209, 952, 9431, 9590, 4805, 1423]
        origin = 5
        targets = [0, 3]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 708)


    def test_146391(self):
        connections = [(6, 11, 366), (7, 8, 577), (9, 4, 519), (1, 6, 990), (2, 1, 807), (1, 4, 778), (11, 0, 387), (3, 2, 780), (5, 10, 566), (8, 5, 753), (12, 9, 650), (4, 8, 668), (10, 5, 757), (0, 4, 445)]
        maxIn = [4690, 5299, 934, 4979, 3334, 4251, 518, 4172, 1638, 570, 9394, 3038, 8677]
        maxOut = [8498, 7881, 3009, 1014, 907, 5972, 4875, 5621, 5714, 8949, 4611, 774, 71]
        origin = 11
        targets = [9, 8]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 387)


    def test_162602(self):
        connections = [(9, 2, 894), (6, 3, 993), (0, 8, 532), (7, 2, 533), (11, 10, 300), (8, 1, 349), (4, 0, 669), (3, 8, 585), (10, 6, 783), (12, 9, 355), (1, 4, 308), (1, 5, 768), (8, 6, 689), (5, 
    0, 983), (2, 3, 489)]
        maxIn = [2850, 1075, 2957, 8244, 980, 2872, 6355, 1629, 2203, 5863, 8218, 5137, 8016]
        maxOut = [9157, 1749, 4029, 6189, 5524, 6548, 1837, 3334, 9493, 6889, 9416, 488, 3164]
        origin = 8
        targets = [4, 7]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 308)


    def test_110321(self):
        connections = [(12, 2, 668), (3, 6, 569), (7, 8, 574), (1, 11, 695), (8, 0, 889), (11, 12, 272), (12, 10, 687), (9, 11, 692), (10, 9, 556), (2, 10, 661), (4, 8, 865), (5, 4, 752), (6, 3, 496), (0, 4, 324), (1, 6, 563)]
        maxIn = [9086, 4134, 3456, 3262, 9384, 3108, 971, 5748, 9546, 6243, 9993, 3203, 3882]
        maxOut = [1915, 1725, 3795, 848, 1887, 8486, 9092, 9659, 3351, 6568, 7077, 7923, 4323]
        origin = 10
        targets = [4, 6]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_444719(self):
        connections = [(7, 1, 423), (5, 10, 658), (11, 5, 886), (4, 0, 856), (1, 8, 676), (2, 6, 424), (0, 9, 825), (6, 1, 995), (3, 6, 915), (8, 7, 942), (9, 0, 432), (10, 3, 327), (12, 10, 415)]    
        maxIn = [3324, 2392, 2690, 2109, 9358, 7613, 6263, 5653, 5239, 7969, 7938, 6528, 4878]
        maxOut = [1616, 6576, 3438, 9298, 2341, 1902, 9017, 1199, 6616, 403, 6667, 735, 3630]
        origin = 8
        targets = [0, 5]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)


    def test_363896(self):
        connections = [(12, 10, 631), (7, 11, 618), (4, 2, 364), (3, 10, 308), (5, 6, 972), (6, 1, 368), (8, 11, 431), (10, 6, 417), (11, 5, 718), (2, 12, 457), (1, 8, 784), (9, 5, 316), (0, 9, 502)] 
        maxIn = [5579, 738, 9197, 1384, 5061, 1976, 9660, 902, 1527, 2057, 3532, 7061, 6631]
        maxOut = [6480, 7013, 4901, 8744, 5291, 1572, 4587, 8273, 6246, 3059, 9834, 4971, 387]
        origin = 4
        targets = [6, 7]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 364)


    def test_238671(self):
        connections = [(2, 0, 520), (5, 11, 690), (1, 7, 390), (10, 3, 853), (8, 3, 744), (11, 7, 741), (9, 2, 818), (3, 7, 475), (4, 6, 310), (7, 0, 816), (12, 9, 856), (11, 4, 469), (0, 2, 558), (6, 12, 949)]
        maxIn = [3637, 2326, 8736, 887, 4284, 9221, 4374, 9713, 2356, 9365, 5729, 4039, 6213]
        maxOut = [3662, 4487, 9495, 5907, 3938, 1620, 4911, 8102, 4102, 6440, 2917, 2584, 6257]
        origin = 10
        targets = [8, 7]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 475)


    def test_574068(self):
        connections = [(6, 2, 925), (4, 12, 940), (11, 6, 928), (0, 6, 924), (7, 10, 386), (8, 6, 918), (2, 9, 367), (9, 10, 442), (1, 0, 861), (12, 11, 920), (5, 2, 682), (10, 3, 884), (3, 4, 824)]  
        maxIn = [9184, 2184, 974, 2788, 5043, 2557, 1126, 1883, 9324, 7518, 3112, 8474, 1998]
        maxOut = [5586, 6190, 1577, 7320, 4252, 9121, 4464, 6653, 4081, 4323, 5344, 6534, 7596]
        origin = 9
        targets = [6, 12]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 442)


    def test_630896(self):
        connections = [(11, 12, 594), (6, 3, 575), (7, 10, 663), (9, 3, 560), (12, 8, 708), (2, 8, 957), (0, 11, 538), (5, 0, 339), (10, 3, 279), (1, 0, 453), (3, 7, 362), (8, 4, 932), (4, 9, 596)]   
        maxIn = [8345, 4502, 2053, 460, 5882, 2887, 7092, 2731, 4670, 7804, 8387, 8776, 2560]
        maxOut = [1291, 3390, 1410, 7335, 1940, 3091, 6717, 8815, 1669, 158, 3371, 7828, 7149]
        origin = 7
        targets = [1, 10]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 663)


    def test_962708(self):
        connections = [(11, 10, 259), (0, 3, 586), (2, 7, 446), (10, 11, 369), (5, 6, 554), (8, 3, 644), (4, 7, 907), (12, 2, 663), (2, 5, 544), (7, 2, 497), (9, 12, 635), (1, 12, 517), (6, 0, 425), (3, 9, 952)]
        maxIn = [1690, 438, 8761, 5238, 2550, 9656, 2488, 1865, 2667, 7359, 2011, 3690, 870]
        maxOut = [1282, 545, 6960, 6923, 4509, 7193, 248, 743, 5769, 8251, 6567, 4824, 4348]
        origin = 0
        targets = [6, 10]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 544)


    def test_813834(self):
        connections = [(1, 2, 897), (4, 7, 908), (8, 4, 908), (7, 2, 633), (3, 12, 315), (10, 1, 454), (11, 12, 265), (9, 5, 468), (2, 1, 703), (0, 1, 571), (5, 2, 930), (12, 7, 981), (6, 3, 602)]    
        maxIn = [6866, 6211, 1377, 8211, 2107, 8520, 3572, 6058, 8620, 7461, 1979, 675, 5447]
        maxOut = [3860, 204, 1128, 323, 5530, 3219, 6856, 7782, 2616, 263, 9987, 5511, 7411]
        origin = 2
        targets = [0, 9]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 0)

    def test_canada_roads_from_notes(self):
        connections = [(0, 1, 16), (1, 2, 12), (2, 3, 20),(4,1,4),(5,2,7),(0,4,13),(4,5,14),(5,3,4),(5,1,9)]
        maxIn = [100]*len(connections)
        maxOut = [100]*len(connections)
        origin = 0
        targets = [3]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 23)
    
    def test_420_databases(self):
        connections = [(155, 393, 70), (19, 192, 51), (89, 116, 18), (79, 151, 65), (181, 393, 13), (146, 59, 36), (127, 376, 78), (398, 271, 68), (222, 197, 77), (138, 47, 63), (209, 261, 60), (106, 227, 100), (76, 146, 15), (387, 216, 91), (247, 375, 75), (66, 143, 21), (50, 123, 43), (157, 3, 34), (321, 414, 91), (109, 416, 95), (196, 407, 65), (221, 372, 98), (247, 336, 83), (97, 227, 16), (256, 143, 59), (389, 229, 86), (406, 86, 49), (292, 231, 43), (134, 218, 73), (95, 106, 70), (204, 412, 58), (393, 155, 50), (212, 51, 89), (340, 232, 28), (363, 61, 41), (264, 346, 28),
(385, 362, 96), (160, 149, 74), (263, 54, 14), (101, 114, 21), (100, 388, 70), (273, 78, 46), (329, 145, 37), (211, 115, 25), (368, 152, 65), (45, 38, 44), (347, 205, 27), (159, 361, 4), (50, 409, 99), (168, 70, 74), (374, 59, 99), (177, 229, 43), (60, 30, 42), (159, 352, 49), (323, 363, 64), (344, 171, 14), (325, 367, 36), (147, 254, 97), (176, 66, 86), (76, 177, 96), (123, 145, 95), (201, 129, 100), (396, 145, 2), (314, 222, 24), (85, 254, 14), (119, 112, 22), (264, 27, 37), (98, 404, 25), (86, 54, 55), (295, 115, 14), (282, 111, 50), (104, 33, 34), (77, 36, 70), (338, 263, 66),
(355, 77, 33), (6, 179, 81), (389, 370, 20), (392, 16, 86), (94, 162, 99), (243, 233, 19), (36, 126, 95), (383, 381, 35), (394, 56, 43), (37, 233, 93), (297, 73, 79), (349, 175, 32), (110, 24, 90), (39, 1, 69), (113, 34, 50), (213, 269, 84), (31, 236, 38), (288, 21, 50), (269, 264, 54), (317, 153, 30), (368, 86, 100), (400, 361, 51), (52, 331, 81), (51, 145, 46), (268, 352, 2), (73, 347, 69), (215, 134, 27), (13, 149, 82), (249, 45, 65), (412, 86, 35), (158, 225, 97), (271, 119, 17), (403, 245, 21), (371, 418, 82), (180, 28, 89), (243, 109, 64), (233, 122, 25), (21, 73, 45), (327, 113, 49),
(158, 201, 23), (7, 29, 27), (278, 353, 14), (383, 342, 65), (64, 263, 18), (151, 2, 23), (15, 333, 88), (172, 348, 84), (43, 218, 88), (65, 386, 84), (192, 283, 55), (17, 220, 51), (53, 415, 34), 
(206, 0, 91), (39, 165, 37), (277, 86, 79), (127, 274, 5), (333, 72, 72), (67, 170, 71), (0, 38, 48), (142, 261, 42), (143, 404, 58), (312, 284, 36), (82, 391, 79), (379, 168, 3), (219, 383, 71), 
(60, 359, 58), (59, 403, 97), (227, 137, 14), (193, 252, 48), (46, 7, 23), (283, 33, 57), (130, 6, 44), (289, 370, 35), (183, 11, 33), (92, 335, 55), (390, 237, 75), (17, 75, 46), (55, 14, 24), (249, 75, 65), (135, 374, 39), (190, 201, 94), (262, 42, 7), (148, 28, 75), (270, 332, 39), (182, 402, 98), (241, 249, 36), (279, 376, 3), (96, 321, 32), (409, 112, 77), (222, 316, 89), (366, 35, 90), (330, 124, 15), (357, 294, 67), (419, 413, 88), (407, 309, 40), (166, 338, 37), (306, 188, 3), (220, 378, 8), (168, 229, 51), (74, 372, 88), (38, 62, 29), (198, 403, 16), (145, 276, 36),
(254, 330, 47), (55, 195, 31), (407, 173, 44), (39, 169, 6), (258, 221, 81), (413, 240, 83), (263, 219, 21), (90, 191, 57), (374, 7, 4), (187, 231, 75), (339, 380, 73), (358, 289, 77), (345, 374, 76), (251, 310, 80), (216, 297, 6), (275, 320, 36), (272, 293, 31), (380, 92, 78), (53, 239, 23), (141, 277, 64), (29, 160, 71), (122, 256, 7), (185, 145, 5), (24, 122, 73), (405, 305, 18), (14, 96, 88), (106, 374, 43), (285, 366, 95), (286, 315, 74), (78, 215, 59), (60, 158, 8), (33, 63, 70), (193, 361, 84), (293, 101, 15), (414, 25, 25), (214, 377, 72), (337, 175, 16), (16, 392, 17), (27, 362, 68),
(2, 1, 44), (47, 112, 99), (63, 215, 25), (167, 153, 75), (342, 316, 26), (25, 340, 41), (214, 244, 73), (68, 155, 59), (139, 123, 64), (188, 33, 59), (30, 259, 15), (307, 184, 11), (160, 179, 97), (373, 96, 6), (302, 415, 5), (85, 339, 18), (69, 335, 12), (198, 286, 24), (356, 348, 97), (8, 72, 76), (115, 154, 87), (224, 306, 17), (383, 350, 17), (179, 296, 23), (133, 210, 98), (353, 222, 95), (415, 362, 96), (174, 72, 29), (54, 58, 26), (314, 394, 83), (26, 147, 35), (170, 324, 10), (79, 189, 100), (104, 386, 68), (32, 374, 32), (417, 183, 68), (101, 373, 15), (412, 272, 34), (384, 63, 31),
(170, 83, 78), (261, 38, 63), (165, 42, 5), (75, 393, 13), (116, 278, 89), (364, 240, 85), (179, 68, 20), (28, 344, 25), (9, 141, 60), (305, 367, 98), (41, 315, 70), (71, 188, 89), (208, 279, 18), (187, 48, 69), (103, 219, 32), (396, 202, 14), (3, 47, 100), (112, 206, 66), (372, 320, 2), (22, 40, 84), (250, 46, 10), (125, 402, 69), (371, 19, 51), (362, 222, 16), (108, 386, 22), (347, 160, 19), (255, 261, 55), (354, 401, 19), (140, 189, 70), (388, 49, 41), (132, 172, 93), (353, 317, 66), (5, 204, 89), (49, 391, 5), (185, 316, 97), (110, 259, 11), (403, 29, 38), (1, 171, 7), (305, 296, 42),
(375, 227, 32), (300, 170, 11), (234, 343, 95), (280, 51, 12), (281, 90, 54), (365, 336, 21), (139, 306, 3), (133, 322, 23), (81, 323, 72), (83, 332, 43), (235, 56, 14), 
(378, 272, 12), (16, 137, 80), (11, 21, 32), (100, 248, 48), (145, 327, 80), (397, 184, 39), (124, 33, 65), (238, 259, 74), (325, 22, 37), (386, 86, 29), (4, 109, 63), (236, 168, 1), (274, 38, 28), (228, 338, 68), (40, 147, 99), (313, 172, 21), (226, 231, 39), (283, 228, 81), (246, 69, 43), (282, 233, 57), (253, 130, 76), (282, 256, 31), (257, 333, 46), (70, 312, 15), (359, 411, 35), (339, 140, 62), (53, 237, 55), (301, 388, 71), (42, 383, 66), (285, 127, 35), (276, 361, 7), (112, 301, 46), (35, 200, 84), (194, 83, 67), (231, 46, 50), (152, 317, 57), (271, 100, 44), (87, 248, 74), 
(382, 166, 93), (385, 338, 11), (141, 96, 66), (157, 128, 58), (357, 60, 94), (102, 71, 16), (370, 317, 51), (329, 182, 47), (328, 286, 3), (205, 308, 15), (248, 13, 45), (163, 419, 42), (402, 375, 9), (297, 177, 54), (319, 347, 62), (48, 229, 47), (386, 58, 91), (156, 326, 51), (162, 386, 96), (290, 17, 64), (331, 47, 44), (26, 12, 15), (81, 160, 67), (232, 217, 82), (280, 413, 66), (244, 65, 61), (175, 82, 69), (315, 32, 10), (322, 207, 57), (223, 173, 35), (57, 371, 39), (60, 376, 16), (63, 278, 65), (126, 418, 24), (171, 21, 19), (295, 149, 41), (410, 399, 29), (262, 384, 71), 
(105, 304, 85), (299, 391, 79), (136, 228, 64), (268, 225, 85), (107, 220, 12), (230, 298, 1), (185, 324, 90), (308, 184, 79), (172, 389, 92), (317, 27, 50), (371, 188, 82), (88, 164, 93), (242, 20, 78), (10, 183, 4), (361, 78, 75), (384, 91, 63), (408, 298, 48), (154, 226, 15), (320, 397, 21), (114, 300, 54), (360, 361, 13), (304, 293, 31), (93, 120, 52), (332, 224, 26), (37, 18, 18), (399, 310, 100), (291, 238, 65), (296, 199, 99), (247, 54, 3), (120, 290, 50), (355, 9, 21), (218, 74, 48), (84, 37, 42), (156, 381, 98), (311, 348, 71), (54, 135, 30), (225, 68, 1), (90, 417, 27),
(265, 201, 49), (260, 382, 89), (153, 39, 72), (410, 150, 56), (202, 112, 25), (267, 401, 14), (331, 138, 31), (41, 312, 74), (409, 200, 53), (58, 333, 6), (286, 61, 63), (298, 97, 4), (61, 364, 34), (22, 302, 4), (178, 257, 70), (322, 181, 17), (169, 236, 61), (121, 176, 37), (44, 22, 60), (12, 44, 85), (358, 207, 24), (309, 126, 65), (346, 87, 22), (411, 92, 60), (67, 245, 67), (137, 291, 32), (387, 382, 82), (351, 238, 46), (367, 246, 59), (217, 339, 13), (36, 140, 80), (274, 286, 91), (343, 337, 2), (418, 214, 77), (350, 282, 31), (303, 319, 56), (266, 314, 74), (27, 135, 43), (38, 145, 35),
(164, 76, 27), (416, 200, 89), (195, 338, 3), (401, 180, 76), (35, 55, 45), (318, 137, 9), (71, 186, 70), (118, 268, 1), (409, 217, 69), (220, 167, 96), (404, 286, 57), (111, 361, 7), (34, 199, 78), (186, 418, 36), (376, 112, 10), (74, 224, 98), (209, 120, 16), (417, 106, 18), (20, 332, 92), (148, 386, 14), (139, 28, 86), (203, 77, 23), (76, 128, 60), (255, 222, 37), (312, 202, 94), (128, 90, 29), (138, 339, 13), (395, 408, 93), (259, 228, 45), (284, 37, 54), (117, 340, 41), (56, 143, 16), (287, 356, 87), (348, 256, 92), (394, 12, 95), (336, 331, 55), (126, 283, 39), 
(140, 106, 85), (160, 176, 85), (147, 351, 74), (91, 346, 41), (324, 268, 44), (279, 315, 8), (334, 205, 3), (210, 43, 61), (150, 21, 80), (99, 325, 93), (254, 148, 49), (156, 8, 52), (326, 10, 34), (279, 212, 28), (150, 408, 44), (381, 75, 47), (391, 395, 73), (370, 49, 39), (409, 71, 14), (208, 107, 35), (311, 96, 19), (18, 302, 38), (245, 372, 100), (239, 258, 84), (297, 325, 30), (131, 67, 45), (144, 177, 27), (32, 301, 86), (252, 357, 31), (29, 163, 92), (313, 317, 16), (316, 70, 19), (80, 58, 92), (369, 326, 82), (191, 111, 88), (131, 270, 1), (189, 334, 85), (121, 108, 75), 
(67, 205, 100), (377, 394, 7), (149, 140, 36), (237, 340, 85), (64, 115, 92), (314, 201, 49), (352, 117, 80), (22, 333, 93), (110, 123, 23), (104, 274, 41), (266, 344, 41), (220, 380, 18), (129, 165, 8), (98, 145, 78), (62, 293, 52), (162, 128, 88), (55, 354, 43), (31, 387, 45), (132, 152, 47), (62, 244, 43), (161, 47, 60), (173, 244, 7), (168, 39, 21), (41, 87, 61), (204, 282, 89), (215, 322, 41), (286, 87, 41), (23, 85, 38), (341, 352, 71), (397, 416, 11), (161, 245, 44), (39, 387, 45), (22, 241, 90), (110, 199, 22), (45, 28, 19), (311, 207, 25), (275, 334, 65), (270, 218, 93), (311, 4, 47),
(94, 114, 98), (199, 320, 94), (45, 85, 9), (175, 386, 93), (257, 279, 87), (72, 345, 60), (160, 210, 95), (207, 288, 53), (417, 171, 63), (184, 222, 65), (294, 191, 8), (335, 191, 71), (240, 49, 35), (229, 2, 20), (183, 171, 56), (339, 48, 94), (158, 263, 14), (218, 225, 86), (418, 28, 15), (200, 160, 51), (101, 321, 95), (354, 329, 29), (310, 126, 72), (197, 104, 36)]       
        maxIn = [190, 588, 161, 80, 65, 517, 235, 369, 553, 413, 574, 548, 451, 472, 78, 509, 367, 78, 346, 425, 580, 279, 189, 418, 590, 471, 479, 314, 56, 584, 145, 68, 12, 38, 591, 233, 534, 70, 486, 249, 471, 564, 48, 386, 335, 498, 146, 496, 66, 296, 267, 173, 269, 328, 388, 81, 399, 110, 546, 244, 23, 338, 287, 77, 434, 548, 501, 207, 375, 14, 542, 319, 123, 573, 64, 247, 428, 386, 455, 118, 162, 254, 325, 231, 401, 497, 478, 305, 42, 305, 417, 54, 569, 151, 269, 383, 345, 397, 456, 559, 6, 200, 167, 266, 402, 66, 38, 125, 350, 392, 414, 465, 88, 240, 169, 153, 179, 107, 242, 407, 544, 108, 434, 534, 418, 488, 159, 255, 441, 305, 581, 576, 211, 308, 5, 63, 384, 99, 116, 360, 450, 86, 62, 437, 21, 25, 437, 535, 168, 168, 67, 575, 594, 344, 144, 222, 284, 82, 439, 55, 581, 307, 183, 135, 143, 334, 54, 342, 380, 447, 433, 476, 594, 106, 392, 472, 197, 365, 86, 239, 258, 357, 12, 333, 385, 526, 7, 402, 262, 63, 176, 42, 527, 410, 340, 256, 360, 25, 493, 126, 443, 433, 417, 344, 543, 330, 199, 377, 374, 574, 218, 234, 291, 277, 577, 134, 487, 358, 264, 440, 207, 315, 371, 88, 143, 343, 99, 44, 371, 32, 539, 356, 418, 55, 289, 276, 461, 426, 584, 81, 335, 526, 84, 133, 30, 143, 182, 70, 153, 219, 163, 363, 551, 574, 141, 224, 65, 87, 227, 86, 484, 572, 248, 444, 444, 520, 406, 234, 113, 537, 297, 442, 239, 526, 81, 327, 483, 532, 523, 162, 273, 391, 283, 273, 214, 350, 375, 193, 115, 539, 552, 379, 143, 95, 398, 487, 6, 465, 394, 304, 50, 501, 294, 215, 434, 426, 459, 204, 42, 272, 261, 20, 370, 247, 55, 186, 211, 159, 246, 485, 94, 293, 261, 544, 279, 103, 116, 206, 128, 493, 21, 250, 441, 115, 470, 129, 320, 10, 531, 268, 44, 459, 120, 41, 537, 59, 339, 599, 368, 445, 568, 282, 51, 167, 600, 153, 101, 320, 115, 519, 154, 26, 388, 357, 238, 
        488, 171, 90, 195, 391, 75, 165, 542, 559, 442, 467, 235, 325, 306, 258, 210, 342, 176, 397, 450, 190, 529, 384, 133, 440, 359, 462, 38, 297, 64, 231, 160, 484, 466, 304, 323, 188, 232, 331, 119, 
        357, 336, 330, 557, 395, 178, 443, 251, 506, 191, 329, 286, 596, 419, 6]
        maxOut = [365, 152, 415, 32, 358, 465, 134, 67, 20, 39, 101, 167, 597, 286, 225, 115, 569, 177, 390, 38, 76, 582, 33, 23, 267, 163, 540, 424, 405, 274, 153, 563, 263, 591, 334, 420, 47, 540, 505, 
        334, 379, 392, 310, 60, 186, 334, 214, 47, 572, 216, 462, 208, 103, 585, 288, 594, 433, 207, 328, 430, 274, 312, 370, 257, 442, 258, 394, 56, 239, 181, 98, 591, 426, 185, 180, 497, 291, 470, 385, 
        232, 209, 78, 134, 230, 232, 430, 167, 288, 525, 85, 216, 568, 352, 17, 585, 375, 308, 541, 435, 75, 166, 179, 520, 455, 122, 264, 528, 96, 219, 494, 204, 534, 353, 557, 553, 400, 193, 318, 579, 563, 401, 236, 85, 578, 223, 552, 119, 217, 193, 585, 202, 523, 304, 415, 498, 462, 494, 162, 416, 271, 548, 433, 60, 98, 135, 481, 440, 517, 393, 145, 531, 122, 490, 52, 427, 330, 549, 435, 182, 77, 381, 66, 202, 54, 336, 190, 34, 368, 476, 413, 388, 256, 19, 505, 292, 542, 221, 171, 176, 557, 124, 174, 111, 85, 27, 85, 270, 88, 579, 428, 504, 318, 53, 366, 527, 398, 128, 587, 58, 303, 521, 546, 503, 148, 364, 353, 546, 17, 57, 133, 202, 471, 90, 552, 148, 179, 566, 9, 235, 409, 134, 578, 579, 74, 277, 67, 289, 206, 133, 550, 526, 217, 418, 380, 180, 362, 288, 432, 400, 410, 79, 10, 114, 374, 189, 96, 198, 84, 211, 581, 401, 166, 88, 181, 407, 479, 537, 194, 234, 263, 406, 15, 331, 90, 107, 326, 417, 102, 370, 188, 92, 113, 5, 123, 526, 199, 176, 272, 482, 178, 560, 508, 171, 25, 282, 526, 465, 580, 598, 528, 433, 369, 559, 95, 476, 544, 247, 440, 276, 525, 26, 113, 296, 186, 517, 109, 217, 360, 468, 530, 161, 526, 173, 59, 233, 304, 88, 175, 315, 503, 497, 14, 186, 191, 568, 385, 579, 520, 474, 422, 86, 299, 477, 69, 175, 229, 148, 389, 65, 236, 79, 68, 137, 266, 171, 555, 381, 268, 532, 52, 67, 430, 58, 75, 240, 159, 397, 281, 156, 234, 391, 159, 393, 69, 
        173, 77, 457, 56, 366, 587, 65, 543, 596, 240, 579, 574, 33, 253, 130, 517, 8, 255, 360, 349, 391, 149, 475, 23, 575, 466, 480, 358, 471, 200, 214, 257, 578, 166, 414, 247, 563, 97, 312, 7, 305, 275, 202, 98, 20, 341, 234, 515, 444, 8, 41, 466, 158, 56, 117, 248]
        origin = 143
        targets = [277, 294, 249, 347, 400, 406, 202, 151, 148, 373, 408, 271, 378, 39, 62, 167, 119, 310, 100, 309, 272, 160, 399, 257, 49, 71, 15, 231, 368, 64, 210, 365, 193, 356, 108, 304, 50, 258, 223, 168, 37, 134, 254, 158, 247, 232, 411, 183, 184, 121, 120, 289, 263, 192, 351, 412, 128, 334, 314, 77, 205, 93, 70, 403, 198, 383, 330, 129, 146, 161, 269, 369, 335, 360, 152, 390, 221, 248, 109, 230, 336, 233, 362, 191, 91, 349, 395, 150, 33, 244, 87, 270, 118, 407, 388, 350, 224, 220, 371, 110, 380, 242, 419, 107, 136, 363, 355, 332, 86, 42, 417, 130, 354, 153, 96, 122, 280, 43, 245, 
        327, 10, 32, 173, 172, 53, 262, 126, 311, 213, 0, 16, 397, 26, 115, 387, 203, 361, 357, 305, 344, 66, 237, 75, 404, 51, 35, 296, 246, 13, 94, 170, 14, 79, 329, 104, 18, 401, 331, 315, 98, 392, 275, 80, 381, 320]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 58)

    def test_341490(self):
        connections = [(32, 77, 363), (13, 77, 452), (74, 82, 602), (51, 1, 867), (77, 38, 879), (17, 61, 776), (5, 22, 410), (9, 7, 331), (16, 30, 829), (43, 13, 843), (44, 66, 513), (65, 85, 633), (18, 82, 705), (26, 15, 469), (91, 30, 550), (62, 29, 110), (17, 0, 619), (1, 35, 124), (69, 64, 945), (47, 16, 319), (44, 54, 523), (42, 50, 833), (65, 26, 403), (7, 44, 609), (26, 31, 550), (11, 52, 570), (81, 55, 350), (36, 59, 93), (31, 63, 254), (27, 12, 93), (31, 82, 749), (86, 7, 259), (43, 25, 883), (12, 59, 434), (52, 2, 339), (70, 32, 290), (59, 71, 906), (32, 70, 270), (59, 11, 690), (47, 38, 617), (63, 18, 555), (59, 39, 291), (0, 5, 106), (41, 23, 501), (46, 85, 166), (64, 14, 118), (1, 58, 902), (16, 41, 607), (87, 93, 792), (23, 20, 800), (61, 55, 693), (35, 76, 198), (43, 45, 809), (38, 63, 110), (60, 38, 753), (72, 45, 350), (80, 49, 557), (93, 30, 994), (46, 73, 722), (60, 51, 314), (9, 22, 610), (57, 92, 462), (33, 26, 849), (2, 61, 580), (73, 59, 556), (34, 77, 365), (51, 74, 467), (6, 57, 852), (25, 92, 94), (19, 37, 392), (4, 70, 944), (23, 13, 970), (73, 2, 534), (53, 89, 515), (93, 52, 81), (93, 61, 547), (83, 23, 745), (6, 26, 946), (2, 1, 735), (91, 93, 768), (79, 9, 753), (48, 25, 971), (64, 57, 947), (0, 23, 570), (32, 10, 940), (13, 58, 246), (82, 86, 219), (5, 76, 847), (80, 1, 701), (53, 26, 580), (61, 45, 894), (46, 15, 230), (42, 67, 419), (24, 26, 172), (1, 16, 909), (43, 81, 772), (30, 66, 446), (66, 25, 206), (12, 83, 660), (68, 89, 786), (93, 10, 904), (93, 2, 573), (27, 41, 208), (50, 60, 624), (40, 69, 902), (43, 73, 194), (58, 10, 740), (2, 53, 866), (7, 46, 871), (64, 41, 230), (79, 61, 902), (20, 14, 533), (17, 80, 845), (29, 5, 455), (47, 86, 483), (64, 31, 869), (10, 25, 991), (6, 0, 486), (38, 11, 829), (71, 6, 541), (40, 58, 962), (88, 64, 651), (72, 55, 110), (22, 55, 119), (11, 22, 403), (39, 61, 491), (84, 89, 437), (28, 7, 532), (29, 12, 478), (38, 49, 849), (19, 31, 757), (80, 23, 391), (49, 20, 643), (3, 30, 704), (61, 7, 542), (55, 93, 757), (78, 76, 707), (64, 6, 241), (86, 58, 379), (79, 86, 341), (80, 47, 229), (24, 3, 214), (20, 66, 292), (27, 10, 637), (35, 49, 179), (59, 54, 891), (59, 14, 199), (14, 51, 709), (46, 61, 777), (68, 27, 677), (80, 41, 560), (11, 30, 763), (2, 85, 847), (37, 22, 596), (73, 46, 246), (72, 82, 379), (90, 10, 959), (86, 57, 748), (41, 5, 773), (25, 40, 296), (41, 92, 875), (24, 32, 871), (43, 55, 112), (0, 30, 422), (36, 43, 484), (20, 3, 622), (45, 82, 797), (92, 48, 252), (12, 8, 257), (82, 87, 763), (54, 9, 514), (5, 41, 342), (18, 73, 765), (17, 54, 790), (36, 50, 77), (39, 0, 710), (85, 0, 913), (15, 79, 518), (8, 22, 781), (93, 26, 966), (45, 66, 910), (67, 14, 875), (46, 41, 86), (54, 57, 621), (89, 3, 206), (75, 1, 986), (54, 81, 441), (84, 58, 974), (92, 30, 548), (93, 82, 955), (75, 54, 174), (43, 61, 841), (28, 13, 993), (23, 67, 590), (66, 33, 440), (32, 48, 479), (21, 87, 300), (22, 51, 475), (93, 39, 157), (86, 72, 378), (14, 18, 273), (64, 27, 742), (29, 88, 308), (83, 25, 294), (29, 22, 436), (54, 49, 573), (82, 39, 370), (27, 45, 353), (10, 17, 744), (63, 24, 843), (43, 7, 680), (24, 72, 993), (84, 30, 377), (69, 45, 440), (32, 2, 585), (87, 1, 570), (22, 74, 253), (21, 64, 346), (77, 50, 437), (45, 79, 923), (85, 62, 166), (86, 60, 516), (38, 3, 847), (29, 24, 234), (3, 55, 381), (76, 89, 814), (85, 45, 943), (77, 78, 526), (28, 68, 409), (13, 63, 565), (52, 29, 262), (43, 18, 371), (52, 23, 246), (56, 14, 703), (45, 44, 337), (62, 41, 745), (78, 74, 638), (13, 76, 839), (74, 8, 285), (89, 30, 993), (12, 46, 848), (39, 92, 790), (35, 58, 647), (15, 31, 374), (78, 5, 840), (23, 90, 825), (66, 93, 123), (38, 67, 577), (10, 15, 715), (18, 81, 732), (42, 47, 769), (15, 33, 374), (65, 88, 895), (62, 68, 463), (82, 89, 268), (28, 86, 529), (65, 63, 765), (69, 68, 611), (7, 92, 471)]
        maxIn = [297, 1357, 1146, 516, 189, 1040, 92, 1123, 1369, 572, 532, 486, 571, 397, 540, 561, 1479, 294, 484, 772, 652, 672, 792, 240, 1437, 1135, 1251, 925, 1027, 1302, 723, 1417, 125, 256, 292, 941, 775, 564, 601, 59, 718, 1058, 369, 552, 564, 199, 1188, 979, 544, 1095, 1366, 672, 595, 535, 1304, 832, 889, 1309, 583, 117, 922, 156, 309, 620, 989, 1480, 447, 901, 1394, 395, 164, 273, 444, 404, 874, 1113, 302, 810, 1031, 1025, 552, 506, 518, 916, 1374, 1239, 470, 1021, 472, 1289, 1307, 467, 52, 1275]
        maxOut = [1145, 1437, 133, 1075, 521, 538, 1335, 1361, 481, 904, 801, 178, 1315, 293, 1474, 287, 704, 1300, 1445, 216, 350, 137, 363, 1076, 777, 1119, 812, 528, 633, 364, 1251, 1370, 1209, 197, 1377, 352, 1303, 748, 1023, 795, 617, 1453, 1331, 538, 1498, 202, 645, 647, 595, 434, 152, 464, 808, 956, 503, 1105, 731, 615, 213, 821, 294, 304, 413, 396, 880, 607, 615, 890, 773, 1316, 1479, 1245, 326, 941, 1019, 1403, 823, 671, 578, 710, 504, 436, 780, 932, 945, 110, 494, 157, 1293, 1051, 130, 509, 988, 1086]
        origin = 41
        targets = [78, 33, 34, 72, 43]
        # my res: 830
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 830) 

    def test_480663(self):
        connections = [(5, 20, 794), (73, 75, 292), (62, 39, 884), (11, 9, 881), (66, 65, 517), (73, 38, 520), (62, 37, 749), (68, 39, 561), (42, 56, 847), (18, 59, 987), (21, 5, 547), (49, 77, 691), (73, 47, 843), (1, 74, 298), (67, 19, 290), (60, 59, 225), (7, 52, 849), (35, 41, 894), (28, 5, 286), (27, 9, 113), (41, 44, 265), (75, 40, 714), (29, 67, 95), (10, 31, 480), (34, 35, 635), (63, 50, 315), (59, 9, 876), (75, 10, 938), (60, 34, 451), (29, 46, 630), (37, 39, 599), (22, 40, 220), (41, 45, 833), (21, 76, 865), (49, 69, 954), (6, 12, 515), (24, 63, 828), (58, 10, 169), (32, 7, 537), (28, 75, 304), (65, 58, 354), (71, 9, 942), (51, 58, 660), (34, 66, 945), (37, 46, 268), (16, 1, 555), (51, 15, 271), (61, 40, 658), (31, 18, 617), (74, 36, 806), (61, 42, 146), (55, 20, 300), (13, 79, 538), (14, 57, 222), (43, 36, 189), (46, 68, 353), (44, 5, 180), (32, 56, 404), (27, 12, 945), (70, 60, 234), (26, 17, 802), (21, 30, 171), (40, 39, 264), (13, 25, 487), (43, 42, 375), (78, 21, 511), (9, 21, 659), (34, 37, 218), (70, 13, 741), (69, 4, 436), (19, 54, 410), (72, 9, 294), (9, 71, 626), (45, 17, 643), (40, 24, 583), (78, 20, 668), (48, 53, 843), (0, 36, 545), (65, 6, 751), (50, 11, 482), (58, 44, 312), (59, 73, 125), (36, 13, 367), (78, 6, 95), (67, 10, 515), (76, 41, 725), (31, 38, 407), (22, 54, 500), (7, 22, 987), (71, 49, 357), (63, 27, 447), (42, 9, 633), (36, 17, 193), (68, 20, 469), (34, 6, 791), (35, 70, 798), (31, 50, 399), (67, 3, 677), (44, 35, 646), (43, 15, 536), (79, 56, 521), (72, 51, 131), (52, 27, 676), (16, 15, 872), (10, 18, 970), (36, 60, 804), (36, 25, 270), (16, 50, 646), (57, 63, 490), (3, 67, 863), (2, 3, 785), (63, 62, 416), (73, 18, 811), (76, 65, 794), (33, 8, 260), (46, 59, 750), (60, 22, 561), (21, 61, 876), (12, 66, 584), (44, 27, 912), (16, 47, 668), (75, 1, 973), (14, 51, 944), (7, 36, 990), (17, 40, 832), (11, 4, 186), (20, 13, 384), (45, 73, 191), (41, 61, 614), (8, 26, 301), (27, 6, 291), (55, 69, 432), (46, 23, 210), (63, 3, 286), (41, 49, 850), (38, 1, 331), (55, 77, 607), (69, 41, 772), (18, 27, 570), (41, 13, 364), (15, 39, 431), (67, 29, 562), (28, 31, 866), (32, 49, 818), (69, 78, 797), (40, 0, 854), (68, 61, 101), (63, 29, 115), (76, 53, 888), (19, 58, 446), (2, 79, 583), (72, 47, 341), (59, 76, 871), (22, 4, 450), (47, 64, 422), (23, 62, 455), (72, 75, 241), (12, 49, 246), (15, 36, 382), (56, 71, 376), (18, 55, 533), (70, 28, 438), (13, 76, 634), (79, 9, 873), (7, 39, 685), (1, 72, 720), (25, 66, 637), (56, 28, 826), (48, 38, 764), (54, 29, 397), (64, 35, 930), (56, 29, 983), (77, 26, 798), (13, 30, 243), (4, 33, 663), (65, 24, 541), (79, 48, 711), (78, 14, 866), (34, 27, 989), (26, 41, 781), (1, 57, 984), (18, 0, 837), (78, 38, 796), (78, 16, 183), (47, 25, 505), (39, 29, 613), (28, 61, 987), (24, 16, 211), (1, 52, 1000), (31, 5, 716), (47, 8, 958), (14, 16, 467), (66, 67, 758), (15, 29, 921), (73, 49, 806), (30, 55, 949), (78, 69, 859), (23, 77, 514), (15, 21, 367), (22, 58, 327), (64, 50, 840), (5, 55, 976), (75, 64, 912), (57, 65, 253), (1, 4, 385), (22, 25, 351), (54, 53, 758), (40, 78, 416), (1, 6, 959), (11, 22, 678), (74, 67, 675), (3, 70, 664), (79, 23, 576), (26, 22, 378), (32, 2, 77), (56, 50, 707), (4, 58, 635), (24, 39, 128), (30, 6, 174), (53, 28, 304), (45, 33, 293), (50, 36, 693), (30, 36, 785), (27, 44, 923), (76, 73, 420), (19, 57, 471), (15, 31, 111), (53, 65, 942), (17, 48, 913), (15, 16, 559)]
        maxIn = [468, 974, 1230, 145, 1419, 177, 1334, 161, 1159, 1282, 1286, 390, 1431, 140, 1423, 924, 1452, 1217, 86, 346, 1125, 160, 585, 174, 905, 972, 983, 181, 175, 272, 663, 703, 1390, 956, 777, 843, 635, 732, 448, 1131, 282, 366, 1192, 419, 411, 1496, 326, 1463, 1059, 1446, 530, 155, 244, 1459, 771, 1183, 547, 611, 285, 52, 522, 1238, 1193, 1395, 84, 1199, 785, 1140, 679, 561, 779, 977, 1346, 1354, 95, 1287, 173, 399, 727, 871]
        maxOut = [893, 1351, 1042, 897, 709, 527, 217, 1495, 121, 1391, 840, 561, 153, 844, 337, 660, 270, 1042, 948, 1312, 1027, 627, 1277, 653, 1024, 139, 1051, 82, 226, 1085, 924, 1227, 434, 302, 923, 868, 806, 477, 680, 1035, 1212, 1250, 954, 578, 215, 200, 77, 1144, 915, 910, 132, 244, 121, 454, 720, 1098, 419, 55, 963, 1212, 371, 1170, 958, 774, 1461, 329, 736, 978, 1402, 785, 125, 838, 241, 881, 761, 1321, 242, 1455, 812, 390]
        origin = 22
        targets = [63, 12, 44]
        # my res: 1265
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 1265)

    def test_970595(self):
        connections = [(280, 101, 271), (727, 355, 242), (311, 715, 301), (700, 413, 489), (40, 413, 234), (548, 478, 333), (330, 249, 90), (174, 20, 77), (441, 550, 159), (362, 367, 386), (311, 223, 476), (538, 239, 242), (635, 158, 379), (737, 215, 422), (434, 18, 104), (322, 74, 75), (720, 135, 192), (661, 206, 273), (77, 679, 182), (198, 575, 105), (723, 107, 208), (223, 533, 242), (216, 14, 386), (150, 336, 413), (234, 56, 268), (424, 234, 475), (363, 403, 313), (386, 35, 120), (211, 372, 306), (542, 6, 475), (60, 414, 172), (575, 709, 118), (67, 539, 478), (526, 34, 156), (572, 283, 302), (418, 410, 103), (456, 30, 292), (600, 678, 413), (561, 690, 273), (557, 393, 81), (536, 696, 322), (186, 266, 479), (685, 3, 354), (453, 64, 489), (425, 235, 417), (456, 147, 175), (372, 533, 358), (50, 583, 405), (147, 44, 400), (78, 317, 133), (291, 444, 456), (465, 330, 483), (274, 394, 106), (288, 274, 250), (68, 316, 241), (187, 46, 127), (138, 126, 449), (93, 543, 194), (648, 18, 136), (455, 537, 478), (500, 22, 80), (102, 40, 175), (87, 607, 158), (330, 530, 238), (268, 355, 445), (549, 381, 294), (721, 406, 344), (522, 143, 400), (587, 188, 347), (645, 641, 327), (91, 627, 101), (693, 556, 125), (699, 237, 312), (362, 40, 391), (129, 52, 461), (90, 391, 450), (417, 257, 134), (143, 583, 107), (555, 726, 355), (461, 341, 96), (574, 393, 444), (605, 251, 83), (143, 734, 425), (541, 737, 124), (549, 503, 441), (140, 497, 309), (478, 615, 227), (286, 730, 100), (239, 441, 265), (694, 551, 162), (476, 51, 93), (657, 600, 249), (14, 40, 129), (612, 518, 477), (235, 98, 143), (668, 445, 183), (555, 187, 428), (349, 126, 307), (552, 642, 107), (465, 367, 378), (215, 711, 485), (452, 583, 461), (642, 612, 132), (695, 28, 354), (470, 11, 244), (93, 626, 434), (90, 585, 293), (317, 394, 138), (548, 186, 187), (561, 621, 127), (43, 187, 408), (393, 497, 150), (362, 710, 342), (337, 214, 437), (203, 245, 178), (100, 73, 273), (612, 1, 488), (430, 447, 363), (692, 596, 113), (605, 376, 320), (554, 513, 256), (379, 657, 164), (80, 687, 270), (522, 686, 252), (621, 635, 323), (507, 678, 219), (46, 92, 482), (620, 205, 478), (343, 465, 218), (498, 272, 476), (479, 250, 196), (732, 467, 178), (360, 401, 209), (484, 629, 474), (175, 530, 212), (237, 557, 254), (705, 127, 329), (19, 638, 235), (363, 636, 338), (738, 508, 415), (601, 586, 178), (615, 7, 481), (27, 186, 267), (349, 136, 306), (306, 605, 91), (707, 17, 398), (0, 218, 290), (154, 118, 363), (281, 635, 437), (541, 121, 111), (501, 68, 419), (303, 547, 89), (104, 284, 145), (211, 614, 336), (725, 694, 153), (510, 394, 398), (242, 579, 187), (302, 285, 473), (436, 240, 332), (21, 202, 227), (348, 326, 354), (629, 659, 131), (278, 662, 374), (153, 558, 257), (528, 586, 260), (679, 517, 440), (658, 641, 301), (478, 274, 418), (371, 715, 104), (133, 382, 383), (544, 685, 125), (490, 557, 279), (636, 463, 208), (624, 645, 117), (403, 229, 315), (693, 145, 256), (197, 281, 300), (638, 337, 247), (136, 168, 160), (327, 306, 90), (306, 682, 315), (452, 89, 293), (406, 376, 214), (625, 636, 178), (124, 530, 179), (387, 236, 287), (553, 184, 355), (70, 313, 88), (383, 175, 199), (140, 195, 463), (436, 572, 145), (521, 295, 123), (232, 702, 488), (193, 592, 409), (694, 533, 224), (524, 450, 286), (213, 3, 189), (411, 295, 315), (566, 539, 451), (171, 649, 133), (515, 622, 440), (363, 612, 259), (430, 375, 221), (146, 1, 266), (477, 595, 191), (264, 137, 140), (301, 273, 216), (429, 210, 358), (254, 729, 206), (160, 530, 137), (619, 208, 369), (197, 605, 289), (390, 165, 321), (446, 391, 261), (494, 149, 403), (125, 134, 361), (206, 147, 272), (516, 477, 491), (671, 116, 120), (394, 73, 495), (14, 608, 324), (148, 77, 117), (505, 290, 157), (192, 710, 110), (596, 333, 79), (98, 555, 394), (407, 388, 370), (595, 161, 351), (253, 35, 171), (390, 520, 405), (265, 560, 160), (23, 157, 86), (191, 264, 320), (128, 593, 117), (157, 336, 420), (608, 104, 439), (134, 193, 81), (283, 393, 337), (517, 54, 249), (360, 385, 376), (195, 701, 286), (374, 93, 328), (714, 660, 275), (576, 672, 241), (544, 555, 293), (442, 127, 344), (54, 341, 240), (654, 158, 117), (26, 544, 491), (537, 708, 278), (483, 151, 119), (532, 476, 427), (409, 210, 334), (553, 424, 206), (580, 260, 323), (179, 276, 348), (93, 342, 354), (106, 482, 148), (532, 463, 493), (640, 113, 399), (107, 181, 268), (141, 444, 331), (114, 307, 458), (95, 271, 323), (695, 720, 297), (664, 257, 287), (348, 694, 331), (382, 346, 154), (156, 625, 446), (195, 534, 330), (669, 324, 398), (612, 35, 80), (39, 579, 148), (309, 474, 381), (544, 132, 168), (621, 337, 80), (121, 202, 424), (102, 516, 241), (135, 606, 407), (185, 76, 428), (211, 195, 198), (270, 216, 200), (474, 585, 215), (570, 623, 75), (247, 369, 96), (448, 63, 469), (736, 414, 345), (9, 144, 495), (692, 738, 177), (152, 11, 354), (357, 176, 484), (709, 7, 493), (90, 423, 296), (347, 440, 363), (309, 173, 245), (166, 62, 353), (301, 343, 85), (349, 401, 463), (306, 679, 92), (275, 484, 311), (296, 338, 133), (40, 209, 122), (227, 441, 240), (143, 739, 433), (627, 279, 310), (486, 624, 431), (349, 297, 491), (29, 663, 193), (87, 599, 497), (266, 367, 176), (377, 73, 328), (254, 175, 433), (428, 152, 109), (669, 194, 265), (48, 634, 284), (430, 75, 449), (432, 88, 238), (293, 269, 422), (604, 275, 406), (105, 36, 136), (603, 385, 389), (727, 465, 298), (1, 356, 235), (497, 117, 407), (731, 566, 255), (646, 384, 400), (665, 649, 178), (687, 236, 299), (367, 212, 161), (473, 296, 471), (281, 378, 496), (654, 124, 194), (18, 722, 325), (227, 670, 449), (194, 505, 252), (367, 624, 105), (315, 254, 329), (86, 204, 329), (604, 332, 387), (385, 727, 447), (423, 218, 78), (353, 664, 346), (660, 216, 360), (641, 506, 345), (463, 414, 481), (71, 685, 425), (337, 153, 356), (730, 171, 490), (111, 352, 310), (500, 360, 166), (477, 520, 249), (707, 88, 294), (515, 382, 461), (130, 131, 312), (413, 522, 438), (579, 552, 316), (191, 593, 197), (106, 608, 219), (91, 166, 211), (411, 180, 272), (538, 209, 301), (671, 629, 464), (101, 465, 153), (729, 445, 357), (454, 90, 496), (60, 395, 347), (326, 614, 420), (611, 703, 93), (132, 232, 168), (51, 521, 156), (602, 419, 457), (66, 148, 261), (324, 702, 131), (429, 286, 440), (375, 709, 239), (235, 65, 285), (224, 112, 203), (534, 61, 88), (642, 433, 449), (8, 733, 186), (459, 446, 269), (570, 675, 233), (101, 246, 379), (355, 376, 443), (546, 66, 270), (54, 315, 190), (226, 220, 318), (447, 590, 215), (624, 706, 319), (686, 198, 173), (587, 116, 475), (467, 547, 254), (19, 571, 259), (323, 4, 149), (734, 31, 254), (603, 371, 216), (286, 334, 348), (115, 28, 253), (509, 259, 283), (638, 11, 299), (201, 140, 420), (96, 441, 446), (240, 647, 141), (236, 727, 258), (598, 494, 91), (692, 573, 77), (115, 634, 328), (700, 44, 384), (723, 361, 375), (319, 501, 325), (510, 410, 457), (696, 614, 279), (388, 377, 164), (209, 467, 159), (558, 45, 119), (598, 599, 378), (444, 457, 134), (166, 690, 297), (496, 167, 458), (163, 487, 323), (102, 305, 145), (534, 163, 378), (451, 448, 217), (396, 445, 317), (397, 448, 267), (1, 13, 352), (171, 393, 249), (568, 444, 285), (514, 590, 413), (712, 682, 427), (470, 145, 248), (437, 549, 208), (395, 523, 304), (354, 107, 356), (349, 488, 174), (165, 584, 203), (11, 442, 337), (363, 174, 75), (132, 197, 308), (28, 490, 385), (708, 9, 164), (614, 25, 88), (174, 225, 252), (438, 591, 494), (722, 659, 77), (43, 699, 363), (461, 302, 414), (499, 737, 259), (183, 590, 308), (407, 452, 204), (98, 61, 495), (366, 287, 426), (272, 21, 199), (353, 330, 172), (281, 73, 352), (405, 576, 327), (377, 80, 348), (492, 7, 225), (249, 256, 312), (313, 486, 361), (414, 680, 113), (588, 358, 111), (439, 261, 300), (393, 171, 476), (116, 154, 315), (399, 383, 379), (698, 220, 214), (323, 177, 211), (679, 658, 183), (585, 513, 253), (449, 577, 178), (719, 360, 89), (512, 602, 408), (599, 413, 182), (521, 383, 291), (238, 647, 449), (602, 178, 240), (397, 203, 449), (456, 211, 338), (492, 619, 316), (500, 38, 347), (479, 626, 492), (679, 202, 88), (737, 682, 314), (231, 212, 245), (621, 303, 160), (385, 658, 435), (81, 264, 445), (130, 371, 382), (542, 508, 469), (532, 128, 172), (451, 304, 221), (453, 100, 483), (7, 499, 278), (467, 56, 128), (155, 375, 406), (599, 666, 483), (594, 403, 465), (18, 598, 419), (83, 381, 471), (560, 139, 462), (27, 664, 495), (193, 133, 300), (202, 158, 171), (243, 366, 90), (380, 94, 450), (614, 496, 137), (627, 626, 375), (487, 216, 439), (649, 633, 147), (443, 78, 246), (364, 323, 361), (542, 550, 358), (417, 447, 293), (596, 367, 391), (66, 631, 381), (134, 82, 76), (203, 414, 194), (184, 256, 362), (176, 526, 227), (3, 514, 357), (609, 67, 351), (460, 66, 477), (31, 448, 259), (374, 554, 76), (317, 7, 366), (359, 159, 322), (670, 317, 353), (103, 480, 77), (345, 591, 264), (562, 446, 243), (423, 531, 490), (307, 425, 198), (200, 412, 412), (542, 602, 489), (676, 673, 387), (162, 514, 134), (288, 531, 183), (501, 546, 475), (140, 52, 78), (603, 451, 476), (473, 309, 138), (106, 499, 148), (594, 343, 427), (621, 559, 364), (437, 67, 130), (586, 459, 383), (121, 19, 134), (502, 518, 356), (721, 678, 406), (704, 474, 141), (639, 656, 298), (407, 457, 128), (292, 651, 213), (501, 205, 447), (437, 371, 132), (503, 533, 75), (663, 564, 386), (181, 139, 145), (344, 688, 293), (377, 499, 141), (26, 170, 498), (661, 213, 315), (524, 268, 211), (562, 111, 410), (440, 347, 242), (90, 549, 81), (238, 600, 98), (429, 695, 295), (202, 25, 450), (528, 511, 139), (716, 459, 121), (48, 323, 441), (526, 376, 151), (283, 103, 162), (89, 106, 482), (3, 497, 137), (324, 348, 494), (422, 498, 346), (520, 208, 173), (242, 473, 492), (388, 453, 103), (631, 113, 181), (59, 663, 88), (165, 494, 218), (319, 549, 201), (735, 644, 401), (736, 116, 454), (423, 321, 104), (247, 267, 382), (489, 547, 465), (657, 723, 489), (712, 262, 459), (323, 616, 405), (481, 584, 109), (507, 612, 286), (585, 300, 341), (542, 226, 107), (612, 84, 125), (274, 247, 282), (32, 569, 242), (537, 457, 332), (97, 598, 410), (472, 231, 373), (336, 370, 212), (125, 16, 391), (265, 332, 282), (573, 233, 368), (389, 478, 365), (82, 223, 405), (504, 309, 224), (426, 37, 199), (180, 473, 381), (692, 41, 253), (255, 299, 296), (124, 285, 262), (518, 503, 186), (281, 79, 290), (561, 682, 392), (325, 390, 436), (77, 593, 274), (39, 590, 86), (385, 628, 379), (535, 154, 275), (129, 584, 468), (567, 33, 462), (42, 568, 201), (267, 422, 470), (129, 39, 488), (117, 12, 287), (511, 221, 161), (647, 209, 283), (62, 94, 319), (616, 364, 205), (403, 482, 350), (9, 634, 431), (560, 359, 209), (482, 299, 474), (475, 406, 319), (555, 408, 277), (13, 325, 464), (463, 328, 96), (661, 20, 399), (727, 237, 471), (135, 1, 314), (34, 466, 236), (706, 6, 284), (449, 401, 390), (68, 645, 423), (617, 612, 131), (129, 438, 126), (627, 581, 275), (215, 437, 211), (478, 473, 145), (350, 385, 445), (379, 218, 376), (148, 736, 81), (524, 559, 493), (269, 405, 450), (101, 706, 190), (22, 410, 384), (669, 252, 166), (371, 479, 254), (382, 461, 279), (170, 12, 487), (14, 682, 128), (691, 665, 161), (173, 684, 122), (374, 473, 90), (4, 709, 156), (341, 38, 155), (268, 612, 351), (326, 603, 443), (365, 526, 144), (317, 386, 401), (162, 529, 494), (116, 85, 172), (721, 424, 493), (530, 120, 241), (138, 466, 123), (722, 340, 438), (35, 291, 304), (216, 346, 155), (324, 149, 130), (307, 38, 142), (452, 340, 188), (267, 717, 256), (574, 366, 176), (261, 456, 174), (449, 241, 185), (244, 75, 325), (328, 104, 93), (465, 193, 470), (80, 631, 456), (613, 431, 369), (478, 98, 181), (635, 6, 336), (64, 443, 253), (49, 439, 155), (518, 656, 355), (589, 638, 496), (633, 84, 262), (249, 343, 394), (660, 423, 325), (191, 647, 213), (373, 141, 207), (406, 118, 353), (617, 611, 184), (572, 202, 283), (84, 11, 448), (328, 508, 298), (397, 458, 228), (454, 349, 387), (72, 543, 209), (599, 291, 90), (630, 126, 420), (400, 685, 416), (220, 198, 202), (733, 223, 318), (110, 293, 137), (537, 701, 394), (383, 410, 116), (31, 101, 481), (614, 352, 165), (146, 29, 94), (425, 357, 375), (611, 258, 425), (354, 524, 97), (491, 478, 366), (654, 140, 80), (132, 626, 103), (122, 138, 446), (265, 657, 491), (723, 672, 75), (718, 399, 272), (517, 35, 369), (655, 50, 420), (730, 656, 181), (387, 224, 459), (373, 606, 284), (628, 13, 342), (515, 52, 428), (497, 602, 335), (123, 477, 287), (330, 79, 420), (259, 61, 319), (324, 86, 437), (30, 513, 349), (34, 681, 155), (28, 98, 307), (647, 143, 421), (161, 545, 195), (26, 452, 168), (454, 649, 396), (585, 178, 476), (343, 581, 386), (383, 732, 384), (250, 109, 121), (436, 58, 155), (293, 342, 447), (57, 528, 115), (707, 356, 251), (241, 132, 295), (139, 262, 284), (286, 486, 346), (701, 188, 354), (8, 243, 195), (586, 219, 480), (620, 186, 457), (431, 503, 488), (398, 700, 415), (530, 75, 165), (170, 667, 300), (351, 72, 298), (220, 587, 441), (534, 547, 269), (440, 53, 246), (305, 604, 79), (550, 317, 224), (131, 248, 109), (193, 341, 276), (392, 713, 128), (719, 655, 191), (160, 202, 130), (324, 730, 107), (243, 474, 208), (456, 7, 82), (487, 682, 185), (252, 306, 117), (644, 446, 474), (6, 456, 467), (410, 120, 437), (240, 144, 482), (30, 260, 145), (9, 392, 240), (554, 701, 276), (107, 210, 441), (686, 400, 451), (602, 405, 472), (218, 44, 141), (244, 481, 337), (294, 34, 276), (324, 257, 188), (617, 183, 227), (183, 710, 189), (3, 571, 393), (538, 395, 426), (469, 209, 201), (281, 4, 297), (503, 169, 226), (670, 94, 106), (342, 119, 163), (556, 642, 484), (186, 597, 394), (615, 362, 148), (393, 486, 496), (581, 449, 229), (447, 450, 499), (481, 674, 224), (591, 59, 377), (412, 648, 298), (386, 413, 496), (100, 316, 386), (609, 542, 118), (311, 318, 313), (617, 355, 311), (367, 101, 197), (619, 707, 296), (184, 127, 365), (501, 505, 241), (365, 421, 331), (35, 119, 285), (76, 344, 317), (632, 499, 395), (265, 678, 396), (672, 633, 125), (295, 551, 424), (75, 668, 410), (337, 348, 90), (73, 44, 410), (318, 41, 315), (281, 165, 228), (356, 529, 171), (618, 47, 75), (349, 284, 438), (731, 681, 117), (109, 295, 262), (281, 396, 389), (261, 385, 323), (373, 259, 287), (416, 440, 331), (93, 285, 244), (364, 664, 470), (583, 325, 82), (309, 40, 248), (257, 454, 368), (257, 466, 342), (95, 421, 246), (179, 355, 247), (519, 357, 298), (592, 587, 391), (367, 403, 167), (671, 439, 207), (585, 318, 301), (154, 216, 430), (205, 410, 347), (183, 585, 143), (5, 727, 278), (370, 457, 247), (246, 469, 81), (735, 505, 270), (150, 210, 222), (577, 5, 500), (23, 5, 209), (465, 454, 81), (493, 636, 395), (109, 711, 181), (17, 664, 443), (252, 721, 471), (99, 287, 372), (694, 34, 217), (319, 669, 478), (628, 562, 263), (160, 452, 416), (452, 574, 312), (224, 281, 121), (400, 447, 195), (718, 204, 306), (267, 480, 386), (498, 32, 337), (707, 189, 455), (232, 393, 461), (494, 441, 135), (709, 590, 234), (602, 247, 110), (420, 72, 398), (88, 52, 492), (80, 162, 200), (90, 642, 89), (465, 627, 130), (484, 468, 336), (547, 385, 222), (725, 739, 142), (15, 203, 441), (645, 513, 91), (24, 209, 479), (716, 523, 151), (288, 691, 487), (471, 569, 468), (548, 357, 90), (271, 379, 304), (366, 407, 89), (410, 173, 267), (467, 492, 343), (365, 537, 87), (385, 271, 290), (5, 363, 423), (710, 446, 143), (678, 315, 384), (74, 719, 421), (143, 436, 86), (496, 220, 490), (609, 355, 403), (731, 671, 286), (47, 46, 245), (305, 599, 88), (326, 573, 241), (200, 132, 385), (287, 120, 317), (271, 428, 281), (410, 673, 180), (108, 280, 124), (575, 82, 381), (286, 625, 112), (254, 421, 301), (210, 477, 443), (628, 368, 347), (425, 203, 130), (506, 32, 425), (79, 670, 294), (477, 737, 342), (410, 291, 263), (363, 513, 204), (330, 662, 283), (308, 327, 448), (131, 265, 407), (369, 554, 467), (431, 317, 234), (518, 483, 137), (58, 28, 127), (581, 291, 369), (681, 279, 400), (599, 437, 258), (597, 109, 401), (563, 519, 287), (392, 519, 471), (370, 265, 332), (219, 65, 256), (303, 241, 99), (159, 725, 356), (411, 124, 356), (635, 631, 134), (191, 497, 244), (333, 461, 351), (638, 341, 441), (639, 329, 82), (693, 56, 487), (650, 71, 275), (739, 669, 272), (73, 393, 301), (738, 557, 99), (382, 116, 312), (450, 8, 473), (349, 97, 435), (355, 169, 358), (271, 656, 301), (295, 732, 438), (88, 688, 363), (347, 3, 336), (403, 644, 350), (353, 366, 464), (287, 413, 323), (515, 419, 421), (198, 98, 441), (298, 162, 202), (412, 393, 317), (466, 118, 124), (693, 722, 469), (487, 385, 264), (164, 258, 96), (521, 451, 307), (507, 448, 321), (27, 35, 313), (634, 462, 450), (187, 40, 486), (434, 426, 344), (258, 238, 368), (71, 566, 438), (401, 133, 227), (579, 69, 425), (130, 493, 396), (26, 82, 276), (562, 500, 491), (580, 460, 191), (404, 244, 296), (655, 373, 198), (17, 288, 424), (392, 314, 317), (19, 24, 226), (452, 335, 262), (337, 524, 152), (237, 716, 88), (578, 358, 415), (481, 271, 322), (74, 298, 94), (565, 252, 218), (714, 725, 155), (56, 521, 199), (592, 596, 191), (491, 268, 359), (171, 158, 181), (513, 562, 218), (701, 289, 232), (32, 65, 186), (389, 98, 259), (139, 494, 475), (594, 230, 274), (603, 431, 222), (712, 672, 477), (547, 673, 183), (401, 257, 270), (507, 325, 84), (194, 696, 324), (702, 493, 115), (523, 309, 148), (265, 435, 186), (146, 704, 336), (451, 173, 377), (194, 686, 130), (544, 120, 423), (494, 661, 82), (719, 201, 304), (286, 343, 244), (273, 124, 343), (638, 491, 375), (343, 143, 335), (731, 636, 417), (335, 433, 134), (483, 14, 141), (442, 360, 343), (161, 257, 125), (430, 10, 126), (553, 601, 219), (279, 545, 270), (151, 459, 333), (575, 472, 161), (188, 387, 367), (584, 268, 289), (176, 598, 483), (488, 613, 230), (483, 396, 179), (19, 303, 184), (460, 171, 123), (329, 453, 293), (492, 415, 415), (516, 526, 454), (628, 242, 359), (296, 134, 303), (46, 332, 114), (236, 503, 109), (534, 177, 474), (536, 599, 295), (520, 9, 217), (351, 406, 247), (180, 62, 156), (314, 297, 366), (96, 374, 482), (688, 737, 221), (319, 579, 254), (474, 115, 99), (683, 144, 211), (691, 711, 168), (453, 311, 357), (635, 431, 133), (545, 108, 286), (123, 371, 206), (244, 417, 469), (729, 142, 279), (122, 594, 110), (238, 86, 144), (192, 303, 471), (233, 620, 141), (480, 23, 215), (649, 187, 462), (229, 26, 227), (140, 164, 378), (614, 119, 106), (719, 80, 148), (162, 83, 155), (125, 561, 481), (684, 284, 251), (318, 432, 233), (288, 240, 364), (691, 674, 222), (380, 379, 346), (387, 729, 244), (148, 132, 365), (465, 611, 200), (735, 330, 473), (375, 282, 360), (378, 76, 191), (312, 220, 328), (270, 168, 459), (335, 53, 212), (727, 364, 452), (279, 509, 338), (365, 94, 233), (312, 485, 253), (206, 169, 342), (84, 337, 473), (421, 62, 348), (323, 24, 495), (572, 652, 145), (288, 170, 161), (658, 107, 252), (555, 430, 469), (514, 389, 262), (706, 431, 156), (38, 98, 148), (121, 66, 309), (659, 557, 191), (3, 592, 497), (15, 574, 467), (368, 496, 210), (398, 670, 414), (237, 193, 135), (366, 184, 396), (69, 690, 275), (396, 380, 291), (707, 1, 346), (272, 281, 141), (735, 33, 227), (268, 17, 454), (304, 305, 454), (445, 310, 248), (673, 355, 337), (256, 688, 146), (438, 688, 494), (564, 137, 412), (252, 706, 375), (473, 683, 420), (68, 707, 481), (228, 215, 460), (87, 422, 382), (431, 611, 493), (123, 301, 245), (139, 151, 309), (569, 628, 441), (578, 291, 485), (181, 507, 384), (4, 498, 492), (682, 722, 173), (282, 621, 256), (119, 168, 341), (693, 153, 498), (581, 373, 256), (531, 398, 179), (55, 621, 205), (512, 386, 320), (41, 389, 477), (668, 23, 458), (201, 341, 266), (308, 494, 495), (139, 545, 241), (638, 509, 331), (733, 677, 276), (358, 675, 448), (472, 491, 284), (685, 386, 221), (293, 507, 405), (67, 588, 478), (192, 194, 374), (43, 340, 240), (459, 717, 331), (515, 623, 149), (656, 395, 347), (324, 375, 323), (417, 523, 378), (312, 533, 284), (31, 61, 312), (474, 451, 159), (337, 212, 332), (586, 529, 188), (433, 435, 274), (277, 280, 210), (176, 497, 259), (340, 353, 164), (618, 158, 108), (234, 578, 423), (427, 695, 415), (446, 685, 335), (117, 49, 449), (137, 263, 472), (157, 522, 318), (645, 19, 410), (721, 706, 473), (722, 33, 289), (112, 731, 201), (28, 206, 117), (528, 710, 281), (92, 638, 301), (318, 321, 391), (450, 151, 226), (119, 45, 247), (662, 639, 95), (345, 540, 308), (92, 224, 283), (521, 529, 304), (403, 599, 132), (23, 712, 497), (78, 561, 222), (587, 531, 114), (421, 184, 300), (555, 440, 360), (304, 174, 217), (702, 584, 456), (117, 35, 263), (93, 493, 151), (349, 528, 304), (334, 396, 286), (608, 269, 255), (358, 82, 441), (493, 108, 441), (34, 731, 81), (257, 354, 79), (73, 368, 155), (720, 219, 98), (654, 48, 372), (187, 560, 162), (64, 45, 330), (219, 22, 326), (423, 239, 269), (455, 315, 99), (87, 473, 417), (709, 214, 232), (490, 545, 188), (353, 15, 217), (394, 96, 205), (27, 648, 302), (279, 202, 382), (627, 107, 348), (556, 417, 378), (164, 562, 189), (159, 92, 102), (49, 185, 398), (731, 729, 192), (241, 723, 87), (604, 431, 390), (582, 391, 323), (626, 502, 444), (46, 162, 298), (726, 281, 481), (111, 459, 317), (607, 180, 459), (595, 488, 328), (185, 295, 401), (149, 388, 439), (684, 287, 386), (383, 668, 329), (318, 696, 137), (678, 702, 401), (525, 255, 369), (697, 1, 95), (342, 92, 459), (500, 99, 420), (402, 477, 272), (483, 443, 103), (175, 307, 120), (581, 230, 318), (637, 68, 94), (320, 561, 355), (624, 585, 341), (668, 205, 280), (177, 134, 406), (430, 556, 493), (178, 377, 361), (477, 231, 291), (276, 365, 300), (384, 153, 498), (666, 454, 353), (90, 247, 84), (649, 605, 136), (496, 77, 203), (598, 733, 276), (313, 276, 442), (260, 723, 96), (126, 331, 236), (456, 728, 254), (257, 54, 410), (711, 180, 426), (703, 466, 361), (729, 610, 341), (56, 95, 123), (42, 314, 331), (285, 653, 171), (55, 16, 214), (680, 705, 297), (367, 406, 148), (258, 67, 410), (27, 682, 313), (238, 455, 312), (715, 596, 431), (606, 736, 214), (260, 426, 111), (547, 18, 284), (497, 584, 445), (321, 276, 82), (389, 195, 181), (565, 322, 201), (245, 511, 294), (640, 364, 93), (463, 574, 363), (287, 312, 401), (504, 508, 357), (663, 95, 252), (147, 553, 346), (563, 607, 458), (602, 20, 367), (673, 452, 335), (674, 600, 374), (503, 240, 432), (336, 516, 369), (44, 715, 379), (240, 10, 404), (590, 558, 239), (84, 680, 275), (212, 596, 394), (178, 64, 372), (576, 79, 374), (96, 526, 321), (578, 98, 299), (373, 358, 398), (157, 675, 500), (463, 29, 239), (264, 442, 348), (556, 190, 326), (636, 481, 220), (555, 153, 383), (457, 248, 212), (52, 131, 297), (259, 215, 370), (720, 706, 184), (598, 197, 135), (441, 733, 483), (538, 269, 473), (398, 195, 343), (602, 701, 328), (5, 437, 199), (133, 227, 323), (681, 506, 298), (380, 468, 437), (17, 414, 400), (363, 234, 415), (714, 23, 193), (734, 431, 81), (451, 305, 462), (293, 497, 313), (184, 697, 339), (24, 377, 303), (86, 191, 381), (669, 527, 208), (568, 629, 332), (388, 395, 335), (607, 724, 225), (242, 498, 313), (77, 449, 309), (351, 297, 372), (269, 554, 352), (103, 302, 454), (332, 714, 132), (306, 596, 327), (247, 70, 419), (582, 53, 151), (60, 204, 277), (654, 90, 84), (245, 182, 109), (212, 694, 240), (104, 60, 84), (540, 167, 85), (408, 438, 153), (707, 391, 322), (569, 325, 109), (678, 137, 367), (69, 125, 436), (34, 693, 178), (375, 510, 394), (715, 196, 487), (316, 434, 376), (20, 629, 182), (356, 184, 259), (244, 358, 451), (531, 681, 465), (681, 26, 497), (39, 231, 470), (42, 281, 345), (211, 32, 157), (433, 737, 123), (6, 583, 240), (732, 336, 358), (32, 449, 355), (171, 634, 433), (510, 599, 486), (285, 307, 319), (127, 631, 111), (739, 53, 281), (313, 351, 174), (617, 649, 134), (546, 226, 399), (567, 528, 497), (355, 268, 492), (491, 728, 114), (550, 169, 444), (52, 561, 329), (212, 533, 300), (710, 713, 108), (122, 149, 443), (732, 216, 377), (214, 387, 423), (360, 305, 202), (386, 133, 174), (387, 350, 257), (40, 500, 251), (118, 724, 236), (54, 185, 107), (611, 641, 409), (182, 119, 360), (302, 139, 424), (202, 177, 222), (290, 632, 146), (382, 589, 256), (47, 22, 448), (474, 284, 217), (21, 716, 373), (377, 369, 465), (461, 379, 159), (273, 234, 244), (296, 6, 441), (155, 668, 436), (326, 693, 308), (251, 443, 182), (277, 519, 138), (359, 35, 468), (268, 389, 479), (700, 209, 334), (521, 45, 426), (654, 275, 120), (386, 28, 129), (455, 179, 253), (610, 56, 138), (55, 171, 446), (136, 575, 94), (167, 372, 477), (211, 174, 375), (18, 585, 458), (611, 74, 159), (640, 429, 166), (321, 291, 420), (658, 144, 215), (158, 54, 185), (146, 426, 484), (145, 442, 318), (361, 158, 250), (713, 558, 472), (339, 327, 177), (219, 511, 424), (323, 540, 169), (521, 394, 472), (537, 511, 126), (133, 310, 180), (727, 483, 309), (360, 613, 416), (99, 717, 177), (186, 134, 493), (252, 149, 466), (349, 318, 140), (264, 412, 269), (465, 634, 125), (590, 170, 488), (23, 205, 231), (460, 33, 458), (582, 636, 353), (495, 69, 187), (699, 728, 270), (589, 547, 178), (16, 576, 209), (247, 638, 349), (705, 88, 136), (191, 572, 132), (430, 489, 252), (161, 240, 313), (154, 637, 84), (354, 332, 213), (472, 43, 197), (716, 547, 235), (434, 340, 158), (576, 68, 317), (149, 130, 114), (707, 667, 193), (29, 88, 198), (479, 423, 303), (222, 167, 448), (225, 722, 174), (61, 23, 458), (31, 81, 479), (504, 64, 188), (230, 243, 458), (564, 417, 223), (517, 135, 284), (239, 360, 362), (577, 296, 389), (728, 402, 365), (160, 30, 247), (303, 38, 392), (682, 593, 225), (735, 625, 160), (407, 259, 158), (481, 487, 92), (409, 3, 374), (651, 78, 174), (362, 391, 495), (24, 582, 243), (399, 401, 252), (720, 226, 471), (470, 541, 458), (4, 143, 466), (107, 172, 229), (483, 690, 300), (527, 687, 318), (551, 52, 295), (31, 688, 82), (636, 108, 425), (371, 340, 343), (574, 529, 250), (74, 654, 145), (172, 432, 366), (626, 23, 392), (441, 248, 102), (302, 442, 200), (679, 173, 294), (137, 239, 424), (57, 618, 367), (367, 326, 94), (558, 611, 80), (694, 362, 437), (389, 361, 491), (619, 448, 409), (291, 546, 363), (682, 319, 228), (65, 241, 399), (457, 566, 456), (285, 574, 118), (219, 241, 181), (670, 217, 378), (325, 253, 324), (668, 139, 138), (100, 584, 366), (518, 571, 214), (137, 255, 404), (336, 479, 277), (391, 526, 246), (351, 138, 421), (253, 228, 401), (335, 600, 213), (110, 596, 185), (406, 515, 301), (217, 456, 255), (508, 400, 349), (65, 280, 246), (332, 173, 265), (666, 84, 294), (692, 263, 115), (87, 222, 99), (207, 41, 173), (330, 230, 249), (262, 122, 197), (655, 612, 85), (690, 377, 489), (372, 575, 191), (524, 595, 453), (600, 57, 203), (485, 588, 380), (605, 234, 154), (499, 474, 108), (490, 75, 246), (85, 242, 205), (251, 439, 384), (470, 552, 192), (623, 20, 231), (69, 99, 233), (192, 403, 110), (185, 689, 192), (389, 524, 387), (207, 645, 445), (223, 519, 192), (340, 491, 398), (76, 188, 126), (45, 243, 191), (222, 16, 426), (348, 544, 337), (496, 84, 287), (217, 335, 207), (504, 489, 182), (557, 532, 125), (331, 242, 409), (11, 326, 133), (714, 97, 355), (477, 485, 188), (297, 233, 373), (322, 148, 116), (692, 85, 207), (173, 211, 176), (732, 227, 385), (452, 507, 338), (315, 120, 496), (381, 43, 306), (691, 130, 389), (725, 647, 219), (446, 591, 75), (305, 707, 367), (102, 566, 363), (209, 84, 262), (294, 193, 460), (436, 723, 75), (411, 729, 188), (673, 216, 283), (579, 3, 304), (426, 304, 282), (482, 316, 410), (512, 546, 447), (242, 491, 77), (629, 324, 144), (675, 56, 409), (630, 713, 482), (649, 678, 148), (519, 531, 369), (147, 245, 131), (185, 641, 134), (471, 267, 331), (708, 434, 75), (32, 698, 476), (341, 314, 417), (677, 658, 98), (196, 273, 183), (338, 83, 381), (345, 157, 295), (402, 220, 121), (39, 709, 307), (9, 7, 417), (441, 708, 355), (526, 382, 328), (12, 129, 323), (338, 318, 283), (673, 179, 113), (320, 216, 499), (33, 351, 169), (664, 267, 120), (734, 400, 282), (217, 674, 445), (208, 253, 228), (573, 663, 306), (0, 378, 142), (196, 596, 320), (690, 703, 96), (688, 493, 225), (486, 118, 307), (25, 212, 342), (266, 325, 107), (381, 651, 403), (707, 202, 459), (304, 32, 382), (323, 598, 417), (332, 196, 215), (607, 669, 334), (576, 74, 317), (729, 328, 96), (210, 502, 179), (584, 457, 453), (565, 719, 80), (627, 171, 152), (710, 362, 471), (379, 693, 344), (335, 563, 154), (738, 542, 428), (669, 692, 176), (510, 375, 257), (520, 602, 466), (706, 218, 292), (144, 112, 85), (306, 492, 171), (579, 370, 461), (256, 577, 108), (357, 394, 468), (35, 469, 422), (113, 243, 288), (35, 192, 150), (132, 150, 129), (388, 151, 369), (509, 656, 423), (489, 194, 421), (114, 464, 180), (723, 736, 231), (342, 643, 201), (243, 161, 99), (190, 659, 455), (683, 548, 264), (270, 562, 347), (147, 329, 264), (125, 82, 294), (346, 67, 324), (258, 313, 478), (680, 474, 440), (693, 511, 450), (303, 494, 192), (115, 148, 349), (428, 327, 316), (707, 425, 221), (340, 267, 98), (1, 455, 82), (722, 98, 356), (31, 589, 182), (475, 602, 332), (224, 722, 404), (315, 186, 179), (167, 609, 372), (143, 557, 424), (158, 299, 430), (313, 453, 122), (77, 574, 483), (80, 310, 230), (451, 373, 101), (669, 618, 209), (609, 579, 451), (737, 219, 486), (379, 8, 110), (448, 593, 408), (318, 247, 421), (38, 562, 481), (357, 435, 189), (470, 313, 384), (307, 97, 209), (731, 706, 211), (98, 460, 379), (612, 130, 212), (537, 482, 396), (718, 578, 391), (217, 612, 316), (428, 65, 144), (616, 227, 315), (474, 562, 392), (400, 102, 184), (491, 563, 477), (241, 128, 288), (408, 585, 351), (144, 364, 174), (301, 441, 287), (88, 365, 338), (463, 22, 248), (62, 539, 146), (675, 258, 366), (508, 144, 92), (318, 263, 257), (590, 266, 120), (568, 478, 435), (317, 431, 367), (450, 692, 128), (263, 517, 364), (679, 665, 402), (685, 530, 199), (531, 445, 489), (591, 160, 415), (266, 383, 281), (448, 621, 340), (721, 91, 161), (72, 443, 288), (9, 658, 323), (237, 679, 118), (371, 383, 252), (525, 618, 395), (23, 497, 119), (456, 185, 237), (468, 5, 431), (649, 555, 137), (131, 109, 178), (145, 246, 164), (657, 60, 357), (174, 633, 240), (396, 167, 93), (190, 633, 392), (531, 177, 414), (340, 210, 457), (527, 130, 167), (286, 614, 392), (61, 569, 326), (127, 563, 276), (414, 252, 498), (297, 710, 483), (542, 547, 119), (194, 512, 272), (700, 231, 151), (697, 189, 274), (299, 682, 333), (599, 498, 441), (332, 410, 412), (50, 237, 248), (608, 238, 180), (299, 728, 220), (556, 404, 279), (57, 167, 463), (471, 646, 343), (286, 698, 470), (199, 44, 485), (9, 239, 231), (429, 433, 377), (333, 154, 367), (224, 468, 105), (686, 396, 448), (478, 343, 127), (14, 646, 261), (93, 687, 279), (289, 288, 223), (382, 230, 93), (698, 180, 371), (301, 530, 313), (398, 374, 375), (362, 483, 129), (86, 373, 383), (22, 577, 360), (729, 497, 443), (456, 706, 474), (642, 52, 123), (367, 347, 221), (385, 583, 153), (577, 211, 475), (27, 329, 397), (525, 641, 275), (479, 415, 465), (17, 647, 489), (456, 334, 193), (195, 484, 299), (695, 638, 493), (343, 568, 140), (282, 411, 284), (386, 378, 134), (696, 358, 469), (324, 258, 358), (284, 286, 362), (85, 432, 356), (49, 381, 121), (712, 110, 263), (610, 325, 154), (509, 614, 141), (646, 75, 132), (1, 681, 104), (161, 590, 340), (327, 627, 257), (580, 387, 145), (458, 619, 476), (648, 119, 150), (243, 148, 289), (76, 248, 353), (338, 314, 242), (403, 413, 333), (690, 514, 382), (475, 560, 194), (292, 105, 225), (693, 429, 361), (664, 310, 160), (601, 209, 286), (409, 39, 206), (440, 687, 341), (5, 212, 469), (122, 607, 487), (365, 425, 161), (141, 430, 150), (674, 718, 121), (705, 325, 407), (432, 233, 181), (13, 431, 262), (458, 62, 149), (151, 363, 227), (564, 657, 347), (317, 715, 237), (610, 395, 370), (86, 155, 173), (25, 39, 492), (164, 505, 383), (24, 262, 476), (686, 674, 118), (564, 115, 329), (372, 632, 133), (473, 507, 167), (370, 464, 147), (349, 697, 207), (293, 716, 214), (273, 669, 454), (422, 231, 447), (643, 112, 240), (496, 69, 312), (68, 60, 346), (442, 27, 445), (129, 642, 352), (554, 185, 354), (139, 241, 175), (626, 105, 80), (33, 214, 219), (413, 516, 478), (654, 306, 240), (318, 165, 448), (375, 414, 464), (492, 695, 336), (284, 218, 96), (539, 567, 148), (193, 388, 323), (36, 366, 84), (454, 298, 374), (542, 209, 320), (114, 326, 288), (331, 553, 311), (203, 65, 295), (69, 693, 342), (384, 87, 112), (572, 578, 230), (547, 635, 481), (149, 615, 284), (34, 660, 389), (239, 256, 281), (552, 317, 372), (16, 82, 329), (33, 667, 316), (444, 62, 416), (673, 180, 254), (415, 111, 233), (363, 729, 84), (60, 364, 101), (172, 722, 240), (164, 556, 361), (215, 607, 309), (62, 683, 405), (47, 476, 355), (84, 68, 391), (302, 729, 148), (494, 130, 367), (594, 715, 325), (328, 729, 492), (82, 709, 456), (134, 432, 192), (30, 148, 405), (498, 405, 271), (248, 212, 173), (63, 347, 336), (554, 229, 113), (14, 320, 365), (454, 128, 470), (184, 31, 283), (198, 259, 120), (582, 244, 348), (136, 34, 123), (517, 105, 165), (476, 337, 345), (56, 525, 183), (601, 340, 206), (699, 550, 108), (495, 661, 209), (177, 433, 396), (140, 459, 91), (330, 647, 164), (108, 386, 267), (438, 191, 373), (336, 252, 125), (54, 387, 77), (215, 622, 185), (227, 517, 87), (87, 556, 244), (318, 213, 478), (60, 265, 486), (444, 204, 369), (112, 640, 88), (80, 497, 291), (232, 150, 432), (78, 182, 224), (121, 564, 345), (218, 195, 114), (89, 702, 209), (95, 532, 314), (144, 723, 306), (15, 6, 114), (260, 423, 208), (257, 339, 358), (703, 395, 296), (506, 190, 471), (231, 294, 308), (668, 496, 423), (20, 121, 419), (455, 26, 175), (120, 170, 193), (188, 694, 123), (488, 363, 298), (715, 593, 235), (89, 430, 317), (338, 256, 245), (138, 165, 203), (167, 8, 444), (590, 374, 81), (391, 478, 339), (257, 435, 218), (650, 193, 325), (82, 618, 322), (639, 202, 108), (334, 326, 255), (549, 92, 76), (592, 609, 242), (585, 507, 180), (79, 325, 398), (675, 174, 315), (553, 684, 208), (685, 316, 325), (574, 62, 107), (497, 152, 459), (7, 466, 358), (566, 262, 235), (719, 239, 443), (1, 241, 162), (623, 672, 168), (257, 48, 308), (394, 622, 205), (229, 37, 135), (5, 329, 216), (49, 357, 395), (700, 608, 337), (260, 577, 99), (587, 238, 317), (216, 397, 398), (110, 564, 114), (508, 653, 294), (263, 596, 339), (558, 437, 338), (130, 5, 294), (437, 91, 215), (207, 600, 427), (109, 203, 104), (26, 660, 234), (733, 403, 442), (499, 387, 129), (24, 14, 439), (737, 199, 288), (115, 307, 423), (528, 408, 147), (74, 608, 381), (698, 38, 486), (713, 8, 442), (516, 483, 339), (563, 542, 349), (323, 313, 347), (76, 255, 434), (153, 8, 129), (57, 70, 356), (60, 563, 169), (185, 49, 378), (157, 728, 447), (463, 210, 143), (316, 456, 318), (637, 491, 230), (249, 269, 270), (18, 310, 488), (576, 561, 291), (186, 367, 400), (430, 522, 278), (724, 482, 316), (528, 168, 287), (106, 82, 239), (330, 57, 180), (589, 509, 372), (595, 126, 166), (394, 77, 238), (386, 422, 259), (383, 299, 128), (244, 328, 159), (537, 599, 288), (224, 286, 390), (399, 604, 451), (691, 472, 115), (734, 66, 449), (68, 0, 288), (343, 363, 91), (524, 219, 469), (591, 413, 296), (279, 204, 102), (540, 125, 285), (150, 624, 402), (356, 539, 122), (660, 692, 167), (382, 313, 303), (109, 561, 319), (646, 195, 432), (449, 263, 91), (450, 410, 338), (40, 306, 489), (158, 348, 493), (130, 261, 89), (129, 315, 444), (227, 271, 263), (481, 446, 397), (14, 687, 138), (549, 242, 275), (151, 320, 235), (499, 80, 341), (199, 241, 429), (86, 384, 115), (324, 665, 400), (658, 235, 199), (410, 156, 288), (218, 328, 466), (247, 598, 101), (389, 601, 465), (37, 629, 480), (616, 321, 380), (32, 9, 248), (307, 54, 125), (612, 270, 250), (298, 718, 247), (55, 471, 396), (177, 498, 176), (605, 394, 271), (572, 458, 126), (726, 229, 351), (466, 255, 185), (573, 549, 453), (705, 339, 253), (450, 326, 236), (260, 679, 338), (95, 386, 204), (72, 699, 151), (571, 367, 421), (540, 510, 252), (312, 631, 424), (208, 598, 108), (148, 142, 233), (257, 217, 227), (588, 146, 164), (217, 398, 386), (513, 178, 78), (593, 181, 144), (249, 244, 167), (549, 12, 464), (196, 736, 468), (342, 55, 457), (317, 711, 479), (195, 700, 112), (273, 144, 251), (641, 357, 161), (720, 430, 211), (280, 54, 260), (48, 90, 222), (423, 269, 450), (460, 595, 265), (60, 304, 249), (292, 190, 108), (81, 441, 200), (435, 436, 136), (50, 64, 342), (314, 164, 204), (154, 568, 280), (151, 518, 318), (276, 588, 145), (109, 297, 380), (314, 644, 283), (36, 213, 490), (715, 379, 377), (41, 20, 85), (319, 543, 290), (589, 82, 187), (44, 635, 294), (550, 569, 98), (449, 66, 290), (182, 519, 387), (676, 365, 352), (194, 656, 194), (111, 308, 306), (672, 739, 421), (133, 722, 205), (711, 417, 291), (137, 437, 206), (336, 471, 98), (432, 151, 337), (250, 731, 292), (177, 687, 326), (602, 151, 438), (268, 621, 428), (674, 365, 271), (608, 712, 93), (44, 100, 135), (331, 735, 154), (340, 599, 188), (210, 614, 242), (685, 537, 129), (189, 711, 378), (487, 382, 156), (214, 484, 124), (459, 612, 362), (53, 220, 335), (575, 581, 389), (542, 495, 336), (558, 193, 452), (661, 642, 164), (235, 334, 98), (365, 430, 406), (441, 46, 214), (652, 504, 353), (498, 416, 377), (423, 286, 372), (295, 116, 108), (285, 736, 99), (660, 100, 79), (24, 288, 250), (566, 159, 472), (329, 248, 96), (213, 76, 155), (613, 292, 288), (459, 718, 236), (100, 94, 75), (733, 476, 348), (79, 627, 104), (104, 196, 256), (507, 184, 442), (61, 382, 476), (221, 456, 86), (734, 30, 471), (468, 354, 411), (613, 684, 290), (54, 699, 483), (480, 383, 84), (74, 229, 306), (612, 143, 256), (452, 373, 191), (690, 261, 223), (559, 669, 470), (688, 729, 336), (468, 305, 146), (713, 158, 451), (83, 393, 372), (92, 305, 217), (226, 45, 95), (226, 694, 361), (20, 411, 127), (247, 474, 154), (0, 551, 435), (495, 348, 455), (651, 14, 354), (428, 216, 423), (719, 455, 490), (446, 23, 117), (583, 213, 168), (452, 5, 145), (363, 519, 319), (737, 84, 443), (478, 504, 322), (111, 145, 153), (348, 436, 341), (301, 131, 91), (114, 594, 125), (672, 63, 128), (445, 683, 280), (80, 686, 110), (321, 362, 370), (407, 187, 339), (24, 249, 420), (673, 316, 195), (295, 333, 469), (599, 86, 486), (539, 500, 116), (566, 359, 106), (360, 275, 347), (242, 394, 378), (176, 649, 266), (455, 415, 391), (356, 425, 201), (520, 662, 473), (462, 429, 111), (227, 324, 370), (454, 408, 420), (196, 738, 108), (546, 608, 232), (86, 260, 410), (233, 143, 127), (573, 567, 222), (547, 342, 106), (631, 235, 242), (392, 160, 173), (711, 295, 296), (618, 120, 76), (249, 647, 236), (263, 10, 450), (89, 608, 126), (408, 495, 172), (540, 47, 142), (506, 713, 399), (340, 208, 148), (43, 511, 466), (528, 282, 472), (512, 153, 498), (329, 148, 413), (262, 190, 268), (238, 320, 236), (528, 390, 334), (699, 332, 232), (17, 548, 270), (424, 320, 179), (80, 406, 298), (638, 473, 200), (346, 350, 110), (202, 48, 360), (473, 505, 97), (105, 451, 212), (720, 17, 102), (333, 678, 254), (636, 102, 300), (496, 217, 101), (386, 505, 78), (528, 437, 265), (632, 605, 105), (372, 638, 332), (18, 632, 149), (46, 493, 415), (569, 603, 211), (423, 177, 167), (218, 252, 284), (589, 192, 406), (143, 627, 359), (361, 44, 396), (391, 39, 301), (575, 566, 227), (264, 468, 104), (513, 368, 303), (652, 439, 340), (471, 254, 459), (521, 194, 429), (51, 483, 422), (714, 568, 393), (46, 80, 362), (553, 452, 155), (126, 200, 430), (623, 119, 438), (296, 381, 463), (637, 340, 497), (314, 603, 82), (207, 116, 260), (671, 93, 80), (546, 560, 317), (674, 141, 93), (701, 322, 301), (419, 282, 320), (636, 692, 286), (170, 366, 399), (653, 104, 149), (205, 669, 330), (226, 87, 352), (696, 242, 175), (329, 586, 243), (553, 9, 115), (378, 642, 276), (339, 431, 294), (28, 11, 114), (425, 311, 304), (277, 615, 143), (718, 704, 230), (127, 210, 217), (588, 95, 426), (147, 154, 88), (477, 697, 309), (434, 550, 135), (174, 32, 258), (487, 116, 395), (460, 660, 122), (26, 146, 431), (392, 724, 349), (162, 163, 122), (615, 432, 218), (567, 255, 209), (535, 281, 162), (533, 348, 159), (459, 671, 248), (724, 686, 263), (564, 614, 267), (352, 30, 200), (676, 242, 239), (14, 259, 389), (268, 74, 131), (70, 559, 191), (105, 389, 255), (729, 537, 193), (402, 436, 234), (212, 360, 98), (109, 329, 145), (114, 196, 82), (534, 348, 392), (531, 4, 479), (486, 670, 105), (64, 561, 339), (241, 417, 95), (606, 79, 195), (639, 592, 86), (244, 712, 338), (665, 251, 285), (262, 511, 84), (608, 235, 354), (478, 391, 384), (165, 555, 145), (719, 632, 131), (667, 253, 467), (155, 585, 415), (120, 85, 148), (266, 509, 497), (433, 247, 408), (404, 458, 149), (379, 229, 168), (358, 728, 235), (433, 590, 136), (484, 633, 167), (6, 528, 187), (137, 163, 453), (490, 346, 336), (262, 280, 273), (347, 551, 323), (411, 520, 336), (735, 665, 112), (46, 349, 360), (424, 302, 385), (191, 422, 81), (125, 606, 403), (336, 674, 126), (682, 203, 486), (623, 35, 285), (229, 561, 427), (704, 549, 479), (0, 215, 316), (529, 142, 427), (622, 339, 171), (623, 415, 426), (593, 734, 420), (449, 381, 272), (453, 634, 301), (92, 588, 261), (533, 595, 314), (373, 18, 473), (272, 411, 166), (329, 358, 189), (451, 330, 243), (402, 70, 126), (360, 688, 460), (718, 295, 430), (241, 731, 304), (734, 543, 275), (726, 76, 405), (39, 638, 425), (550, 70, 469), (220, 580, 189), (2, 186, 435), (555, 244, 495), (233, 61, 191), (375, 515, 225), (683, 67, 157), (695, 108, 405), (129, 735, 374), (381, 631, 253), (475, 385, 442), (649, 103, 476), (409, 75, 372), (84, 138, 336), (410, 252, 301), (80, 116, 324), (55, 430, 175), (81, 346, 260), (483, 506, 256), (499, 581, 259), (157, 530, 489), (561, 139, 411), (313, 248, 286), (667, 70, 480), (124, 551, 419), (68, 633, 366), (62, 690, 266), (59, 184, 105), (516, 579, 455), (356, 675, 334), (376, 194, 464), (363, 164, 313), (533, 152, 130), (607, 218, 231), (300, 164, 113), (574, 137, 293), (579, 5, 276), (154, 648, 228), (170, 616, 168), (272, 408, 254), (40, 3, 473), (462, 739, 374), (621, 131, 359), (563, 455, 236), (115, 170, 309), (706, 482, 431), (504, 216, 420), (52, 489, 321), (689, 322, 178), (336, 130, 245), (490, 614, 226), (136, 51, 443), (659, 269, 182), (377, 196, 253), (690, 535, 438), (670, 395, 277), (296, 638, 477), (455, 501, 164), (585, 248, 318), (56, 473, 403), (113, 417, 130), (694, 632, 275), (480, 317, 193), (242, 91, 455), (68, 545, 495), (19, 328, 136), (233, 245, 289), (455, 613, 490), (681, 524, 438), (465, 246, 213), (517, 86, 238), (56, 464, 439), (246, 289, 460), (687, 528, 145), (517, 473, 275), (687, 283, 314), (276, 445, 226), (673, 719, 110), (726, 153, 90), (64, 397, 319), (47, 331, 482), (684, 494, 208), (619, 86, 128), (503, 137, 116), (418, 576, 101), (199, 406, 266), (301, 484, 449), (543, 727, 242), (249, 490, 366), (535, 152, 486), (268, 273, 141), (202, 379, 129), (559, 706, 191), (190, 688, 408), (116, 355, 192), (86, 225, 242), (659, 604, 414), (314, 284, 142), (406, 516, 315), (571, 521, 478), (316, 368, 487), (498, 632, 306), (180, 23, 474), (95, 227, 475), (26, 398, 222), (277, 14, 369), (196, 620, 207), (127, 620, 481), (163, 347, 148), (524, 492, 310), (294, 467, 206), (211, 709, 263), (343, 511, 117), (28, 313, 293), (86, 734, 204), (223, 547, 305), (414, 420, 131), (658, 22, 211), (215, 435, 459), (639, 119, 340), (126, 103, 432), (642, 356, 313), (41, 615, 401), (139, 314, 478), (196, 162, 268), (717, 522, 184), (489, 247, 214), (428, 371, 370), (221, 334, 105), (201, 453, 433), (494, 16, 315), (157, 108, 355), (148, 136, 230), (186, 558, 105), (312, 226, 266), (292, 125, 157), (390, 709, 362), (243, 394, 390), (488, 202, 359), (543, 48, 424), (547, 302, 282), (9, 291, 213), (401, 697, 139), (605, 598, 278), (231, 192, 131), (143, 700, 254), (514, 360, 179), (283, 75, 234), (293, 2, 380), (695, 264, 368), (594, 669, 183), (535, 120, 408), (461, 41, 107), (326, 478, 327), (617, 482, 435), (240, 698, 162), (502, 402, 441), (735, 275, 409), (158, 394, 76), (520, 716, 453), (473, 263, 138), (82, 457, 96), (91, 350, 244), (144, 657, 438), (458, 698, 440), (407, 191, 125), (700, 170, 90), (213, 410, 323), (406, 628, 218), (644, 598, 116), (573, 176, 489), (231, 54, 138), (52, 461, 82), (337, 502, 317), (495, 439, 479), (544, 451, 240), (606, 342, 94), (316, 666, 400), (84, 24, 150), (698, 633, 229), (340, 137, 277), (118, 39, 202), (163, 561, 476), (182, 583, 298), (96, 255, 266), (376, 74, 119), (701, 267, 168), (654, 610, 138), (437, 542, 251), (699, 239, 342), (209, 595, 176), (669, 443, 417), (450, 665, 221), (235, 428, 262), (549, 307, 141), (549, 280, 124), (715, 26, 386), (350, 423, 310), (289, 341, 448), (444, 731, 88), (486, 396, 451), (234, 527, 273), (632, 346, 219), (171, 440, 241), (665, 712, 140), (569, 617, 420), (83, 450, 267), (36, 321, 421), (566, 259, 306), (661, 235, 426), (148, 183, 151), (92, 712, 490), (21, 100, 331), (62, 277, 170), (601, 314, 135), (36, 372, 243), (66, 65, 75), (606, 694, 266), (369, 50, 101), (356, 90, 311), (28, 242, 465), (527, 603, 290), (559, 6, 462), (561, 113, 171), (74, 113, 430), (539, 530, 201), (364, 211, 267), (529, 365, 231), (223, 643, 245), (66, 150, 155), (588, 83, 232), (66, 464, 202), (14, 92, 316), (462, 498, 161), (464, 6, 366), (484, 72, 312), (694, 64, 449), (716, 480, 129), (252, 179, 414), (136, 63, 374), (134, 499, 411), (518, 418, 465), (38, 274, 316), (398, 500, 238), (269, 456, 267), (372, 702, 146), (533, 729, 76), (404, 211, 298), (573, 120, 435), (258, 300, 149), (363, 465, 95), (368, 699, 172), (105, 514, 295), (158, 86, 300), (171, 276, 267), (88, 36, 284), (12, 2, 488), (266, 510, 157), (709, 94, 249), (355, 101, 266), (82, 370, 324), (127, 738, 273), (262, 555, 316), (322, 491, 471), (372, 96, 308), (630, 175, 114), (76, 659, 200), (620, 155, 129), (620, 686, 290), (581, 685, 348), (166, 331, 414), (503, 56, 233), (707, 56, 494), (619, 653, 317), (406, 206, 461), (303, 255, 202), (274, 465, 202), (138, 167, 208), (598, 290, 239), (347, 286, 479), (311, 110, 391), (541, 120, 372), (542, 566, 254), (550, 529, 498), (155, 166, 485), (427, 715, 219), (723, 305, 277), (148, 614, 449), (609, 174, 249), (588, 411, 316), (306, 170, 245), (168, 48, 131), (699, 56, 80), (134, 47, 155), (698, 350, 410), (459, 447, 274), (222, 727, 345), (623, 548, 442), (670, 489, 88), (445, 396, 211), (50, 381, 270), (65, 599, 477), (541, 538, 252), (625, 586, 238), (290, 168, 168), (250, 620, 296), (265, 192, 242), (388, 370, 309), (412, 564, 80), (472, 109, 201), (50, 499, 262), (49, 286, 415), (5, 411, 186), (83, 716, 389), (151, 83, 498), (85, 71, 271), (691, 601, 476), (437, 739, 331), (286, 718, 499), (611, 410, 266), (514, 321, 473), (308, 669, 371), (215, 667, 370), (370, 570, 417), (231, 588, 173), (599, 672, 464), (242, 148, 383), (631, 145, 193), (583, 631, 423), (623, 697, 197), (333, 187, 414), (647, 549, 322), (123, 597, 239), (79, 494, 84), (563, 211, 330), (344, 566, 404), (368, 483, 393), (350, 300, 448), (213, 265, 191), (179, 416, 491), (213, 256, 222), (655, 255, 123), (610, 736, 292), (425, 429, 79), (663, 189, 433), (311, 721, 234), (567, 214, 104), (203, 555, 183), (140, 526, 272), (292, 284, 120), (664, 435, 313), (24, 561, 135), (59, 300, 482), (459, 365, 217), (116, 87, 324), (234, 129, 328), (210, 419, 223), (104, 266, 457), (434, 51, 356), (107, 487, 336), (582, 510, 142), (167, 81, 319), (543, 305, 172), (230, 71, 418), (517, 449, 250), (468, 330, 190), (315, 596, 445), (501, 412, 296), (354, 244, 257), (487, 308, 320), (309, 559, 301), (456, 702, 86), (409, 358, 458), (350, 175, 394), (56, 146, 318), (320, 119, 393), (479, 553, 161), (290, 70, 139), (153, 320, 336), (670, 337, 353), (55, 0, 96), (354, 237, 254), (356, 490, 346), (649, 131, 308), (65, 263, 216), (449, 583, 341), (37, 633, 409), (734, 556, 478), (608, 156, 194), (191, 377, 436), (476, 110, 326), (519, 592, 75), (391, 27, 450), (590, 309, 407), (341, 570, 219), (453, 91, 294), (361, 527, 258), (45, 448, 238), (365, 731, 487), (88, 448, 294), (679, 617, 342), (169, 244, 121), (438, 150, 252), (374, 281, 474), (353, 695, 174), (270, 301, 133), (476, 596, 341), (322, 481, 114), (360, 304, 217), (662, 645, 84), (69, 298, 92), (713, 632, 339), (230, 337, 406), (420, 520, 283), (74, 358, 196), (689, 454, 247), (345, 8, 133), (541, 386, 350), (0, 523, 422), (397, 219, 410), (423, 612, 339), (481, 140, 298), (15, 20, 78), (654, 459, 325), (456, 657, 298), (624, 659, 250), (404, 487, 275), (531, 596, 500), (115, 632, 374), (614, 69, 310), (120, 8, 420), (363, 69, 88), (521, 609, 134), (256, 465, 265), (381, 535, 153), (246, 494, 483), (663, 101, 431), (461, 512, 290), (180, 451, 119), (219, 343, 241), (636, 388, 384), (366, 335, 469), (153, 347, 280), (38, 609, 383), (378, 335, 363), (93, 423, 186), (426, 48, 379), (473, 478, 364), (7, 581, 369), (25, 728, 304), (384, 8, 484), (211, 193, 405), (545, 722, 218), (113, 193, 350), (697, 86, 256), (466, 588, 158), (129, 195, 269), (601, 287, 474), (101, 505, 479), (99, 258, 281), (590, 414, 298), (428, 54, 227), (589, 478, 203), (433, 375, 186), (582, 603, 151), (600, 710, 223), (538, 234, 471), (29, 670, 184), (305, 686, 115), (46, 506, 282), (251, 316, 98), (119, 370, 459), (651, 596, 283), (353, 73, 145), (215, 419, 365), (226, 296, 418), (350, 235, 412), (464, 729, 226), (445, 277, 132), (509, 558, 492), (549, 302, 444), (550, 224, 264), (85, 104, 104), (411, 487, 282), (420, 319, 247), (662, 330, 471), (558, 0, 482), (543, 721, 467), (163, 61, 500), (321, 423, 447), (433, 91, 139), (310, 501, 471), (719, 663, 399), (118, 703, 183), (133, 620, 214), (175, 669, 423), (402, 88, 410), (233, 739, 436), (506, 418, 83), (305, 248, 355), (679, 715, 351), (660, 538, 277), (698, 402, 270), (496, 132, 233), (168, 182, 438), (110, 178, 79), (144, 377, 442), (268, 52, 185), (681, 181, 354), (573, 383, 203), (708, 288, 93), (79, 271, 256), (323, 115, 364), (270, 112, 228), (440, 6, 230), (313, 495, 165), (1, 398, 304), (625, 243, 322), (654, 283, 174), (333, 675, 454), (577, 675, 401), (545, 560, 439), (621, 355, 478), (342, 514, 488), (294, 719, 290), (250, 225, 369), (18, 423, 101), (697, 621, 225), (309, 83, 437), (85, 431, 246), (447, 682, 272), (158, 124, 214), (153, 700, 128), (190, 689, 91), (589, 377, 254), (161, 732, 359), (277, 340, 178), (296, 64, 473), (329, 262, 352), (677, 76, 429), (139, 58, 420), (532, 427, 489), (724, 153, 263), (382, 277, 382), (5, 668, 190), (293, 732, 116), (331, 145, 93), (324, 418, 323), (68, 194, 154), (266, 474, 244), (400, 180, 222), (211, 134, 430), (214, 63, 430), (205, 3, 186), (669, 318, 416), (51, 415, 205), (484, 327, 174), (589, 395, 280), (283, 391, 366), (250, 380, 369), (63, 146, 178), (150, 263, 460), (259, 486, 289), (209, 737, 337), (205, 308, 418), (614, 336, 104), (327, 315, 83), (489, 400, 216), (425, 241, 456), (684, 521, 84), (229, 280, 378), (221, 304, 251), (549, 680, 358), (111, 586, 297), (32, 84, 194), (395, 483, 327), (590, 692, 395), (242, 726, 271), (365, 471, 369), (227, 732, 136), (207, 633, 186), (41, 104, 481), (684, 658, 354), (613, 321, 277), (245, 528, 166), (244, 217, 76), (32, 418, 75), (463, 496, 455), (652, 299, 489), (375, 416, 179), (390, 477, 495), (708, 129, 324), (551, 582, 229), (116, 187, 466), (113, 703, 93), (174, 360, 163), (144, 452, 202), (660, 495, 390), (532, 503, 317), (287, 179, 105), (309, 523, 434), (339, 183, 417), (349, 38, 334), (22, 428, 198), (295, 656, 105), (364, 348, 451), (101, 299, 169), (240, 383, 176), (564, 398, 480), (569, 186, 353), (336, 507, 188), (72, 178, 422), (594, 526, 388), (5, 399, 279), (467, 71, 109), (99, 29, 173), (572, 372, 361), (32, 588, 82), (463, 349, 185), (531, 376, 417), (519, 481, 142), (630, 515, 240), (646, 386, 364), (400, 393, 320), (724, 736, 488), (16, 708, 204), (161, 245, 496), (589, 67, 432), (416, 544, 461), (504, 240, 253), (278, 568, 345), (395, 364, 468), (31, 197, 121), (227, 722, 450), (403, 703, 362), (444, 40, 75), (157, 731, 75), (109, 688, 122), (584, 285, 494), (449, 0, 117), (286, 254, 144), (185, 186, 388), (621, 603, 138), (492, 487, 291), (430, 37, 497), (312, 573, 204), (418, 692, 268), (178, 724, 363), (711, 66, 363), (5, 242, 458), (510, 208, 147), (660, 296, 279), (200, 673, 162), (591, 62, 330), (188, 18, 392), (74, 241, 484), (241, 35, 259), (600, 354, 396), (151, 427, 474), (481, 616, 426), (449, 285, 487), (351, 67, 487), (157, 99, 105), (563, 511, 407), (625, 361, 142), (640, 75, 172), (512, 606, 221), (157, 438, 245), (297, 80, 123), (75, 71, 182), (15, 389, 259), (182, 226, 292), (394, 199, 353), (91, 628, 232), (392, 567, 459), (89, 639, 390), (532, 645, 391), (411, 380, 256), (142, 646, 411), (297, 430, 241), (84, 558, 467), (469, 668, 490), (491, 640, 422), (462, 220, 169), (323, 732, 168), (251, 718, 336), (299, 709, 99), (599, 106, 483), (615, 21, 268), (244, 13, 272), (457, 327, 358), (16, 456, 86), (401, 551, 185), (353, 422, 111), (373, 538, 403), (365, 93, 119), (454, 50, 89), (347, 689, 229), (697, 178, 458), (625, 602, 96), (333, 136, 247), (134, 216, 148), (287, 85, 289), (66, 563, 169), (233, 675, 85), (586, 429, 83), (373, 243, 491), (338, 395, 231), (49, 261, 241), (61, 282, 282), (288, 112, 187), (519, 683, 266), (635, 658, 268), (63, 198, 312), (215, 20, 293), (342, 98, 122), (179, 309, 423), (321, 300, 454), (688, 552, 417), (162, 182, 434), (737, 379, 478), (58, 230, 155), (667, 45, 122), (110, 196, 175), (466, 332, 143), (322, 723, 209), (329, 166, 220), (322, 533, 457), (540, 223, 163), (107, 371, 183), (228, 11, 316), (446, 284, 158), (580, 365, 279), (439, 375, 348), (31, 558, 318), (670, 162, 258), (648, 338, 81), (89, 291, 479), (520, 685, 458), (150, 48, 488), (299, 579, 411), (598, 669, 140), (509, 585, 235), (527, 432, 150), (204, 75, 251), (506, 614, 337), (606, 327, 367), (88, 224, 216), (384, 23, 187), (506, 305, 225), (148, 662, 394), (356, 164, 463), (368, 67, 370), (574, 128, 373), (523, 732, 449), (641, 379, 418), (220, 155, 368), (540, 19, 225), (139, 324, 353), (659, 225, 220), (587, 445, 437), (315, 141, 273), (569, 305, 169), (448, 456, 154), (337, 527, 482), (656, 601, 447), (717, 493, 359), (570, 418, 219), (605, 225, 150), (89, 267, 99), (261, 39, 112), (156, 550, 263), (269, 447, 421), (196, 271, 386), (666, 541, 97), (413, 473, 323), (265, 484, 138), (391, 33, 143), (176, 494, 221), (378, 13, 129), (116, 80, 176), (56, 551, 259), (36, 337, 385), (541, 341, 365), (329, 234, 453), (726, 588, 471), (481, 348, 493), (631, 74, 181), (335, 602, 115), (15, 614, 488), (399, 366, 365), (308, 224, 234), (707, 54, 307), (32, 309, 89), (358, 589, 496), (154, 636, 167), (158, 169, 457), (64, 609, 282), (631, 282, 103), (675, 479, 122), (644, 231, 148), (321, 50, 153), (103, 662, 259), (565, 276, 239), (113, 488, 391), (721, 408, 486), (368, 179, 115), (89, 66, 86), (688, 159, 183), (193, 168, 476), (568, 143, 201), (406, 148, 494), (392, 429, 497), (298, 332, 110), (405, 319, 345), (41, 445, 443), (536, 466, 91), (65, 649, 444), (280, 611, 135), (254, 284, 336), (569, 608, 304), (432, 58, 355), (283, 441, 278), (18, 163, 93), (498, 461, 244), (375, 361, 214), (430, 645, 152), (525, 430, 216), (588, 11, 320), (672, 41, 221), (269, 217, 471), (480, 716, 233), (443, 685, 440), (568, 78, 229), (351, 480, 228), (160, 503, 227), (183, 275, 325), (577, 662, 126), (180, 126, 93), (457, 386, 123), (524, 375, 255), (51, 122, 430), (575, 722, 345), (462, 478, 408), (516, 652, 221), (18, 35, 474), (275, 409, 370), (199, 598, 386), (233, 322, 314), (552, 720, 136), (340, 40, 448), (317, 710, 305), (285, 393, 356), (380, 78, 414), (271, 632, 393), (641, 719, 76), (251, 297, 371), (514, 527, 436), (179, 737, 399), (482, 135, 307), (130, 680, 407), (660, 168, 86), (505, 420, 86), (342, 712, 139), (434, 637, 303), (63, 299, 79), (35, 281, 219), (686, 76, 86), (705, 260, 137), (227, 313, 365), (393, 25, 423), (425, 531, 214), (72, 710, 108), (111, 241, 331), (450, 361, 407), (463, 355, 283), (92, 259, 87), (380, 482, 210), (664, 438, 469), (169, 685, 262), (167, 114, 498), (606, 479, 323), (718, 503, 195), (297, 662, 212), (300, 736, 214), (626, 226, 489), (285, 717, 79), (71, 423, 249), (615, 461, 231), (429, 177, 300), (459, 205, 468), (553, 269, 182), (10, 205, 234), (706, 563, 264), (607, 624, 156), (270, 185, 356), (479, 713, 152), (731, 313, 348), (105, 411, 372), (687, 536, 276), (178, 326, 143), (256, 60, 84), (484, 36, 420), (62, 86, 153), (238, 487, 273), (348, 289, 281), (161, 243, 253), (292, 530, 240), (682, 37, 432), (143, 731, 420), (536, 283, 230), (399, 338, 126), (671, 157, 478), (410, 13, 285), (208, 316, 463), (671, 580, 86), (356, 187, 166), (417, 239, 414), (510, 691, 206), (435, 466, 377), (97, 159, 443), (302, 415, 104), (181, 294, 192), (510, 88, 438), (205, 214, 391), (334, 455, 455), (520, 579, 168), (322, 29, 328), (376, 128, 376), (219, 514, 234), (408, 216, 179), (351, 583, 352), (25, 359, 310), (435, 320, 295), (548, 469, 316), (330, 567, 431), (612, 571, 445), (587, 684, 411), (38, 437, 302), (684, 396, 255), (682, 490, 269), (354, 568, 332), (699, 491, 471), (660, 416, 407), (668, 31, 499), (298, 731, 204), (412, 713, 172), (157, 736, 78), (156, 213, 334), (708, 676, 474), (102, 662, 271), (100, 717, 295), (601, 23, 124), (699, 427, 306), (411, 671, 496), (390, 52, 289), (568, 412, 450), (523, 204, 372), (289, 638, 203), (166, 305, 380), (222, 484, 183), (1, 459, 290), (217, 13, 217), (626, 153, 373), (287, 461, 100), (16, 529, 247), (255, 82, 499), (527, 18, 210), (476, 390, 359), (227, 205, 232), (618, 518, 488), (438, 296, 169), (258, 443, 358), (279, 546, 167), (285, 723, 378), (700, 594, 307), (459, 219, 356), (428, 610, 289), (197, 587, 430), (175, 266, 431), (676, 587, 362), (625, 268, 247), (122, 572, 90), (402, 640, 498), (376, 357, 212), (112, 231, 217), (137, 323, 410), (485, 285, 236), (274, 516, 207), (276, 5, 257), (624, 271, 493), (17, 638, 243), (517, 585, 224), (158, 565, 234), (671, 39, 476), (562, 466, 500), (6, 93, 83), (92, 341, 87), (281, 187, 490), (646, 543, 104), (537, 4, 155), (217, 486, 414), (502, 13, 118), (84, 674, 423), (225, 87, 342), (593, 267, 99), (387, 4, 109), (604, 679, 322), (53, 101, 429), (488, 642, 246), (551, 51, 220), (554, 738, 127), (296, 669, 106), (295, 168, 201), (196, 74, 300), (725, 87, 334), (99, 609, 482), (327, 406, 357), (417, 199, 224), (382, 196, 176), (482, 466, 122), (117, 313, 200), (282, 156, 363), (86, 453, 222), (238, 562, 414), (155, 243, 367), (497, 392, 214), (455, 281, 259), (640, 184, 474), (574, 215, 468), (666, 678, 158), (195, 620, 448), (175, 502, 312), (558, 297, 182), (401, 308, 207), (593, 300, 168), (695, 554, 230), (494, 282, 466), (300, 641, 299), (44, 677, 206), (657, 450, 341), (108, 662, 424), (249, 521, 436), (675, 563, 134), (481, 376, 121), (274, 337, 217), (466, 209, 262), (379, 492, 415), (157, 15, 164), (586, 216, 164), (464, 321, 411), (372, 453, 113), (651, 192, 321), (70, 68, 442), (116, 307, 129), (115, 252, 490), (244, 532, 100), (52, 67, 444), (652, 736, 124), (76, 626, 344), (6, 426, 241), (154, 468, 494), (143, 188, 260), (11, 270, 368), (151, 305, 246), (313, 27, 327), (310, 421, 113), (223, 450, 121), (615, 138, 201), (577, 9, 313), (471, 542, 200), (254, 405, 187), (44, 537, 432), (81, 158, 414), (418, 509, 331), (271, 164, 330), (626, 312, 248), (451, 60, 219), (376, 100, 137), (301, 694, 250), (477, 510, 273), (129, 369, 297), (367, 459, 148), (307, 527, 484), (536, 403, 126), (638, 598, 300), (334, 112, 289), (600, 148, 326), (459, 186, 290), (131, 586, 323), (620, 461, 471), (333, 543, 278), (5, 139, 337), (724, 247, 309), (15, 235, 380), (500, 232, 91), (301, 229, 452), (408, 674, 364), (647, 217, 157), (519, 61, 470), (271, 636, 181), (320, 505, 159), (708, 711, 111), (14, 372, 273), (566, 515, 292), (690, 629, 76), (339, 682, 498), (5, 530, 114), (377, 17, 227), (192, 474, 175), (224, 194, 202), (144, 345, 101), (300, 721, 276), (226, 555, 261), (466, 602, 291), (58, 2, 206), (653, 520, 133), (4, 557, 329), (116, 198, 320), (8, 119, 361), (164, 234, 271), (523, 736, 177), (463, 123, 91), (605, 355, 161), (228, 386, 480), (118, 261, 288), (454, 380, 259), (681, 348, 487), (476, 189, 84), (129, 524, 413), (644, 242, 86), (361, 415, 385), (416, 303, 423), (589, 0, 138), (321, 257, 119), (37, 210, 243), (25, 556, 367), (729, 164, 426), (9, 227, 305), (386, 528, 378), (258, 583, 232), (237, 454, 205), (508, 608, 257), (512, 684, 417), (381, 603, 498), (432, 401, 124), (670, 188, 166), (263, 357, 208), (647, 542, 232), (340, 287, 272), (456, 243, 267), (549, 233, 170), (426, 286, 382), (697, 644, 84), (696, 75, 224), (345, 649, 232), (37, 726, 164), (334, 633, 274), (693, 638, 277), (328, 158, 312), (739, 84, 99), (430, 45, 117), (151, 549, 452), (106, 295, 196), (491, 289, 392), (674, 486, 178), (155, 3, 245), (258, 395, 153), (669, 127, 167), (311, 22, 330), (424, 109, 432), (237, 512, 267), (168, 380, 242), (259, 257, 157), (175, 62, 244), (198, 136, 396), (233, 421, 180), (624, 439, 407), (370, 718, 363), (174, 441, 481), (42, 80, 428), (436, 326, 277), (560, 159, 129), (490, 77, 136), (324, 494, 426), (484, 126, 261), (546, 430, 495), (586, 199, 428), (118, 361, 100), (521, 698, 292), (483, 332, 397), (479, 194, 113), (131, 709, 361), (410, 56, 194), (64, 282, 295), (143, 353, 415), (512, 404, 381), (177, 185, 347), (251, 29, 373), (686, 247, 93), (457, 318, 154), (605, 101, 91), (736, 173, 165), (312, 181, 361), (12, 418, 179), (701, 410, 365), (646, 656, 203), (395, 60, 301), (682, 167, 344), (537, 206, 219), (506, 368, 329), (89, 443, 480), (92, 492, 334), (548, 423, 376), (416, 325, 437), (608, 660, 292), (580, 536, 415), (60, 260, 200), (5, 545, 209), (250, 320, 180), (153, 286, 205), (270, 358, 207), (609, 57, 110), (262, 633, 478), (540, 579, 237), (622, 196, 433), (492, 437, 125), (370, 319, 486), (302, 736, 114), (122, 469, 169), (56, 339, 271), (365, 346, 78), (578, 3, 452), (562, 211, 329), (93, 26, 198), (552, 297, 97), (367, 474, 485), (431, 717, 472), (338, 185, 423), (97, 91, 348), (169, 432, 476), (205, 136, 252), (506, 606, 214), (165, 404, 422), (645, 627, 393), (23, 569, 316), (252, 123, 136), (688, 89, 365), (228, 206, 85), (466, 59, 401), (667, 159, 231), (716, 170, 200), (678, 533, 106), (667, 331, 157), (606, 169, 304), (248, 331, 438), (710, 613, 228), (56, 240, 126), (493, 88, 182), (725, 125, 272), (206, 43, 478), (5, 157, 491), (695, 650, 482), (559, 645, 129), (673, 533, 89), (101, 691, 109), (263, 98, 301), (485, 327, 450), (271, 609, 301), (204, 100, 282), (139, 336, 329), (47, 143, 271), (136, 341, 242), (465, 317, 198), (104, 500, 167), (710, 607, 269), (618, 535, 321), (662, 544, 493), (286, 139, 126), (313, 368, 411), (528, 299, 442), (183, 61, 185), (115, 621, 412), (481, 548, 139), (120, 559, 490), (5, 499, 312), (727, 559, 89), (263, 445, 380), (619, 148, 293), (160, 739, 106), (50, 364, 173), (236, 546, 385), (735, 144, 418), (443, 51, 436), (268, 163, 194), (137, 701, 142), (81, 470, 470), (620, 349, 264), (306, 86, 422), (732, 627, 281), (418, 244, 375), (452, 525, 318), (96, 51, 286), (542, 558, 246), (695, 166, 117), (14, 142, 383), (564, 335, 82), (5, 80, 221), (312, 239, 269), (352, 74, 387), (718, 706, 451), (177, 723, 111), (562, 638, 392), (561, 299, 320), (711, 448, 369), (706, 153, 171), (111, 426, 160), (445, 662, 394), (606, 122, 327), (677, 687, 411), (413, 265, 417), (501, 44, 436), (500, 139, 476), (699, 168, 253), (96, 172, 468), (517, 557, 472), (720, 79, 237), (490, 596, 416), (213, 397, 445), (534, 9, 315), (561, 424, 207), (596, 99, 124), (89, 577, 383), (636, 122, 289), (737, 679, 93), (168, 504, 150), (140, 299, 279), (501, 99, 408), (588, 509, 298), (346, 374, 218), (192, 411, 354), (146, 657, 150), (612, 302, 399), (157, 66, 283), (356, 118, 452), (64, 298, 220), (541, 97, 249), (671, 415, 255), (471, 386, 250), (476, 696, 200), (198, 693, 414), (554, 411, 308), (386, 406, 201), (420, 662, 139), (642, 215, 271), (683, 664, 160), (58, 601, 175), (644, 63, 314), (325, 28, 315), (63, 425, 293), (718, 492, 90), (17, 509, 151), (93, 49, 148), (269, 700, 176), (216, 547, 385), (558, 671, 288), (707, 121, 83), (121, 16, 308), (83, 553, 330), (455, 262, 327), (462, 463, 282), (197, 433, 286), (690, 482, 233), (460, 669, 475), (521, 617, 139), (375, 512, 88), (364, 178, 204), (349, 587, 485), (726, 715, 302), (607, 52, 248), (62, 346, 96), (242, 596, 483), (359, 667, 396), (21, 564, 112), (120, 737, 77), (248, 308, 421), (702, 592, 411), (78, 542, 425), (494, 19, 258), (158, 543, 474), (736, 356, 207), (80, 372, 334), (706, 435, 103), (196, 536, 123), (723, 96, 120), (287, 450, 247), (658, 620, 76), (305, 529, 313), (567, 631, 131), (229, 43, 499), (725, 236, 457), (378, 354, 90), (215, 316, 417), (28, 277, 285), (686, 26, 87), (323, 695, 469), (372, 105, 212), (80, 517, 136), (216, 9, 234), (107, 263, 187), (346, 92, 194), (728, 702, 252), (47, 512, 77), (453, 728, 491), (313, 221, 215), (245, 541, 319), (668, 25, 323), (127, 202, 350), (334, 686, 456), (199, 643, 107), (143, 528, 201), (710, 93, 285), (58, 234, 372), (411, 8, 199), (394, 166, 107), (333, 595, 226), (626, 687, 211), (449, 7, 213), (264, 282, 213), (395, 200, 273), (628, 164, 82), (517, 301, 212), (636, 22, 277), (147, 10, 445), (466, 315, 306), (482, 286, 455), (56, 164, 196), (342, 449, 153), (210, 179, 107), (607, 416, 128), (141, 656, 251), (139, 226, 172), (421, 257, 370), (711, 105, 262), (440, 318, 498), (183, 179, 493), (643, 264, 350), (2, 198, 448), (195, 242, 388), (268, 511, 471), (597, 113, 367), (669, 460, 488), (643, 122, 266), (49, 665, 140), (300, 235, 320), (303, 465, 397), (512, 463, 113), (261, 278, 483), (607, 313, 386), (354, 305, 477), (528, 493, 373), (415, 372, 129), (280, 5, 295), (141, 531, 192), (197, 253, 165), (363, 558, 243), (216, 154, 422), (32, 481, 291), (11, 484, 476), (215, 372, 267), (564, 677, 315), (589, 72, 437), (467, 90, 430), (678, 415, 416), (681, 512, 230), (53, 79, 309), (255, 554, 110), (470, 426, 79), (681, 39, 163), (216, 253, 320), (78, 23, 115), (460, 521, 162), (428, 230, 178), (724, 80, 460), (220, 362, 397), (435, 642, 433), (395, 734, 113), (401, 537, 78), (40, 141, 153), (456, 22, 200), (56, 524, 372), (232, 542, 282), (487, 379, 482), (493, 230, 344), (499, 194, 238), (42, 315, 484), (195, 590, 144), (461, 699, 493), (361, 638, 336), (59, 190, 344), (46, 448, 102), (299, 65, 126), (303, 390, 316), (413, 354, 411), (473, 322, 381), (697, 319, 310), (201, 636, 460), (442, 392, 309), (16, 341, 314), (103, 661, 281), (665, 107, 390), (411, 722, 319), (406, 121, 422), (372, 437, 382), (146, 463, 265), (315, 414, 368), (306, 308, 163), (105, 589, 142), (478, 588, 144), (45, 273, 403), (13, 160, 185), (595, 197, 205), (604, 451, 345), (673, 37, 344), (448, 261, 260), (564, 392, 201), (41, 145, 398), (91, 220, 184), (606, 734, 397), (231, 694, 283), (441, 337, 470), (645, 575, 294), (451, 537, 305), (94, 588, 287), (567, 630, 218), (658, 690, 372), (676, 118, 415), (203, 310, 471), (301, 51, 341), (495, 185, 118), (95, 701, 132), (610, 363, 251), (266, 522, 298), (358, 460, 166), (688, 62, 438), (105, 486, 399), (618, 276, 445), (503, 641, 151), (735, 126, 334), (635, 535, 268), (659, 48, 464), (493, 405, 474), (366, 271, 429), (579, 294, 143), (604, 199, 330), (714, 279, 142), (159, 581, 184), (589, 470, 208), (416, 304, 274), (617, 390, 113), (584, 417, 179), (38, 131, 331), (8, 201, 406), (67, 463, 242), (203, 606, 133), (289, 484, 281), (657, 623, 415), (48, 169, 139), (164, 29, 259), (215, 32, 193), (337, 422, 235), (371, 461, 231), (226, 272, 186), (8, 341, 422), (483, 275, 330), (372, 624, 77), (485, 570, 240), (376, 245, 400), (539, 575, 281), (132, 579, 334), (438, 738, 92), (619, 421, 399), (556, 379, 426), (37, 644, 102), (716, 232, 99), (298, 431, 205), (253, 397, 473), (225, 583, 344), (611, 547, 461), (709, 438, 239), (440, 585, 176), (230, 177, 124), (498, 413, 247), (439, 15, 376), (729, 689, 323), (380, 283, 248), (218, 552, 490), (608, 692, 410), (565, 481, 436), (40, 170, 471), (682, 548, 323), (378, 303, 109), (655, 507, 449), (412, 723, 415), (3, 115, 98), (194, 593, 176), (425, 587, 361), (169, 377, 213), (323, 167, 414)]
        maxIn = [983, 1095, 2937, 1455, 721, 2463, 1213, 2104, 1764, 1433, 1570, 1396, 2501, 534, 2572, 2010, 1135, 2819, 870, 1479, 530, 2879, 2283, 1382, 2478, 892, 1043, 2862, 2411, 1940, 1488, 2503, 2413, 2964, 1227, 2342, 963, 1013, 2663, 1091, 2851, 696, 1159, 2786, 2582, 871, 2413, 1836, 1220, 747, 1222, 2973, 2174, 2329, 2426, 1312, 821, 2557, 2635, 2925, 603, 1762, 2892, 2845, 869, 1109, 689, 2878, 2217, 1031, 984, 2078, 972, 2173, 2430, 1746, 1894, 1633, 917, 2631, 2539, 2087, 597, 1368, 800, 2053, 1083, 2986, 2024, 1685, 886, 2135, 1967, 2209, 503, 1576, 1075, 1995, 1032, 1591, 1742, 1096, 2776, 570, 1540, 1996, 1283, 1988, 1477, 2891, 731, 1518, 1743, 503, 2360, 2517, 1488, 1006, 2240, 1834, 1152, 851, 1827, 1157, 2109, 1103, 2185, 829, 905, 2858, 2156, 1643, 1983, 2384, 2104, 2942, 2634, 1432, 1596, 1061, 2190, 1638, 947, 2948, 1732, 1723, 1242, 1772, 1328, 1241, 1930, 2623, 1281, 1893, 1877, 908, 2926, 2451, 1172, 1773, 1249, 2683, 1153, 2827, 2562, 2801, 1139, 2983, 2828, 2090, 1388, 791, 1273, 2434, 2713, 508, 1218, 2362, 1727, 2507, 2023, 1771, 2173, 1813, 638, 2036, 1044, 1987, 2784, 2464, 1325, 1694, 911, 2077, 1324, 991, 1641, 2132, 2337, 1284, 741, 2511, 2854, 1821, 1400, 1048, 2684, 2372, 1645, 974, 1888, 1172, 1093, 803, 971, 2595, 1715, 2368, 1258, 1656, 2867, 1151, 2633, 2375, 1196, 752, 1684, 1886, 2047, 1538, 1854, 2160, 1807, 1332, 888, 1613, 2117, 2387, 2807, 841, 1611, 1107, 954, 648, 2150, 1268, 2685, 2140, 2565, 1241, 2237, 768, 1297, 1493, 2978, 2276, 2718, 2278, 1133, 1912, 1889, 2397, 1943, 1247, 2659, 765, 2876, 2485, 690, 1339, 1502, 2314, 2601, 626, 2685, 540, 2951, 2610, 2143, 1512, 2161, 735, 1344, 2091, 2029, 557, 1757, 1566, 1767, 2572, 2528, 1428, 1738, 2847, 1817, 1779, 2894, 2937, 1365, 752, 1605, 2145, 2682, 2254, 2098, 1044, 535, 2343, 687, 2254, 1391, 1856, 771, 1838, 1659, 971, 1852, 2719, 647, 1399, 2609, 1403, 1718, 1198, 2649, 1049, 2996, 1872, 2205, 1394, 1368, 2769, 1842, 1313, 1402, 1604, 2716, 1326, 1999, 2323, 1220, 2402, 883, 1578, 2166, 2937, 2063, 981, 2658, 943, 2605, 1491, 834, 513, 2200, 2109, 578, 2266, 2561, 1579, 1802, 2396, 1937, 2292, 1344, 1095, 1199, 1703, 2573, 1516, 2093, 947, 567, 2484, 2708, 1519, 2162, 2670, 1059, 2055, 1438, 791, 2230, 693, 2140, 1062, 1648, 1836, 1865, 2849, 1061, 1285, 1760, 1096, 2310, 779, 708, 1082, 1634, 1718, 1833, 1728, 530, 1517, 1267, 2450, 505, 1725, 1861, 985, 1074, 1865, 1384, 704, 1294, 1778, 1165, 758, 894, 1197, 537, 1476, 2240, 2507, 2198, 2793, 510, 1804, 2710, 707, 1028, 743, 1008, 529, 2143, 2991, 2256, 1754, 519, 2612, 2812, 1879, 554, 1102, 2841, 2384, 1220, 662, 1165, 1927, 1296, 1151, 757, 1885, 1152, 866, 1159, 1112, 2046, 858, 2511, 1756, 776, 985, 989, 2469, 1881, 1887, 2638, 573, 2167, 2066, 1277, 631, 2272, 1729, 1789, 1820, 2711, 878, 1058, 2954, 2500, 613, 1921, 1411, 1224, 2485, 843, 2175, 716, 2626, 763, 2458, 2181, 677, 717, 1927, 2733, 2882, 2819, 2655, 2906, 2630, 1821, 2472, 1671, 547, 1323, 2429, 1510, 1101, 548, 743, 2060, 666, 1268, 1032, 1679, 1586, 2813, 1844, 2766, 2210, 1824, 2695, 699, 2802, 2454, 1812, 1098, 711, 1659, 565, 887, 2762, 2724, 1923, 1520, 633, 2249, 582, 1607, 1946, 880, 1324, 2261, 2155, 2071, 2035, 693, 2795, 755, 2225, 2978, 2672, 742, 531, 1856, 2338, 958, 1041, 518, 1820, 1567, 1666, 986, 1530, 2538, 687, 1545, 1168, 2235, 2882, 1199, 1496, 1151, 2063, 1840, 882, 2242, 781, 2279, 1304, 679, 1007, 2372, 2471, 839, 2162, 1738, 2087, 1319, 872, 1773, 742, 2356, 1887, 2602, 577, 2925, 1791, 2427, 2962, 2226, 1955, 1681, 2332, 2107, 1954, 1344, 2568, 2577, 2071, 2117, 1345, 557, 1495, 2556, 1945, 1561, 2634, 2317, 2793, 1999, 1706, 1153, 2261, 1371, 960, 2314, 2026, 2779, 1433, 2500, 1596, 1103, 2831, 2570, 2024, 1618, 1283, 1682, 2557, 588, 1919, 2362, 2115, 1601, 1383, 1621, 2109, 915, 2255, 1820, 2109, 2962, 1986, 1032, 1544, 2814, 1908, 2540, 1967, 741, 1866, 2684, 692, 1104, 2289, 1192, 1101, 724, 1206, 1809, 2553, 2091, 2106, 1559, 1012, 1289, 1967, 1824, 644, 2112, 1583, 2084, 1809, 2200, 1984, 1127, 1214, 2116, 2703, 1268, 2840, 1342, 2298, 1437, 2129, 2278, 646, 1985, 2199, 913, 2522, 2238, 1679, 2210, 714, 1648, 1228, 1563, 2226, 1803, 761, 1249, 1461, 2065, 842, 1201, 1578, 644, 2887, 2822, 1269, 2654, 1211, 2665, 1329, 2758, 1344, 1680, 1829, 2920, 1267, 2961, 1002, 628, 1924]
        maxOut = [693, 581, 1212, 1828, 2310, 1053, 1490, 2518, 3423, 3404, 1964, 3000, 2782, 2117, 3809, 508, 2083, 3527, 3183, 2129, 3880, 3238, 2305, 2523, 3842, 537, 1940, 1914, 661, 2615, 1731, 2670, 2913, 3717, 3819, 1935, 3517, 2128, 686, 2536, 1546, 3627, 2372, 2891, 1214, 2870, 591, 719, 2987, 514, 3852, 3014, 2609, 1873, 3061, 1288, 790, 3639, 2192, 3019, 1546, 2866, 3004, 1947, 634, 1760, 2712, 594, 3828, 1405, 3711, 3512, 642, 1546, 884, 3053, 2560, 3130, 2801, 3687, 2593, 2056, 897, 821, 1758, 2640, 3934, 3837, 2366, 3020, 2413, 706, 3639, 579, 629, 2022, 2930, 3316, 1033, 2042, 1337, 2407, 1230, 3063, 2878, 659, 1619, 1943, 3538, 2168, 1645, 2170, 3628, 3436, 678, 3023, 881, 1278, 1171, 2092, 698, 1705, 3016, 874, 525, 2213, 1023, 1126, 3002, 3942, 3030, 3865, 3552, 1428, 1949, 1206, 1966, 3968, 3767, 3284, 1329, 3264, 1401, 1204, 929, 1656, 3454, 3642, 668, 3789, 3960, 501, 3869, 1881, 3213, 3504, 516, 3376, 1291, 2928, 3005, 3681, 2780, 577, 3482, 3219, 1753, 2260, 2944, 3972, 2971, 1142, 2454, 2535, 3138, 2430, 3591, 3031, 625, 1576, 3109, 3665, 3802, 3210, 2447, 3502, 2388, 1883, 1139, 3740, 546, 684, 2203, 2424, 661, 552, 844, 3716, 856, 1848, 1865, 1249, 3198, 3357, 3184, 2689, 1549, 1868, 3428, 2659, 806, 1663, 2984, 1547, 2143, 2841, 3327, 637, 2100, 1024, 2662, 1363, 3446, 2722, 1000, 2650, 3998, 3764, 2561, 1641, 637, 2007, 2608, 2420, 3890, 961, 1076, 2264, 963, 1035, 3562, 615, 1824, 2632, 2722, 2215, 1015, 2627, 1975, 3401, 3093, 2557, 731, 2000, 1895, 724, 982, 864, 1151, 1579, 2288, 3736, 3594, 3429, 2016, 680, 3235, 808, 3479, 3808, 939, 2773, 1059, 573, 2476, 516, 3714, 1526, 658, 3956, 1697, 1391, 1492, 1966, 1108, 3747, 1497, 3719, 2903, 2979, 3028, 3822, 3441, 2137, 2305, 3652, 3664, 507, 3742, 1277, 3360, 3324, 730, 2936, 2660, 2613, 1883, 3421, 1872, 1043, 639, 3144, 1114, 3204, 3667, 1023, 668, 3445, 1970, 1405, 2136, 3717, 858, 1266, 1008, 2518, 665, 3722, 2888, 589, 3141, 983, 3962, 1848, 1078, 800, 1823, 3724, 3990, 2879, 2926, 1525, 1559, 3990, 3630, 1490, 1219, 1805, 1417, 1782, 3422, 1512, 1503, 1827, 1662, 3517, 3385, 980, 1129, 2274, 1152, 2466, 2821, 3536, 2369, 1686, 1319, 728, 1308, 2536, 3949, 1888, 3319, 2136, 2453, 3285, 1916, 3618, 1211, 3948, 3270, 3084, 2664, 1751, 1453, 2172, 3875, 2811, 3060, 730, 3335, 1680, 1262, 2879, 3681, 1927, 1554, 3230, 3729, 1986, 956, 2981, 1246, 1435, 885, 2770, 3207, 962, 3099, 663, 1453, 1063, 3388, 974, 3192, 2866, 2042, 2797, 2862, 1124, 1007, 535, 2377, 3140, 3862, 3326, 1859, 3371, 1804, 2846, 539, 1896, 2835, 2305, 1358, 2333, 1222, 2581, 3799, 1122, 1173, 2073, 899, 3841, 1678, 3523, 3670, 2553, 3812, 891, 3109, 3754, 1612, 3958, 3755, 3409, 2380, 673, 2851, 3503, 2228, 3633, 1463, 3918, 3688, 2332, 2369, 3010, 3807, 2926, 886, 2528, 1134, 3002, 2638, 1856, 1053, 3709, 578, 3095, 3393, 1687, 3253, 566, 2101, 3552, 2727, 1256, 2751, 2363, 2434, 580, 846, 2689, 3997, 2231, 3435, 2333, 2605, 1465, 1022, 3563, 1148, 1829, 1863, 2335, 3854, 2987, 3112, 2400, 2575, 2543, 2878, 3896, 3850, 3594, 3035, 3613, 3446, 1031, 596, 879, 977, 669, 1189, 904, 1009, 3862, 3447, 971, 3298, 3860, 691, 3540, 3093, 2373, 962, 701, 1725, 2664, 1315, 3403, 637, 1215, 3529, 2093, 1787, 1007, 1018, 3390, 1244, 2238, 1883, 514, 2090, 1541, 2992, 3183, 602, 3057, 1809, 2898, 3909, 1831, 2457, 1553, 2649, 926, 572, 3114, 2307, 1739, 3563, 1842, 2984, 2828, 1351, 2517, 2385, 3242, 886, 1501, 3682, 3158, 2545, 3250, 1511, 3379, 2869, 3967, 1117, 1922, 598, 789, 1473, 975, 2850, 3237, 2476, 2552, 1447, 2617, 679, 1944, 2142, 2900, 1115, 2818, 2576, 1686, 778, 3108, 2755, 3492, 3153, 3981, 2177, 1243, 3010, 1471, 3215, 3523, 2598, 546, 2444, 3003, 1958, 3294, 1903, 3556, 2638, 747, 2684, 3926, 2921, 2812, 3890, 1876, 1771, 2388, 2682, 1664, 3334, 1534, 3832, 1917, 832, 2783, 632, 2417, 837, 506, 1797, 3156, 2084, 2389, 2437, 3157, 2328, 3488, 1208, 1618, 1028, 1355, 2043, 1046, 982, 1300, 2527, 2971, 3815, 3661, 2325, 1207, 3831, 2256, 1703, 2989, 1338, 2271, 1452, 3434, 1898, 3526, 1295, 1771, 2225, 1553, 1564, 1811, 751, 1028, 3126, 2412, 2875, 3188, 1104, 814, 2795, 2051, 2287, 1557, 3933, 3038, 620, 3060, 3692, 2493, 2672, 591, 2449, 1737, 2793, 3555, 2221, 3116, 3704, 1767, 745, 1131, 1383, 745, 2987, 2305, 2691, 3121, 994, 770, 1211, 2748, 1167, 1295, 2941, 1267, 3302, 794, 2128, 3417, 861, 3806]
        origin = 213
        targets = [172, 184, 732, 542, 378, 216, 205, 677, 16, 496, 125, 512]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 1525)
    
    def test_edgeCase2(self):   
        connections = [(0, 1, 3000), (1, 2, 2000), (1, 3, 1000), (0, 3, 2000), (3, 4, 2000), (3, 2, 1000)]
        maxIn = [5000, 3000, 3000, 3000, 2000]
        maxOut = [5000, 3000, 3000, 2500, 2000]
        origin = 0
        targets = [4, 2]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 4500)
    
    def test_873846(self):
        connections = [(2, 0, 600), (9, 11, 920), (11, 7, 548), (8, 1, 577), (1, 7, 730), (3, 5, 335), (8, 6, 347), (1, 0, 355), (11, 0, 844), (3, 10, 471), (5, 7, 826), (7, 1, 647), (9, 1, 524), (0, 
    3, 938), (10, 1, 597), (6, 2, 630), (7, 8, 835), (4, 5, 413), (10, 9, 668), (6, 7, 287), (10, 4, 690), (11, 5, 347), (4, 11, 849), (0, 7, 773), (9, 8, 574), (8, 0, 472)]
        maxIn = [740, 295, 599, 290, 726, 734, 228, 494, 689, 786, 702, 678]
        maxOut = [670, 513, 932, 493, 891, 599, 957, 195, 721, 141, 647, 956]
        origin = 4
        targets = [1, 11, 7]
        self.assertEqual(maxThroughput(connections, maxIn, maxOut, origin, targets), 891)


if __name__ == "__main__":
    unittest.main()

    
    